"use strict";



define('ghost-admin/adapters/application', ['exports', 'ghost-admin/adapters/embedded-relation-adapter'], function (exports, _embeddedRelationAdapter) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _embeddedRelationAdapter.default.extend({
        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        }
    });
});
define('ghost-admin/adapters/base', ['exports', 'ember-ajax/mixins/ajax-support', 'ember-simple-auth/mixins/data-adapter-mixin', 'ember-data/adapters/rest', 'ghost-admin/utils/ghost-paths', 'ember-service/inject'], function (exports, _ajaxSupport, _dataAdapterMixin, _rest, _ghostPaths, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _rest.default.extend(_dataAdapterMixin.default, _ajaxSupport.default, {
        authorizer: 'authorizer:oauth2',

        host: window.location.origin,
        namespace: (0, _ghostPaths.default)().apiRoot.slice(1),

        session: (0, _inject.default)(),

        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        },
        query: function query(store, type, _query) {
            var id = void 0;

            if (_query.id) {
                id = _query.id;
                delete _query.id;
            }

            return this.ajax(this.buildURL(type.modelName, id), 'GET', { data: _query });
        },
        buildURL: function buildURL() {
            // Ensure trailing slashes
            var url = this._super.apply(this, arguments);

            if (url.slice(-1) !== '/') {
                url += '/';
            }

            return url;
        }
    });
});
define('ghost-admin/adapters/embedded-relation-adapter', ['exports', 'ghost-admin/adapters/base', 'ember-metal/get', 'ember-utils'], function (exports, _base, _get, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    exports.default = _base.default.extend({
        find: function find(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
        },
        findRecord: function findRecord(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
        },
        findAll: function findAll(store, type, sinceToken) {
            var query = void 0,
                url = void 0;

            if (sinceToken) {
                query = { since: sinceToken };
            }

            url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');

            return this.ajax(url, 'GET', { data: query });
        },
        query: function query(store, type, _query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, _query));
        },
        queryRecord: function queryRecord(store, type, query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, query));
        },
        createRecord: function createRecord(store, type, snapshot) {
            return this.saveRecord(store, type, snapshot, { method: 'POST' }, 'createRecord');
        },
        updateRecord: function updateRecord(store, type, snapshot) {
            var options = {
                method: 'PUT',
                id: (0, _get.default)(snapshot, 'id')
            };

            return this.saveRecord(store, type, snapshot, options, 'updateRecord');
        },
        saveRecord: function saveRecord(store, type, snapshot, options, requestType) {
            var _options = options || {};
            var url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, requestType);
            var payload = this.preparePayload(store, type, snapshot);

            return this.ajax(url, _options.method, payload);
        },
        preparePayload: function preparePayload(store, type, snapshot) {
            var serializer = store.serializerFor(type.modelName);
            var payload = {};

            serializer.serializeIntoHash(payload, type, snapshot);

            return { data: payload };
        },
        buildIncludeURL: function buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
            var includes = this.getEmbeddedRelations(store, modelName);
            var url = this.buildURL(modelName, id, snapshot, requestType, query);

            if (includes.length) {
                url += '?include=' + includes.join(',');
            }

            return url;
        },
        buildQuery: function buildQuery(store, modelName, options) {
            var deDupe = {};
            var toInclude = this.getEmbeddedRelations(store, modelName);
            var query = options || {};

            if (toInclude.length) {
                // If this is a find by id, build a query object and attach the includes
                if (typeof options === 'string' || typeof options === 'number') {
                    query = {};
                    query.id = options;
                    query.include = toInclude.join(',');
                } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' || (0, _emberUtils.isNone)(options)) {
                    // If this is a find all (no existing query object) build one and attach
                    // the includes.
                    // If this is a find with an existing query object then merge the includes
                    // into the existing object. Existing properties and includes are preserved.
                    query = query || {};
                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);

                    toInclude.forEach(function (include) {
                        deDupe[include] = true;
                    });

                    query.include = Object.keys(deDupe).join(',');
                }
            }

            return query;
        },
        getEmbeddedRelations: function getEmbeddedRelations(store, modelName) {
            var model = store.modelFor(modelName);
            var ret = [];

            // Iterate through the model's relationships and build a list
            // of those that need to be pulled in via "include" from the API
            model.eachRelationship(function (name, meta) {
                if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
                    ret.push(name);
                }
            });

            return ret;
        }
    });
});
define('ghost-admin/adapters/setting', ['exports', 'ghost-admin/adapters/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        updateRecord: function updateRecord(store, type, record) {
            var data = {};
            var serializer = store.serializerFor(type.modelName);

            // remove the fake id that we added onto the model.
            delete record.id;

            // use the SettingSerializer to transform the model back into
            // an array of settings objects like the API expects
            serializer.serializeIntoHash(data, type, record);

            // use the ApplicationAdapter's buildURL method but do not
            // pass in an id.
            return this.ajax(this.buildURL(type.modelName), 'PUT', { data: data });
        }
    });
});
define('ghost-admin/adapters/tag', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _application, _slugUrl) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _application.default.extend(_slugUrl.default);
});
define('ghost-admin/adapters/theme', ['exports', 'ghost-admin/adapters/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        activate: function activate(model) {
            var _this = this;

            var url = this.buildURL('theme', model.get('id')) + 'activate/';

            return this.ajax(url, 'PUT', { data: {} }).then(function (data) {
                _this.store.pushPayload(data);
                return model;
            });
        }
    });
});
define('ghost-admin/adapters/user', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _application, _slugUrl) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend(_slugUrl.default, {
        find: function find(store, type, id) {
            return this.findQuery(store, type, { id: id, status: 'all' });
        },


        // TODO: This is needed because the API currently expects you to know the
        // status of the record before retrieving by ID. Quick fix is to always
        // include status=all in the query
        findRecord: function findRecord(store, type, id, snapshot) {
            var url = this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord');

            url += '&status=all';

            return this.ajax(url, 'GET');
        },
        findAll: function findAll(store, type, id) {
            return this.query(store, type, { id: id, status: 'all' });
        },
        queryRecord: function queryRecord(store, type, query) {
            if (!query || query.id !== 'me') {
                return this._super.apply(this, arguments);
            }

            var url = this.buildURL(type.modelName, 'me', null, 'findRecord');

            return this.ajax(url, 'GET', { data: { include: 'roles' } });
        }
    });
});
define('ghost-admin/app', ['exports', 'ember-application', 'ember', 'ghost-admin/resolver', 'ghost-admin/config/environment', 'ember-load-initializers', 'ghost-admin/utils/link-component', 'ghost-admin/utils/route', 'ghost-admin/utils/text-field'], function (exports, _emberApplication, _ember, _resolver, _environment, _emberLoadInitializers) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    _ember.default.MODEL_FACTORY_INJECTIONS = true;

    var App = _emberApplication.default.extend({
        Resolver: _resolver.default,
        modulePrefix: _environment.default.modulePrefix,
        podModulePrefix: _environment.default.podModulePrefix,

        customEvents: {
            touchstart: null,
            touchmove: null,
            touchend: null,
            touchcancel: null
        }
    });

    // TODO: remove once the validations refactor is complete
    // eslint-disable-next-line
    _ember.default.Debug.registerWarnHandler(function (message, options, next) {
        var skip = ['ds.errors.add', 'ds.errors.remove', 'ds.errors.clear'];

        if (skip.includes(options.id)) {
            return;
        }

        next(message, options);
    });

    (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);

    exports.default = App;
});
define('ghost-admin/authenticators/oauth2-ghost', ['exports', 'ghost-admin/authenticators/oauth2', 'rsvp', 'ember-runloop', 'ember-platform', 'ember-utils', 'ember-array/utils'], function (exports, _oauth, _rsvp, _emberRunloop, _emberPlatform, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _oauth.default.extend({
        // TODO: all this is doing is changing the `data` structure, we should
        // probably create our own token auth, maybe look at
        // https://github.com/jpadilla/ember-simple-auth-token
        authenticate: function authenticate(identification, password) {
            var _this = this;

            var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            return new _rsvp.default.Promise(function (resolve, reject) {
                // const data                = { 'grant_type': 'password', username: identification, password };
                var data = identification;
                var serverTokenEndpoint = _this.get('serverTokenEndpoint');
                var scopesString = (0, _utils.wrap)(scope).join(' ');

                // eslint-disable-next-line camelcase
                data.grant_type = 'authorization_code';

                if (!(0, _emberUtils.isEmpty)(scopesString)) {
                    data.scope = scopesString;
                }

                _this.makeRequest(serverTokenEndpoint, data).then(function (response) {
                    (0, _emberRunloop.default)(function () {
                        var expiresAt = _this._absolutizeExpirationTime(response.expires_in);
                        _this._scheduleAccessTokenRefresh(response.expires_in, expiresAt, response.refresh_token);
                        if (!(0, _emberUtils.isEmpty)(expiresAt)) {
                            response = (0, _emberPlatform.assign)(response, { 'expires_at': expiresAt });
                        }
                        resolve(response);
                    });
                }, function (error) {
                    reject(error);
                });
            });
        }
    });
});
define('ghost-admin/authenticators/oauth2', ['exports', 'ember-simple-auth/authenticators/oauth2-password-grant', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ember-platform', 'ember-utils', 'ember-array/utils'], function (exports, _oauth2PasswordGrant, _rsvp, _emberComputed, _inject, _emberRunloop, _emberPlatform, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _oauth2PasswordGrant.default.extend({
        ajax: (0, _inject.default)(),
        session: (0, _inject.default)(),
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);

            var handler = _emberRunloop.default.bind(this, function () {
                _this.onOnline();
            });
            window.addEventListener('online', handler);
        },


        serverTokenEndpoint: (0, _emberComputed.default)('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/token';
        }),

        serverTokenRevocationEndpoint: (0, _emberComputed.default)('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/revoke';
        }),

        makeRequest: function makeRequest(url, data) {
            /* eslint-disable camelcase */
            data.client_id = this.get('config.clientId');
            data.client_secret = this.get('config.clientSecret');
            /* eslint-enable camelcase */

            var options = {
                data: data,
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded'
            };

            return this.get('ajax').post(url, options);
        },


        /**
         * Invoked when "navigator.online" event is trigerred.
         * This is a helper function to handle intermittent internet connectivity. Token is refreshed
         * when browser status becomes "online".
         */
        onOnline: function onOnline() {
            if (this.get('session.isAuthenticated')) {
                var autoRefresh = this.get('refreshAccessTokens');
                if (autoRefresh) {
                    var expiresIn = this.get('session.data.authenticated.expires_in');
                    var token = this.get('session.data.authenticated.refresh_token');
                    return this._refreshAccessToken(expiresIn, token);
                }
            }
        },
        authenticate: function authenticate(identification, password) {
            var _this2 = this;

            var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return new _rsvp.default.Promise(function (resolve, reject) {
                var data = { 'grant_type': 'password', username: identification, password: password };
                var serverTokenEndpoint = _this2.get('serverTokenEndpoint');
                var scopesString = (0, _utils.wrap)(scope).join(' ');
                if (!(0, _emberUtils.isEmpty)(scopesString)) {
                    data.scope = scopesString;
                }
                _this2.makeRequest(serverTokenEndpoint, data, headers).then(function (response) {
                    (0, _emberRunloop.default)(function () {
                        /* eslint-disable camelcase */
                        var expiresAt = _this2._absolutizeExpirationTime(response.expires_in);
                        _this2._scheduleAccessTokenRefresh(response.expires_in, expiresAt, response.refresh_token);
                        /* eslint-enable camelcase */

                        if (!(0, _emberUtils.isEmpty)(expiresAt)) {
                            response = (0, _emberPlatform.assign)(response, { 'expires_at': expiresAt });
                        }

                        resolve(response);
                    });
                }, function (error) {
                    reject(error);
                });
            });
        }
    });
});
define('ghost-admin/authorizers/oauth2', ['exports', 'ember-simple-auth/authorizers/oauth2-bearer'], function (exports, _oauth2Bearer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _oauth2Bearer.default;
});
define('ghost-admin/breakpoints', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    mobile: '(max-width: 768px)',
    tablet: '(min-width: 769px) and (max-width: 992px)',
    desktop: '(min-width: 993px) and (max-width: 1200px)',
    jumbo: '(min-width: 1201px)'
  };
});
define("ghost-admin/components/-lf-get-outlet-state", ["exports", "liquid-fire/components/-lf-get-outlet-state"], function (exports, _lfGetOutletState) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _lfGetOutletState.default;
    }
  });
});
define('ghost-admin/components/active-link', ['exports', 'ember-cli-active-link-wrapper/components/active-link'], function (exports, _activeLink) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _activeLink.default;
});
define('ghost-admin/components/as-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberScrollable.default.extend({
    classNames: 'as-scrollable'
  });
});
define('ghost-admin/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _basicDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/content-element', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content-element'], function (exports, _contentElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contentElement.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/content', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content'], function (exports, _content) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _content.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/trigger', ['exports', 'ember-basic-dropdown/components/basic-dropdown/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
define('ghost-admin/components/ember-load-remover', ['exports', 'ember-load/components/ember-load-remover'], function (exports, _emberLoadRemover) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberLoadRemover.default;
    }
  });
});
define('ghost-admin/components/ember-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberScrollable.default;
    }
  });
});
define('ghost-admin/components/ember-scrollbar', ['exports', 'ember-scrollable/components/ember-scrollbar'], function (exports, _emberScrollbar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberScrollbar.default;
    }
  });
});
define('ghost-admin/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, _emberSelectize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberSelectize.default;
});
define('ghost-admin/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberWormhole.default;
    }
  });
});
define('ghost-admin/components/gh-activating-list-item', ['exports', 'ember-component', 'ember-runloop'], function (exports, _emberComponent, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'li',
        classNameBindings: ['active'],
        active: false,
        linkClasses: null,

        click: function click() {
            this.$('a').blur();
        },


        actions: {
            setActive: function setActive(value) {
                (0, _emberRunloop.schedule)('afterRender', this, function () {
                    this.set('active', value);
                });
            }
        }
    });
});
define('ghost-admin/components/gh-alert', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'article',
        classNames: ['gh-alert'],
        classNameBindings: ['typeClass'],

        notifications: (0, _inject.default)(),

        typeClass: (0, _emberComputed.default)('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = void 0;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'blue',
                info: 'blue'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-alert-' + typeMapping[type];
            }

            return classes;
        }),

        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-alerts', ['exports', 'ember-component', 'ember-service/inject', 'ember-metal/observer', 'ember-computed'], function (exports, _emberComponent, _inject, _observer, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'aside',
        classNames: 'gh-alerts',

        notifications: (0, _inject.default)(),

        messages: (0, _emberComputed.alias)('notifications.alerts'),

        messageCountObserver: (0, _observer.default)('messages.[]', function () {
            this.sendAction('notify', this.get('messages').length);
        })
    });
});
define('ghost-admin/components/gh-app', ['exports', 'jquery', 'ember-component', 'ember-metal/observer'], function (exports, _jquery, _emberComponent, _observer) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: ['gh-app'],

        showSettingsMenu: false,

        toggleSettingsMenuBodyClass: (0, _observer.default)('showSettingsMenu', function () {
            var showSettingsMenu = this.get('showSettingsMenu');

            (0, _jquery.default)('body').toggleClass('settings-menu-expanded', showSettingsMenu);
        })
    });
});
define('ghost-admin/components/gh-basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown', 'ember-service/inject', 'ember-basic-dropdown/templates/components/basic-dropdown'], function (exports, _basicDropdown, _inject, _basicDropdown2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _basicDropdown.default.extend({
        dropdown: (0, _inject.default)(),

        layout: _basicDropdown2.default,

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.get('dropdown').on('close', this, this.close);
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.get('dropdown').off('close');
        }
    });
});
define('ghost-admin/components/gh-blog-url', ['exports', 'ember-component', 'ember-service/inject'], function (exports, _emberComponent, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: '',

        config: (0, _inject.default)()
    });
});
define('ghost-admin/components/gh-cm-editor', ['exports', 'ember-component', 'rsvp', 'ghost-admin/utils/bound-one-way', 'ember-service/inject', 'ember-invoke-action', 'ember-platform', 'ember-runloop'], function (exports, _emberComponent, _rsvp, _boundOneWay, _inject, _emberInvokeAction, _emberPlatform, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    var CmEditorComponent = _emberComponent.default.extend(_emberInvokeAction.InvokeActionMixin, {
        classNameBindings: ['isFocused:focus'],

        _value: (0, _boundOneWay.default)('value'), // make sure a value exists
        isFocused: false,

        // options for the editor
        lineNumbers: true,
        indentUnit: 4,
        mode: 'htmlmixed',
        theme: 'xq-light',

        _editor: null, // reference to CodeMirror editor

        lazyLoader: (0, _inject.default)(),

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            var loader = this.get('lazyLoader');

            _rsvp.default.all([loader.loadStyle('codemirror', 'assets/codemirror/codemirror-447e80da7fe8c5c2bcf39127200cead2.css'), loader.loadScript('codemirror', 'assets/codemirror/codemirror-9a6057638863e61a4a67badb4d33bbaa.js')]).then(function () {
                (0, _emberRunloop.scheduleOnce)('afterRender', _this, function () {
                    this._initCodeMirror();
                });
            });
        },
        _initCodeMirror: function _initCodeMirror() {
            var options = this.getProperties('lineNumbers', 'indentUnit', 'mode', 'theme', 'autofocus');
            (0, _emberPlatform.assign)(options, { value: this.get('_value') });

            this._editor = new CodeMirror(this.element, options);

            // by default CodeMirror will place the cursor at the beginning of the
            // content, it makes more sense for the cursor to be at the end
            if (options.autofocus) {
                this._editor.setCursor(this._editor.lineCount(), 0);
            }

            // events
            this._setupCodeMirrorEventHandler('focus', this, this._focus);
            this._setupCodeMirrorEventHandler('blur', this, this._blur);
            this._setupCodeMirrorEventHandler('change', this, this._update);
        },
        _setupCodeMirrorEventHandler: function _setupCodeMirrorEventHandler(event, target, method) {
            var callback = (0, _emberRunloop.bind)(target, method);

            this._editor.on(event, callback);

            this.one('willDestroyElement', this, function () {
                this._editor.off(event, callback);
            });
        },
        _update: function _update(codeMirror, changeObj) {
            (0, _emberRunloop.once)(this, this._invokeUpdateAction, codeMirror.getValue(), codeMirror, changeObj);
        },
        _invokeUpdateAction: function _invokeUpdateAction() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            this.invokeAction.apply(this, ['update'].concat(_toConsumableArray(args)));
        },
        _focus: function _focus(codeMirror, event) {
            this.set('isFocused', true);
            (0, _emberRunloop.once)(this, this._invokeFocusAction, codeMirror.getValue(), codeMirror, event);
        },
        _invokeFocusAction: function _invokeFocusAction() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            this.invokeAction.apply(this, ['focus-in'].concat(_toConsumableArray(args)));
        },
        _blur: function _blur() /* codeMirror, event */{
            this.set('isFocused', false);
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            // Ensure the editor exists before trying to destroy it. This fixes
            // an error that occurs if codemirror hasn't finished loading before
            // the component is destroyed.
            if (this._editor) {
                var editor = this._editor.getWrapperElement();
                editor.parentNode.removeChild(editor);
                this._editor = null;
            }
        }
    });

    CmEditorComponent.reopenClass({
        positionalParams: ['value']
    });

    exports.default = CmEditorComponent;
});
define('ghost-admin/components/gh-content-cover', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: ['content-cover'],

        onClick: null,
        onMouseEnter: null,

        click: function click() {
            this.sendAction('onClick');
        },
        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
define('ghost-admin/components/gh-date-time-picker', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'moment', 'ember-utils'], function (exports, _emberComponent, _emberComputed, _inject, _moment, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        settings: (0, _inject.default)(),

        tagName: '',

        date: '',
        time: '',
        errors: null,
        dateErrorProperty: null,
        timeErrorProperty: null,

        _time: '',
        _previousTime: '',
        _minDate: null,
        _maxDate: null,

        blogTimezone: (0, _emberComputed.reads)('settings.activeTimezone'),
        hasError: (0, _emberComputed.or)('dateError', 'timeError'),

        timezone: (0, _emberComputed.default)('blogTimezone', function () {
            var blogTimezone = this.get('blogTimezone');
            return _moment.default.utc().tz(blogTimezone).format('z');
        }),

        dateError: (0, _emberComputed.default)('errors.[]', 'dateErrorProperty', function () {
            var errors = this.get('errors');
            var property = this.get('dateErrorProperty');

            if (!(0, _emberUtils.isEmpty)(errors.errorsFor(property))) {
                return errors.errorsFor(property).get('firstObject').message;
            }
        }),

        timeError: (0, _emberComputed.default)('errors.[]', 'timeErrorProperty', function () {
            var errors = this.get('errors');
            var property = this.get('timeErrorProperty');

            if (!(0, _emberUtils.isEmpty)(errors.errorsFor(property))) {
                return errors.errorsFor(property).get('firstObject').message;
            }
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            var date = this.get('date');
            var time = this.get('time');
            var minDate = this.get('minDate');
            var maxDate = this.get('maxDate');
            var blogTimezone = this.get('blogTimezone');

            if (!(0, _emberUtils.isBlank)(date)) {
                this.set('_date', (0, _moment.default)(date));
            } else {
                this.set('_date', (0, _moment.default)().tz(blogTimezone));
            }

            if ((0, _emberUtils.isBlank)(time)) {
                this.set('_time', this.get('_date').format('HH:mm'));
            } else {
                this.set('_time', this.get('time'));
            }
            this.set('_previousTime', this.get('_time'));

            // unless min/max date is at midnight moment will diable that day
            if (minDate === 'now') {
                this.set('_minDate', (0, _moment.default)((0, _moment.default)().format('YYYY-MM-DD')));
            } else if (!(0, _emberUtils.isBlank)(minDate)) {
                this.set('_minDate', (0, _moment.default)((0, _moment.default)(minDate).format('YYYY-MM-DD')));
            } else {
                this.set('_minDate', null);
            }

            if (maxDate === 'now') {
                this.set('_maxDate', (0, _moment.default)((0, _moment.default)().format('YYYY-MM-DD')));
            } else if (!(0, _emberUtils.isBlank)(maxDate)) {
                this.set('_maxDate', (0, _moment.default)((0, _moment.default)(maxDate).format('YYYY-MM-DD')));
            } else {
                this.set('_maxDate', null);
            }
        },


        actions: {
            // if date or time is set and the other property is blank set that too
            // so that we don't get "can't be blank" errors
            setDate: function setDate(date) {
                if (date !== this.get('_date')) {
                    this.get('setDate')(date);

                    if ((0, _emberUtils.isBlank)(this.get('time'))) {
                        this.get('setTime')(this.get('_time'));
                    }
                }
            },
            setTime: function setTime(time) {
                if (time !== this.get('_previousTime')) {
                    this.get('setTime')(time);
                    this.set('_previousTime', time);

                    if ((0, _emberUtils.isBlank)(this.get('date'))) {
                        this.get('setDate')(this.get('_date'));
                    }
                }
            }
        }
    });
});
define('ghost-admin/components/gh-datetime-input', ['exports', 'ember-component', 'ghost-admin/utils/bound-one-way', 'ember-service/inject', 'moment', 'ember-invoke-action', 'ghost-admin/utils/date-formatting'], function (exports, _emberComponent, _boundOneWay, _inject, _moment, _emberInvokeAction, _dateFormatting) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_emberInvokeAction.InvokeActionMixin, {
        tagName: 'span',
        classNames: 'gh-input-icon gh-icon-calendar',

        datetime: (0, _boundOneWay.default)('value'),
        inputClass: null,
        inputId: null,
        inputName: null,
        settings: (0, _inject.default)(),

        didReceiveAttrs: function didReceiveAttrs() {
            var datetime = this.get('datetime') || _moment.default.utc();
            var blogTimezone = this.get('settings.activeTimezone');

            if (!this.get('update')) {
                throw new Error('You must provide an `update` action to `{{' + this.templateName + '}}`.');
            }

            this.set('datetime', (0, _dateFormatting.formatDate)(datetime || _moment.default.utc(), blogTimezone));
        },
        focusOut: function focusOut() {
            var datetime = this.get('datetime');

            this.invokeAction('update', datetime);
        }
    });
});
define('ghost-admin/components/gh-download-count', ['exports', 'ember-component', 'ember', 'ember-service/inject', 'ember-concurrency'], function (exports, _emberComponent, _ember, _inject, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;

    var INTERVAL = testing ? 20 : 2000;

    exports.default = _emberComponent.default.extend({
        ajax: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        count: '',

        _poll: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var url, pattern, data, count;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            url = this.get('ghostPaths.count');
                            pattern = /(-?\d+)(\d{3})/;
                            _context.prev = 2;
                            _context.next = 5;
                            return this.get('ajax').request(url);

                        case 5:
                            data = _context.sent;
                            count = data.count.toString();


                            while (pattern.test(count)) {
                                count = count.replace(pattern, '$1,$2');
                            }

                            this.set('count', count);

                            if (testing) {
                                _context.next = 13;
                                break;
                            }

                            _context.next = 12;
                            return (0, _emberConcurrency.timeout)(INTERVAL);

                        case 12:
                            this.get('_poll').perform();

                        case 13:
                            _context.next = 17;
                            break;

                        case 15:
                            _context.prev = 15;
                            _context.t0 = _context['catch'](2);

                        case 17:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 15]]);
        })),

        didInsertElement: function didInsertElement() {
            this.get('_poll').perform();
        }
    });
});
define('ghost-admin/components/gh-dropdown-button', ['exports', 'ember-component', 'ghost-admin/mixins/dropdown-mixin', 'ember-service/inject'], function (exports, _emberComponent, _dropdownMixin, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_dropdownMixin.default, {
        tagName: 'button',
        attributeBindings: ['href', 'role'],
        role: 'button',

        // matches with the dropdown this button toggles
        dropdownName: null,

        dropdown: (0, _inject.default)(),

        // Notify dropdown service this dropdown should be toggled
        click: function click(event) {
            this._super(event);
            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);

            if (this.get('tagName') === 'a') {
                return false;
            }
        }
    });
});
define('ghost-admin/components/gh-dropdown', ['exports', 'ember-component', 'ghost-admin/mixins/dropdown-mixin', 'ember-computed', 'ember-service/inject', 'ember-runloop'], function (exports, _emberComponent, _dropdownMixin, _emberComputed, _inject, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_dropdownMixin.default, {
        classNames: 'dropdown',
        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],

        name: null,
        closeOnClick: false,

        // Helps track the user re-opening the menu while it's fading out.
        closing: false,

        // Helps track whether the dropdown is open or closes, or in a transition to either
        isOpen: false,

        // Managed the toggle between the fade-in and fade-out classes
        fadeIn: (0, _emberComputed.default)('isOpen', 'closing', function () {
            return this.get('isOpen') && !this.get('closing');
        }),

        dropdown: (0, _inject.default)(),

        open: function open() {
            this.set('isOpen', true);
            this.set('closing', false);
            this.set('button.isOpen', true);
        },
        close: function close() {
            var _this = this;

            this.set('closing', true);

            if (this.get('button')) {
                this.set('button.isOpen', false);
            }

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    (0, _emberRunloop.default)(_this, function () {
                        if (this.get('closing')) {
                            this.set('isOpen', false);
                            this.set('closing', false);
                        }
                    });
                }
            });
        },


        // Called by the dropdown service when any dropdown button is clicked.
        toggle: function toggle(options) {
            var isClosing = this.get('closing');
            var isOpen = this.get('isOpen');
            var name = this.get('name');
            var targetDropdownName = options.target;
            var button = this.get('button');

            if (name === targetDropdownName && (!isOpen || isClosing)) {
                if (!button) {
                    button = options.button;
                    this.set('button', button);
                }
                this.open();
            } else if (isOpen) {
                this.close();
            }
        },
        click: function click(event) {
            this._super(event);

            if (this.get('closeOnClick')) {
                return this.close();
            }
        },
        didInsertElement: function didInsertElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.on('close', this, this.close);
            dropdownService.on('toggle', this, this.toggle);
        },
        willDestroyElement: function willDestroyElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.off('close', this, this.close);
            dropdownService.off('toggle', this, this.toggle);
        }
    });
});
define('ghost-admin/components/gh-editor-post-status', ['exports', 'ember-component', 'ember-computed', 'ember-concurrency'], function (exports, _emberComponent, _emberComputed, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    // TODO: reduce when in testing mode
    var SAVE_TIMEOUT_MS = 3000;

    exports.default = _emberComponent.default.extend({
        post: null,
        isNew: (0, _emberComputed.reads)('post.isNew'),
        isScheduled: (0, _emberComputed.reads)('post.isScheduled'),
        isSaving: false,

        'data-test-editor-post-status': true,

        _isSaving: false,

        isPublished: (0, _emberComputed.default)('post.{isPublished,pastScheduledTime}', function () {
            var isPublished = this.get('post.isPublished');
            var pastScheduledTime = this.get('post.pastScheduledTime');

            return isPublished || pastScheduledTime;
        }),

        // isSaving will only be true briefly whilst the post is saving,
        // we want to ensure that the "Saving..." message is shown for at least
        // a few seconds so that it's noticeable
        didReceiveAttrs: function didReceiveAttrs() {
            if (this.get('isSaving')) {
                this.get('showSavingMessage').perform();
            }
        },


        showSavingMessage: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            this.set('_isSaving', true);
                            _context.next = 3;
                            return (0, _emberConcurrency.timeout)(SAVE_TIMEOUT_MS);

                        case 3:
                            this.set('_isSaving', false);

                        case 4:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).drop()
    });
});
define('ghost-admin/components/gh-editor', ['exports', 'ember-component', 'ember-runloop', 'ghost-admin/components/gh-image-uploader'], function (exports, _emberComponent, _emberRunloop, _ghImageUploader) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var debounce = _emberRunloop.default.debounce;
    exports.default = _emberComponent.default.extend({

        classNameBindings: ['isDraggedOver:-drag-over', 'isFullScreen:gh-editor-fullscreen', 'isPreview:gh-editor-preview'],

        // Public attributes
        navIsClosed: false,

        // Internal attributes
        droppedFiles: null,
        headerClass: '',
        imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
        imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
        isDraggedOver: false,
        isFullScreen: false,
        isSplitScreen: false,
        uploadedImageUrls: null,

        // Private
        _dragCounter: 0,
        _navIsClosed: false,
        _onResizeHandler: null,
        _viewActionsWidth: 190,

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            this._onResizeHandler = function (evt) {
                debounce(_this, _this._setHeaderClass, evt, 100);
            };
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            window.addEventListener('resize', this._onResizeHandler);
            this._setHeaderClass();
        },
        didReceiveAttrs: function didReceiveAttrs() {
            var navIsClosed = this.get('navIsClosed');

            if (navIsClosed !== this._navIsClosed) {
                _emberRunloop.default.scheduleOnce('afterRender', this, this._setHeaderClass);
            }

            this._navIsClosed = navIsClosed;
        },
        _setHeaderClass: function _setHeaderClass() {
            var $editorTitle = this.$('.gh-editor-title');
            var smallHeaderClass = 'gh-editor-header-small';

            if (this.get('isSplitScreen')) {
                this.set('headerClass', smallHeaderClass);
                return;
            }

            if ($editorTitle.length > 0) {
                var boundingRect = $editorTitle[0].getBoundingClientRect();
                var maxRight = window.innerWidth - this._viewActionsWidth;

                if (boundingRect.right >= maxRight) {
                    this.set('headerClass', smallHeaderClass);
                    return;
                }
            }

            this.set('headerClass', '');
        },


        // dragOver is needed so that drop works
        dragOver: function dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            var eA = event.dataTransfer.effectAllowed;
            event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';

            event.preventDefault();
            event.stopPropagation();
        },


        // dragEnter is needed so that the drag class is correctly removed
        dragEnter: function dragEnter(event) {
            if (!event.dataTransfer) {
                return;
            }

            event.preventDefault();
            event.stopPropagation();

            // the counter technique prevents flickering of the drag class when
            // dragging across child elements
            this._dragCounter++;

            this.set('isDraggedOver', true);
        },
        dragLeave: function dragLeave(event) {
            event.preventDefault();
            event.stopPropagation();

            this._dragCounter--;
            if (this._dragCounter === 0) {
                this.set('isDraggedOver', false);
            }
        },
        drop: function drop(event) {
            event.preventDefault();
            event.stopPropagation();

            this._dragCounter = 0;
            this.set('isDraggedOver', false);

            if (event.dataTransfer.files) {
                this.set('droppedFiles', event.dataTransfer.files);
            }
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            window.removeEventListener('resize', this._onResizeHandler);
        },


        actions: {
            toggleFullScreen: function toggleFullScreen(isFullScreen) {
                this.set('isFullScreen', isFullScreen);
                _emberRunloop.default.scheduleOnce('afterRender', this, this._setHeaderClass);
            },
            togglePreview: function togglePreview(isPreview) {
                this.set('isPreview', isPreview);
            },
            toggleSplitScreen: function toggleSplitScreen(isSplitScreen) {
                this.set('isSplitScreen', isSplitScreen);
                _emberRunloop.default.scheduleOnce('afterRender', this, this._setHeaderClass);
            },
            uploadImages: function uploadImages(fileList) {
                this.set('droppedFiles', fileList);
            },
            uploadComplete: function uploadComplete(uploads) {
                this.set('uploadedImageUrls', uploads.mapBy('url'));
                this.set('droppedFiles', null);
            },
            uploadCancelled: function uploadCancelled() {
                this.set('droppedFiles', null);
            }
        }
    });
});
define('ghost-admin/components/gh-error-message', ['exports', 'ember-component', 'ember-computed', 'ember-utils'], function (exports, _emberComponent, _emberComputed, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'p',
        classNames: ['response'],

        errors: null,
        property: '',

        isVisible: (0, _emberComputed.notEmpty)('errors'),

        message: (0, _emberComputed.default)('errors.[]', 'property', function () {
            var property = this.get('property');
            var errors = this.get('errors');
            var messages = [];
            var index = void 0;

            if (!(0, _emberUtils.isEmpty)(errors) && errors.get(property)) {
                errors.get(property).forEach(function (error) {
                    messages.push(error);
                });
                index = Math.floor(Math.random() * messages.length);
                return messages[index].message;
            }
        })
    });
});
define('ghost-admin/components/gh-feature-flag', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var FeatureFlagComponent = _emberComponent.default.extend({
        tagName: 'label',
        classNames: 'checkbox',
        attributeBindings: ['for'],
        _flagValue: null,

        feature: (0, _inject.default)(),

        init: function init() {
            this._super.apply(this, arguments);

            this.set('_flagValue', this.get('feature.' + this.get('flag')));
        },


        value: (0, _emberComputed.default)('_flagValue', {
            get: function get() {
                return this.get('_flagValue');
            },
            set: function set(key, value) {
                return this.set('feature.' + this.get('flag'), value);
            }
        }),

        for: (0, _emberComputed.default)('flag', function () {
            return 'labs-' + this.get('flag');
        }),

        name: (0, _emberComputed.default)('flag', function () {
            return 'labs[' + this.get('flag') + ']';
        })
    });

    FeatureFlagComponent.reopenClass({
        positionalParams: ['flag']
    });

    exports.default = FeatureFlagComponent;
});
define('ghost-admin/components/gh-file-input', ['exports', 'ember', 'emberx-file-input/components/x-file-input'], function (exports, _ember, _xFileInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;
    exports.default = _xFileInput.default.extend({
        change: function change(e) {
            var files = testing ? (e.originalEvent || e).testingFiles : e.target.files;
            this.sendAction('action', files);
        }
    });
});
define('ghost-admin/components/gh-file-upload', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        _file: null,

        acceptEncoding: null,
        uploadButtonText: 'Text',
        uploadButtonDisabled: true,

        onUpload: null,
        onAdd: null,

        shouldResetForm: true,

        change: function change(event) {
            this.set('uploadButtonDisabled', false);
            this.sendAction('onAdd');
            this._file = event.target.files[0];
        },


        actions: {
            upload: function upload() {
                if (!this.get('uploadButtonDisabled') && this._file) {
                    this.sendAction('onUpload', this._file);
                }

                // Prevent double post by disabling the button.
                this.set('uploadButtonDisabled', true);

                // Reset form
                if (this.get('shouldResetForm')) {
                    this.$().closest('form')[0].reset();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-file-uploader', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ghost-admin/services/ajax', 'ember-string', 'ember-invoke-action', 'ember-utils', 'ember-array/utils'], function (exports, _emberComponent, _emberComputed, _inject, _emberRunloop, _ajax, _emberString, _emberInvokeAction, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _emberComponent.default.extend({
        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        labelText: 'Select or drag-and-drop a file',
        url: null,
        paramName: 'file',
        accept: ['text/csv'],
        extensions: ['csv'],
        validate: null,

        file: null,
        response: null,

        dragClass: null,
        failureMessage: null,
        uploadPercentage: 0,

        ajax: (0, _inject.default)(),
        eventBus: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        formData: (0, _emberComputed.default)('file', function () {
            var paramName = this.get('paramName');
            var file = this.get('file');
            var formData = new FormData();

            formData.append(paramName, file);

            return formData;
        }),

        progressStyle: (0, _emberComputed.default)('uploadPercentage', function () {
            var percentage = this.get('uploadPercentage');
            var width = '';

            if (percentage > 0) {
                width = percentage + '%';
            } else {
                width = '0';
            }

            return (0, _emberString.htmlSafe)('width: ' + width);
        }),

        // we can optionally listen to a named event bus channel so that the upload
        // process can be triggered externally
        init: function init() {
            this._super.apply(this, arguments);
            var listenTo = this.get('listenTo');

            if (listenTo) {
                this.get('eventBus').subscribe(listenTo + ':upload', this, function (file) {
                    if (file) {
                        this.set('file', file);
                    }
                    this.send('upload');
                });
            }
        },
        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);
            var accept = this.get('accept');
            var extensions = this.get('extensions');

            this._accept = !(0, _emberUtils.isBlank)(accept) && !(0, _utils.isEmberArray)(accept) ? accept.split(',') : accept;
            this._extensions = !(0, _emberUtils.isBlank)(extensions) && !(0, _utils.isEmberArray)(extensions) ? extensions.split(',') : extensions;
        },
        willDestroyElement: function willDestroyElement() {
            var listenTo = this.get('listenTo');

            this._super.apply(this, arguments);

            if (listenTo) {
                this.get('eventBus').unsubscribe(listenTo + ':upload');
            }
        },
        dragOver: function dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            var eA = event.dataTransfer.effectAllowed;
            event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';

            event.stopPropagation();
            event.preventDefault();

            this.set('dragClass', '-drag-over');
        },
        dragLeave: function dragLeave(event) {
            event.preventDefault();
            this.set('dragClass', null);
        },
        drop: function drop(event) {
            event.preventDefault();
            this.set('dragClass', null);
            if (event.dataTransfer.files) {
                this.send('fileSelected', event.dataTransfer.files);
            }
        },
        generateRequest: function generateRequest() {
            var _this = this;

            var ajax = this.get('ajax');
            var formData = this.get('formData');
            var url = this.get('url');

            (0, _emberInvokeAction.invokeAction)(this, 'uploadStarted');

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: function xhr() {
                    var xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', function (event) {
                        _this._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(function (response) {
                _this._uploadSuccess(JSON.parse(response));
            }).catch(function (error) {
                _this._uploadFailed(error);
            }).finally(function () {
                (0, _emberInvokeAction.invokeAction)(_this, 'uploadFinished');
            });
        },
        _uploadProgress: function _uploadProgress(event) {
            var _this2 = this;

            if (event.lengthComputable) {
                (0, _emberRunloop.default)(function () {
                    var percentage = Math.round(event.loaded / event.total * 100);
                    _this2.set('uploadPercentage', percentage);
                });
            }
        },
        _uploadSuccess: function _uploadSuccess(response) {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadSuccess', response);
            this.send('reset');
        },
        _uploadFailed: function _uploadFailed(error) {
            var message = void 0;

            if ((0, _ajax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
                message = 'The file type you uploaded is not supported.';
            } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
                message = 'The file you uploaded was larger than the maximum file size your server allows.';
            } else if (error.errors && !(0, _emberUtils.isBlank)(error.errors[0].message)) {
                message = (0, _emberString.htmlSafe)(error.errors[0].message);
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFailed', error);
        },
        _validate: function _validate(file) {
            if (this.get('validate')) {
                return (0, _emberInvokeAction.invokeAction)(this, 'validate', file);
            } else {
                return this._defaultValidator(file);
            }
        },
        _defaultValidator: function _defaultValidator(file) {
            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2),
                extension = _$exec2[1];

            var extensions = this._extensions;

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ajax.UnsupportedMediaTypeError();
            }

            return true;
        },


        actions: {
            fileSelected: function fileSelected(fileList) {
                // can't use array destructuring here as FileList is not a strict
                // array and fails in Safari
                // eslint-disable-next-line ember-suave/prefer-destructuring
                var file = fileList[0];
                var validationResult = this._validate(file);

                this.set('file', file);
                (0, _emberInvokeAction.invokeAction)(this, 'fileSelected', file);

                if (validationResult === true) {
                    _emberRunloop.default.schedule('actions', this, function () {
                        this.generateRequest();
                    });
                } else {
                    this._uploadFailed(validationResult);
                }
            },
            upload: function upload() {
                if (this.get('file')) {
                    this.generateRequest();
                }
            },
            reset: function reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
                this.set('failureMessage', null);
            }
        }
    });
});
define('ghost-admin/components/gh-form-group', ['exports', 'ghost-admin/components/gh-validation-status-container'], function (exports, _ghValidationStatusContainer) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _ghValidationStatusContainer.default.extend({
        classNames: 'form-group'
    });
});
define('ghost-admin/components/gh-fullscreen-modal', ['exports', 'ember-component', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ember-array/utils', 'ember-invoke-action', 'ember-utils'], function (exports, _emberComponent, _rsvp, _emberComputed, _inject, _emberRunloop, _utils, _emberInvokeAction, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var FullScreenModalComponent = _emberComponent.default.extend({

        model: null,
        modifier: null,

        dropdown: (0, _inject.default)(),

        modalPath: (0, _emberComputed.default)('modal', function () {
            return 'modals/' + (this.get('modal') || 'unknown');
        }),

        modalClasses: (0, _emberComputed.default)('modifiers', function () {
            var modalClass = 'fullscreen-modal';
            var modifiers = (this.get('modifier') || '').split(' ');
            var modalClasses = (0, _utils.A)([modalClass]);

            modifiers.forEach(function (modifier) {
                if (!(0, _emberUtils.isBlank)(modifier)) {
                    var className = modalClass + '-' + modifier;
                    modalClasses.push(className);
                }
            });

            return modalClasses.join(' ');
        }),

        didInsertElement: function didInsertElement() {
            _emberRunloop.default.schedule('afterRender', this, function () {
                this.get('dropdown').closeDropdowns();
            });
        },


        actions: {
            close: function close() {
                // Because we return the promise from invokeAction, we have
                // to check if "close" exists first
                if (this.get('close')) {
                    return (0, _emberInvokeAction.invokeAction)(this, 'close');
                }

                return _rsvp.default.resolve();
            },
            confirm: function confirm() {
                if (this.get('confirm')) {
                    return (0, _emberInvokeAction.invokeAction)(this, 'confirm');
                }

                return _rsvp.default.resolve();
            },
            clickOverlay: function clickOverlay() {
                this.send('close');
            }
        }
    });

    FullScreenModalComponent.reopenClass({
        positionalParams: ['modal']
    });

    exports.default = FullScreenModalComponent;
});
define('ghost-admin/components/gh-image-uploader-with-preview', ['exports', 'ember-component', 'ember-invoke-action'], function (exports, _emberComponent, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        actions: {
            update: function update() {
                if (typeof this.attrs.update === 'function') {
                    var _attrs;

                    (_attrs = this.attrs).update.apply(_attrs, arguments);
                }
            },
            uploadStarted: function uploadStarted() {
                if (typeof this.attrs.uploadStarted === 'function') {
                    var _attrs2;

                    (_attrs2 = this.attrs).uploadStarted.apply(_attrs2, arguments);
                }
            },
            uploadFinished: function uploadFinished() {
                if (typeof this.attrs.uploadFinished === 'function') {
                    var _attrs3;

                    (_attrs3 = this.attrs).uploadFinished.apply(_attrs3, arguments);
                }
            },
            remove: function remove() {
                (0, _emberInvokeAction.invokeAction)(this, 'remove');
            }
        }
    });
});
define('ghost-admin/components/gh-image-uploader', ['exports', 'ember-component', 'ember-computed', 'ghost-admin/utils/ghost-paths', 'ember-service/inject', 'ember-runloop', 'ghost-admin/services/ajax', 'ember-string', 'ember-invoke-action', 'ember-utils', 'ember-array/utils'], function (exports, _emberComponent, _emberComputed, _ghostPaths, _inject, _emberRunloop, _ajax, _emberString, _emberInvokeAction, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.IMAGE_EXTENSIONS = exports.IMAGE_MIME_TYPES = undefined;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var IMAGE_MIME_TYPES = exports.IMAGE_MIME_TYPES = 'image/gif,image/jpg,image/jpeg,image/png,image/svg+xml';
    var IMAGE_EXTENSIONS = exports.IMAGE_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'svg'];

    exports.default = _emberComponent.default.extend({
        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        image: null,
        text: '',
        altText: '',
        saveButton: true,
        accept: null,
        extensions: null,
        uploadUrl: null,
        validate: null,

        dragClass: null,
        failureMessage: null,
        file: null,
        url: null,
        uploadPercentage: 0,

        ajax: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        _defaultAccept: IMAGE_MIME_TYPES,
        _defaultExtensions: IMAGE_EXTENSIONS,
        _defaultUploadUrl: '/uploads/',

        // TODO: this wouldn't be necessary if the server could accept direct
        // file uploads
        formData: (0, _emberComputed.default)('file', function () {
            var file = this.get('file');
            var formData = new FormData();

            formData.append('uploadimage', file);

            return formData;
        }),

        description: (0, _emberComputed.default)('text', 'altText', function () {
            var altText = this.get('altText');

            return this.get('text') || (altText ? 'Upload image of "' + altText + '"' : 'Upload an image');
        }),

        progressStyle: (0, _emberComputed.default)('uploadPercentage', function () {
            var percentage = this.get('uploadPercentage');
            var width = '';

            if (percentage > 0) {
                width = percentage + '%';
            } else {
                width = '0';
            }

            return (0, _emberString.htmlSafe)('width: ' + width);
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            var image = this.get('image');
            this.set('url', image);

            if (!this.get('accept')) {
                this.set('accept', this.get('_defaultAccept'));
            }
            if (!this.get('extensions')) {
                this.set('extensions', this.get('_defaultExtensions'));
            }
            if (!this.get('uploadUrl')) {
                this.set('uploadUrl', this.get('_defaultUploadUrl'));
            }
        },
        dragOver: function dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            var eA = event.dataTransfer.effectAllowed;
            event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';

            event.stopPropagation();
            event.preventDefault();

            this.set('dragClass', '-drag-over');
        },
        dragLeave: function dragLeave(event) {
            event.preventDefault();
            this.set('dragClass', null);
        },
        drop: function drop(event) {
            event.preventDefault();

            this.set('dragClass', null);

            if (event.dataTransfer.files) {
                this.send('fileSelected', event.dataTransfer.files);
            }
        },
        _uploadStarted: function _uploadStarted() {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadStarted');
        },
        _uploadProgress: function _uploadProgress(event) {
            var _this = this;

            if (event.lengthComputable) {
                (0, _emberRunloop.default)(function () {
                    var percentage = Math.round(event.loaded / event.total * 100);
                    _this.set('uploadPercentage', percentage);
                });
            }
        },
        _uploadFinished: function _uploadFinished() {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFinished');
        },
        _uploadSuccess: function _uploadSuccess(response) {
            this.set('url', response);
            this.send('saveUrl');
            this.send('reset');
            (0, _emberInvokeAction.invokeAction)(this, 'uploadSuccess', response);
        },
        _uploadFailed: function _uploadFailed(error) {
            var message = void 0;

            if ((0, _ajax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
                var validExtensions = this.get('extensions').join(', .').toUpperCase();
                validExtensions = '.' + validExtensions;

                message = 'The image type you uploaded is not supported. Please use ' + validExtensions;
            } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
                message = 'The image you uploaded was larger than the maximum file size your server allows.';
            } else if (error.errors && !(0, _emberUtils.isBlank)(error.errors[0].message)) {
                message = error.errors[0].message;
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFailed', error);
        },
        generateRequest: function generateRequest() {
            var _this2 = this;

            var ajax = this.get('ajax');
            var formData = this.get('formData');
            var uploadUrl = this.get('uploadUrl');
            // CASE: we want to upload an icon and we have to POST it to a different endpoint, expecially for icons
            var url = '' + (0, _ghostPaths.default)().apiRoot + uploadUrl;

            this._uploadStarted();

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: function xhr() {
                    var xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', function (event) {
                        _this2._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(function (response) {
                var url = JSON.parse(response);
                _this2._uploadSuccess(url);
            }).catch(function (error) {
                _this2._uploadFailed(error);
            }).finally(function () {
                _this2._uploadFinished();
            });
        },
        _validate: function _validate(file) {
            if (this.get('validate')) {
                return (0, _emberInvokeAction.invokeAction)(this, 'validate', file);
            } else {
                return this._defaultValidator(file);
            }
        },
        _defaultValidator: function _defaultValidator(file) {
            var extensions = this.get('extensions');

            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2),
                extension = _$exec2[1];

            if (!(0, _utils.isEmberArray)(extensions)) {
                extensions = extensions.split(',');
            }

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ajax.UnsupportedMediaTypeError();
            }

            return true;
        },


        actions: {
            fileSelected: function fileSelected(fileList) {
                // can't use array destructuring here as FileList is not a strict
                // array and fails in Safari
                // eslint-disable-next-line ember-suave/prefer-destructuring
                var file = fileList[0];
                var validationResult = this._validate(file);

                this.set('file', file);
                (0, _emberInvokeAction.invokeAction)(this, 'fileSelected', file);

                if (validationResult === true) {
                    _emberRunloop.default.schedule('actions', this, function () {
                        this.generateRequest();
                    });
                } else {
                    this._uploadFailed(validationResult);
                }
            },
            reset: function reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
            },
            saveUrl: function saveUrl() {
                var url = this.get('url');
                (0, _emberInvokeAction.invokeAction)(this, 'update', url);
            }
        }
    });
});
define('ghost-admin/components/gh-infinite-scroll', ['exports', 'ember-component', 'ghost-admin/mixins/infinite-scroll'], function (exports, _emberComponent, _infiniteScroll) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_infiniteScroll.default, {
        actions: {
            checkScroll: function checkScroll() {
                this._checkScroll();
            }
        }
    });
});
define('ghost-admin/components/gh-input', ['exports', 'ember-one-way-controls/components/one-way-input', 'ghost-admin/mixins/text-input'], function (exports, _oneWayInput, _textInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _oneWayInput.default.extend(_textInput.default, {
        classNames: 'gh-input'
    });
});
define('ghost-admin/components/gh-loading-spinner', ['exports', 'ember-component', 'ember-concurrency'], function (exports, _emberComponent, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: '',

        showSpinner: false,
        // ms until the loader is displayed,
        // prevents unnecessary flash of spinner
        slowLoadTimeout: 200,

        startSpinnerTimeout: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _emberConcurrency.timeout)(this.get('slowLoadTimeout'));

                        case 2:
                            this.set('showSpinner', true);

                        case 3:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })),

        didInsertElement: function didInsertElement() {
            this.get('startSpinnerTimeout').perform();
        }
    });
});
define('ghost-admin/components/gh-main', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'main',
        classNames: ['gh-main'],
        ariaRole: 'main',

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
define('ghost-admin/components/gh-markdown-editor', ['exports', 'ember-component', 'ghost-admin/mixins/shortcuts', 'ember-computed', 'ghost-admin/utils/ctrl-or-cmd', 'ghost-admin/utils/format-markdown', 'ember-runloop', 'ember-platform', 'ember-metal/utils', 'ember-utils'], function (exports, _emberComponent, _shortcuts, _emberComputed, _ctrlOrCmd, _formatMarkdown, _emberRunloop, _emberPlatform, _utils, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.BLANK_DOC = undefined;


    var MOBILEDOC_VERSION = '0.3.1';

    var BLANK_DOC = exports.BLANK_DOC = {
        version: MOBILEDOC_VERSION,
        markups: [],
        atoms: [],
        cards: [['card-markdown', {
            cardName: 'card-markdown',
            markdown: ''
        }]],
        sections: [[10, 0]]
    };

    exports.default = _emberComponent.default.extend(_shortcuts.default, {

        classNames: ['gh-markdown-editor'],
        classNameBindings: ['_isFullScreen:gh-markdown-editor-full-screen', '_isSplitScreen:gh-markdown-editor-side-by-side'],

        // Public attributes
        autofocus: false,
        imageMimeTypes: null,
        isFullScreen: false,
        mobiledoc: null,
        options: null,
        placeholder: '',
        uploadedImageUrls: null,

        // Closure actions
        onChange: function onChange() {},
        onFullScreenToggle: function onFullScreenToggle() {},
        onImageFilesSelected: function onImageFilesSelected() {},
        onPreviewToggle: function onPreviewToggle() {},
        onSplitScreenToggle: function onSplitScreenToggle() {},
        showMarkdownHelp: function showMarkdownHelp() {},


        // Internal attributes
        markdown: null,

        // Private
        _editor: null,
        _isFullScreen: false,
        _isSplitScreen: false,
        _isUploading: false,
        _statusbar: null,
        _toolbar: null,
        _uploadedImageUrls: null,

        simpleMDEOptions: (0, _emberComputed.default)('options', function () {
            var _this = this;

            var options = this.get('options') || {};
            var defaultOptions = {
                // use our Showdown config with sanitization for previews
                previewRender: function previewRender(markdown) {
                    return (0, _formatMarkdown.default)(markdown);
                },


                // Ghost-specific SimpleMDE toolbar config - allows us to create a
                // bridge between SimpleMDE buttons and Ember actions
                toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', {
                    name: 'image',
                    action: function action() {
                        _this._openImageFileDialog();
                    },
                    className: 'fa fa-picture-o',
                    title: 'Upload Image(s)'
                }, '|', {
                    name: 'preview',
                    action: function action() {
                        _this._togglePreview();
                    },
                    className: 'fa fa-eye no-disable',
                    title: 'Toggle Preview'
                }, {
                    name: 'side-by-side',
                    action: function action() {
                        _this.send('toggleSplitScreen');
                    },
                    className: 'fa fa-columns no-disable no-mobile',
                    title: 'Toggle Side-by-side Preview'
                }, '|', {
                    name: 'spellcheck',
                    action: function action() {
                        _this._toggleSpellcheck();
                    },
                    className: 'fa fa-check',
                    title: 'Toggle Spellcheck'
                }, {
                    name: 'guide',
                    action: function action() {
                        _this.showMarkdownHelp();
                    },
                    className: 'fa fa-question-circle',
                    title: 'Markdown Guide'
                }],

                // disable shortcuts for side-by-side and fullscreen because they
                // trigger interal SimpleMDE methods that will result in broken
                // layouts
                shortcuts: {
                    toggleFullScreen: null,
                    togglePreview: null,
                    toggleSideBySide: null,
                    drawImage: null
                },

                // only include the number of words in the status bar
                status: ['words']
            };

            return (0, _emberPlatform.assign)(defaultOptions, options);
        }),

        shortcuts: {},

        init: function init() {
            this._super.apply(this, arguments);
            var shortcuts = this.get('shortcuts');

            shortcuts[_ctrlOrCmd.default + '+shift+i'] = { action: 'insertImage' };
        },


        // extract markdown content from single markdown card
        didReceiveAttrs: function didReceiveAttrs() {
            var _this2 = this;

            this._super.apply(this, arguments);
            var mobiledoc = this.get('mobiledoc') || (0, _utils.copy)(BLANK_DOC, true);

            var uploadedImageUrls = this.get('uploadedImageUrls');
            if (!(0, _emberUtils.isEmpty)(uploadedImageUrls) && uploadedImageUrls !== this._uploadedImageUrls) {
                this._uploadedImageUrls = uploadedImageUrls;

                // must be done afterRender to avoid double modify of mobiledoc in
                // a single render
                _emberRunloop.default.scheduleOnce('afterRender', this, function () {
                    _this2._insertImages(uploadedImageUrls);
                    // reset the file input so the same file can be selected again
                    _this2.$('input[type=file]').val('');
                });
            }

            // eslint-disable-next-line ember-suave/prefer-destructuring
            var markdown = mobiledoc.cards[0][1].markdown;
            this.set('markdown', markdown);

            // use internal values to avoid updating bound values
            if (!(0, _emberUtils.isEmpty)(this.get('isFullScreen'))) {
                this.set('_isFullScreen', this.get('isFullScreen'));
            }
            if (!(0, _emberUtils.isEmpty)(this.get('isSplitScreen'))) {
                this.set('_isSplitScreen', this.get('isSplitScreen'));
            }

            this._updateButtonState();
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.registerShortcuts();
        },
        _insertImages: function _insertImages(urls) {
            var cm = this._editor.codemirror;

            // loop through urls and generate image markdown
            var images = urls.map(function (url) {
                var filename = url.split('/').pop();
                var alt = filename;

                // if we have a normal filename.ext, set alt to filename -ext
                if (filename.lastIndexOf('.') > 0) {
                    alt = filename.slice(0, filename.lastIndexOf('.'));
                }

                return '![' + alt + '](' + url + ')';
            });
            var text = images.join('\n');

            // clicking the image toolbar button will lose the selection so we use
            // the captured selection to re-select here
            if (this._imageInsertSelection) {
                // we want to focus but not re-position
                this.send('focusEditor', null);

                // re-select and clear the captured selection so drag/drop still
                // inserts at the correct place
                cm.setSelection(this._imageInsertSelection.anchor, this._imageInsertSelection.head);
                this._imageInsertSelection = null;
            }

            // focus editor and place cursor at end if not already focused
            if (!cm.hasFocus()) {
                this.send('focusEditor');
                text = '\n\n' + text;
            }

            // insert at cursor or replace selection then position cursor at end
            // of inserted text
            cm.replaceSelection(text, 'end');
        },


        // mark the split-pane/full-screen/spellcheck buttons active when they're active
        _updateButtonState: function _updateButtonState() {
            if (this._editor) {
                var sideBySideButton = this._editor.toolbarElements['side-by-side'];
                var spellcheckButton = this._editor.toolbarElements.spellcheck;

                if (sideBySideButton) {
                    if (this.get('_isSplitScreen')) {
                        sideBySideButton.classList.add('active');
                    } else {
                        sideBySideButton.classList.remove('active');
                    }
                }

                if (spellcheckButton) {
                    if (this._editor.codemirror.getOption('mode') === 'spell-checker') {
                        spellcheckButton.classList.add('active');
                    } else {
                        spellcheckButton.classList.remove('active');
                    }
                }
            }
        },


        // set up the preview auto-update and scroll sync
        _connectSplitPreview: function _connectSplitPreview() {
            var cm = this._editor.codemirror;
            var editor = this._editor;
            /* eslint-disable ember-suave/prefer-destructuring */
            var editorPane = this.$('.gh-markdown-editor-pane')[0];
            var previewPane = this.$('.gh-markdown-editor-preview')[0];
            var previewContent = this.$('.gh-markdown-editor-preview-content')[0];
            /* eslint-enable ember-suave/prefer-destructuring */

            this._editorPane = editorPane;
            this._previewPane = previewPane;
            this._previewContent = previewContent;

            // from SimpleMDE -------
            var sideBySideRenderingFunction = function sideBySideRenderingFunction() {
                previewContent.innerHTML = editor.options.previewRender(editor.value(), previewContent);
            };

            cm.sideBySideRenderingFunction = sideBySideRenderingFunction;

            sideBySideRenderingFunction();
            cm.on('update', cm.sideBySideRenderingFunction);

            // Refresh to fix selection being off (#309)
            cm.refresh();
            // ----------------------

            this._onEditorPaneScroll = this._scrollHandler.bind(this);
            editorPane.addEventListener('scroll', this._onEditorPaneScroll, false);
            this._scrollSync();
        },
        _scrollHandler: function _scrollHandler() {
            if (!this._scrollSyncTicking) {
                requestAnimationFrame(this._scrollSync.bind(this));
            }
            this._scrollSyncTicking = true;
        },
        _scrollSync: function _scrollSync() {
            var editorPane = this._editorPane;
            var previewPane = this._previewPane;
            var height = editorPane.scrollHeight - editorPane.clientHeight;
            var ratio = parseFloat(editorPane.scrollTop) / height;
            var move = (previewPane.scrollHeight - previewPane.clientHeight) * ratio;

            previewPane.scrollTop = move;
            this._scrollSyncTicking = false;
        },
        _disconnectSplitPreview: function _disconnectSplitPreview() {
            var cm = this._editor.codemirror;

            cm.off('update', cm.sideBySideRenderingFunction);
            cm.refresh();

            this._editorPane.removeEventListener('scroll', this._onEditorPaneScroll, false);
            delete this._previewPane;
            delete this._previewPaneContent;
            delete this._onEditorPaneScroll;
        },
        _openImageFileDialog: function _openImageFileDialog() {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref$captureSelection = _ref.captureSelection,
                captureSelection = _ref$captureSelection === undefined ? true : _ref$captureSelection;

            if (captureSelection) {
                // capture the current selection before it's lost by clicking the
                // file input button
                this._imageInsertSelection = {
                    anchor: this._editor.codemirror.getCursor('anchor'),
                    head: this._editor.codemirror.getCursor('head')
                };
            }

            // trigger the dialog via gh-file-input, when a file is selected it will
            // trigger the onImageFilesSelected closure action
            this.$('input[type="file"]').click();
        },


        // wrap SimpleMDE's built-in preview toggle so that we can trigger a closure
        // action that can apply our own classes higher up in the DOM
        _togglePreview: function _togglePreview() {
            this.onPreviewToggle(!this._editor.isPreviewActive());
            this._editor.togglePreview();
        },
        _toggleSpellcheck: function _toggleSpellcheck() {
            var cm = this._editor.codemirror;

            if (cm.getOption('mode') === 'spell-checker') {
                cm.setOption('mode', 'gfm');
            } else {
                cm.setOption('mode', 'spell-checker');
            }

            this._updateButtonState();
        },
        willDestroyElement: function willDestroyElement() {
            if (this.get('_isSplitScreen')) {
                this._disconnectSplitPreview();
            }

            this.removeShortcuts();

            this._super.apply(this, arguments);
        },


        actions: {
            // put the markdown into a new mobiledoc card, trigger external update
            updateMarkdown: function updateMarkdown(markdown) {
                var mobiledoc = (0, _utils.copy)(BLANK_DOC, true);
                mobiledoc.cards[0][1].markdown = markdown;
                this.onChange(mobiledoc);
            },


            // store a reference to the simplemde editor so that we can handle
            // focusing and image uploads
            setEditor: function setEditor(editor) {
                this._editor = editor;

                // disable CodeMirror's drag/drop handling as we want to handle that
                // in the parent gh-editor component
                this._editor.codemirror.setOption('dragDrop', false);

                // default to spellchecker being off
                this._editor.codemirror.setOption('mode', 'gfm');

                // HACK: move the toolbar & status bar elements outside of the
                // editor container so that they can be aligned in fixed positions
                var container = this.$().closest('.gh-editor').find('.gh-editor-footer');
                this._toolbar = this.$('.editor-toolbar');
                this._statusbar = this.$('.editor-statusbar');
                this._toolbar.appendTo(container);
                this._statusbar.appendTo(container);

                this._updateButtonState();
            },


            // used by the title input when the TAB or ENTER keys are pressed
            focusEditor: function focusEditor() {
                var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bottom';

                this._editor.codemirror.focus();

                if (position === 'bottom') {
                    this._editor.codemirror.execCommand('goDocEnd');
                } else if (position === 'top') {
                    this._editor.codemirror.execCommand('goDocStart');
                }

                return false;
            },
            insertImage: function insertImage() {
                var captureSelection = this._editor.codemirror.hasFocus();
                this._openImageFileDialog({ captureSelection: captureSelection });
            },
            toggleFullScreen: function toggleFullScreen() {
                var isFullScreen = !this.get('_isFullScreen');

                this.set('_isFullScreen', isFullScreen);
                this._updateButtonState();
                this.onFullScreenToggle(isFullScreen);

                // leave split screen when exiting full screen mode
                if (!isFullScreen && this.get('_isSplitScreen')) {
                    this.send('toggleSplitScreen');
                }
            },
            toggleSplitScreen: function toggleSplitScreen() {
                var isSplitScreen = !this.get('_isSplitScreen');
                var previewButton = this._editor.toolbarElements.preview;

                this.set('_isSplitScreen', isSplitScreen);
                this._updateButtonState();

                // set up the preview rendering and scroll sync
                // afterRender is needed so that necessary components have been
                // added/removed and editor pane length has settled
                if (isSplitScreen) {
                    // disable the normal SimpleMDE preview if it's active
                    if (this._editor.isPreviewActive()) {
                        var preview = this._editor.toolbar.find(function (button) {
                            return button.name === 'preview';
                        });

                        preview.action(this._editor);
                    }

                    if (previewButton) {
                        previewButton.classList.add('disabled');
                    }

                    _emberRunloop.default.scheduleOnce('afterRender', this, this._connectSplitPreview);
                } else {
                    if (previewButton) {
                        previewButton.classList.remove('disabled');
                    }

                    _emberRunloop.default.scheduleOnce('afterRender', this, this._disconnectSplitPreview);
                }

                this.onSplitScreenToggle(isSplitScreen);

                // go fullscreen when entering split screen mode
                this.send('toggleFullScreen');
            },


            // put the toolbar/statusbar elements back so that SimpleMDE doesn't throw
            // errors when it tries to remove them
            destroyEditor: function destroyEditor() {
                var container = this.$('.gh-markdown-editor-pane');
                this._toolbar.appendTo(container);
                this._statusbar.appendTo(container);
                this._editor = null;
            }
        }
    });
});
define('ghost-admin/components/gh-menu-toggle', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: ['gh-menu-toggle'],

        mediaQueries: (0, _inject.default)(),
        isMobile: (0, _emberComputed.reads)('mediaQueries.isMobile'),
        maximise: false,

        iconClass: (0, _emberComputed.default)('maximise', 'isMobile', function () {
            if (this.get('maximise') && !this.get('isMobile')) {
                return 'icon-maximise';
            } else {
                return 'icon-minimise';
            }
        }),

        click: function click() {
            if (this.get('isMobile')) {
                this.sendAction('mobileAction');
            } else {
                this.toggleProperty('maximise');
                this.sendAction('desktopAction');
            }
        }
    });
});
define('ghost-admin/components/gh-mobile-nav-bar', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'nav',
        classNames: ['gh-mobile-nav-bar'],

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.sendAction('openMobileMenu');
            }
        }
    });
});
define('ghost-admin/components/gh-nav-menu', ['exports', 'ember-component', 'ember-basic-dropdown/utils/calculate-position', 'ember-computed', 'ember-service/inject', 'ember-string'], function (exports, _emberComponent, _calculatePosition2, _emberComputed, _inject, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        config: (0, _inject.default)(),
        session: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        feature: (0, _inject.default)(),
        routing: (0, _inject.default)('-routing'),

        tagName: 'nav',
        classNames: ['gh-nav'],
        classNameBindings: ['open'],

        open: false,
        iconStyle: '',

        // the menu has a rendering issue (#8307) when the the world is reloaded
        // during an import which we have worked around by not binding the icon
        // style directly. However we still need to keep track of changing icons
        // so that we can refresh when a new icon is uploaded
        didReceiveAttrs: function didReceiveAttrs() {
            this._setIconStyle();
        },
        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        },


        showMenuExtension: (0, _emberComputed.default)('config.clientExtensions.menu', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.menu') && this.get('session.user.isOwner');
        }),

        showDropdownExtension: (0, _emberComputed.default)('config.clientExtensions.dropdown', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.dropdown') && this.get('session.user.isOwner');
        }),

        showScriptExtension: (0, _emberComputed.default)('config.clientExtensions.script', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.script') && this.get('session.user.isOwner');
        }),

        // equivalent to "left: auto; right: -20px"
        userDropdownPosition: function userDropdownPosition(trigger, dropdown) {
            var _calculatePosition = _calculatePosition2.default.apply(undefined, arguments),
                horizontalPosition = _calculatePosition.horizontalPosition,
                verticalPosition = _calculatePosition.verticalPosition,
                style = _calculatePosition.style;

            var _dropdown$firstElemen = dropdown.firstElementChild.getBoundingClientRect(),
                dropdownWidth = _dropdown$firstElemen.width;

            style.right += dropdownWidth - 20;
            style['z-index'] = 1100;

            return { horizontalPosition: horizontalPosition, verticalPosition: verticalPosition, style: style };
        },
        _setIconStyle: function _setIconStyle() {
            var icon = this.get('icon');

            if (icon === this._icon) {
                return;
            }

            var subdirRegExp = new RegExp('^' + this.get('ghostPaths.subdir'));
            var blogIcon = icon ? icon : 'favicon.ico';
            var iconUrl = void 0;

            blogIcon = blogIcon.replace(subdirRegExp, '');

            iconUrl = this.get('ghostPaths.url').join(this.get('config.blogUrl'), blogIcon).replace(/\/$/, '');
            iconUrl += '?t=' + new Date().valueOf();

            this.set('iconStyle', (0, _emberString.htmlSafe)('background-image: url(' + iconUrl + ')'));
            this._icon = icon;
        },


        actions: {
            toggleAutoNav: function toggleAutoNav() {
                this.sendAction('toggleMaximise');
            },
            showMarkdownHelp: function showMarkdownHelp() {
                this.sendAction('showMarkdownHelp');
            },
            closeMobileMenu: function closeMobileMenu() {
                this.sendAction('closeMobileMenu');
            },
            openAutoNav: function openAutoNav() {
                this.sendAction('openAutoNav');
            }
        }
    });
});
define('ghost-admin/components/gh-navigation', ['exports', 'ember-component', 'ember-runloop'], function (exports, _emberComponent, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'section',
        classNames: 'gh-view',

        didInsertElement: function didInsertElement() {
            var navContainer = this.$('.js-gh-blognav');
            var navElements = '.gh-blognav-item:not(.gh-blognav-item:last-child)';
            // needed because jqueryui sortable doesn't trigger babel's autoscoping
            var _this = this;

            this._super.apply(this, arguments);

            navContainer.sortable({
                handle: '.gh-blognav-grab',
                items: navElements,

                start: function start(event, ui) {
                    (0, _emberRunloop.default)(function () {
                        ui.item.data('start-index', ui.item.index());
                    });
                },
                update: function update(event, ui) {
                    (0, _emberRunloop.default)(function () {
                        _this.sendAction('moveItem', ui.item.data('start-index'), ui.item.index());
                    });
                }
            });
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$('.ui-sortable').sortable('destroy');
        }
    });
});
define('ghost-admin/components/gh-navitem-url-input', ['exports', 'ember-components/text-field', 'ember-computed', 'ember-runloop', 'ember-invoke-action'], function (exports, _textField, _emberComputed, _emberRunloop, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var joinUrlParts = function joinUrlParts(url, path) {
        if (path[0] !== '/' && url.slice(-1) !== '/') {
            path = '/' + path;
        } else if (path[0] === '/' && url.slice(-1) === '/') {
            path = path.slice(1);
        }

        return url + path;
    };

    var isRelative = function isRelative(url) {
        // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
        // should all be treated as absolute
        return !url.match(/\s/) && !validator.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9\-]+:)/);
    };

    exports.default = _textField.default.extend(_emberInvokeAction.InvokeActionMixin, {
        classNames: 'gh-input',

        isBaseUrl: (0, _emberComputed.default)('baseUrl', 'value', function () {
            return this.get('baseUrl') === this.get('value');
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            var baseUrl = this.get('baseUrl');
            var url = this.get('url');

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
            }

            this.set('value', url);
        },
        focusIn: function focusIn(event) {
            this.set('hasFocus', true);

            if (this.get('isBaseUrl')) {
                // position the cursor at the end of the input
                _emberRunloop.default.next(function (el) {
                    var length = el.value.length;


                    el.setSelectionRange(length, length);
                }, event.target);
            }
        },
        keyDown: function keyDown(event) {
            // delete the "placeholder" value all at once
            if (this.get('isBaseUrl') && (event.keyCode === 8 || event.keyCode === 46)) {
                this.set('value', '');

                event.preventDefault();
            }

            // CMD-S
            if (event.keyCode === 83 && event.metaKey) {
                this.notifyUrlChanged();
            }
        },
        keyPress: function keyPress(event) {
            this.invokeAction('clearErrors');

            // enter key
            if (event.keyCode === 13) {
                this.notifyUrlChanged();
            }

            return true;
        },
        focusOut: function focusOut() {
            this.set('hasFocus', false);

            this.notifyUrlChanged();
        },
        notifyUrlChanged: function notifyUrlChanged() {
            var url = this.get('value').trim();
            var urlParts = document.createElement('a');
            var baseUrl = this.get('baseUrl');
            var baseUrlParts = document.createElement('a');

            // ensure value property is trimmed
            this.set('value', url);

            // leverage the browser's native URI parsing
            urlParts.href = url;
            baseUrlParts.href = baseUrl;

            // if we have an email address, add the mailto:
            if (validator.isEmail(url)) {
                url = 'mailto:' + url;
                this.set('value', url);
            }

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
                this.set('value', url);
            }

            // get our baseUrl relativity checks in order
            var isOnSameHost = urlParts.host === baseUrlParts.host;
            var isAnchorLink = url.match(/^#/);
            var isRelativeToBasePath = urlParts.pathname.indexOf(baseUrlParts.pathname) === 0;

            // if our pathname is only missing a trailing / mark it as relative
            if (urlParts.pathname + '/' === baseUrlParts.pathname) {
                isRelativeToBasePath = true;
            }

            // if relative to baseUrl, remove the base url before sending to action
            if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
                url = url.replace(/^[a-zA-Z0-9\-]+:/, '');
                url = url.replace(/^\/\//, '');
                url = url.replace(baseUrlParts.host, '');
                url = url.replace(baseUrlParts.pathname, '');

                // handle case where url path is same as baseUrl path but missing trailing slash
                if (urlParts.pathname.slice(-1) !== '/') {
                    url = url.replace(baseUrlParts.pathname.slice(0, -1), '');
                }

                if (url !== '' || !this.get('isNew')) {
                    if (!url.match(/^\//)) {
                        url = '/' + url;
                    }

                    if (!url.match(/\/$/) && !url.match(/[\.#\?]/)) {
                        url = url + '/';
                    }
                }
            }

            this.sendAction('change', url);
        }
    });
});
define('ghost-admin/components/gh-navitem', ['exports', 'ember-component', 'ember-sortable/mixins/sortable-item', 'ghost-admin/mixins/validation-state', 'ember-computed', 'ember-runloop'], function (exports, _emberComponent, _sortableItem, _validationState, _emberComputed, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_validationState.default, _sortableItem.default, {
        classNames: 'gh-blognav-item',
        classNameBindings: ['errorClass', 'navItem.isNew::gh-blognav-item--sortable'],

        new: false,
        handle: '.gh-blognav-grab',

        model: (0, _emberComputed.alias)('navItem'),
        errors: (0, _emberComputed.readOnly)('navItem.errors'),

        errorClass: (0, _emberComputed.default)('hasError', function () {
            if (this.get('hasError')) {
                return 'gh-blognav-item--error';
            }
        }),

        keyPress: function keyPress(event) {
            // enter key
            if (event.keyCode === 13 && this.get('navItem.isNew')) {
                event.preventDefault();
                _emberRunloop.default.scheduleOnce('actions', this, function () {
                    this.send('addItem');
                });
            }
        },


        actions: {
            addItem: function addItem() {
                this.sendAction('addItem');
            },
            deleteItem: function deleteItem(item) {
                this.sendAction('deleteItem', item);
            },
            updateUrl: function updateUrl(value) {
                this.sendAction('updateUrl', value, this.get('navItem'));
            },
            clearLabelErrors: function clearLabelErrors() {
                this.get('navItem.errors').remove('label');
            },
            clearUrlErrors: function clearUrlErrors() {
                this.get('navItem.errors').remove('url');
            }
        }
    });
});
define('ghost-admin/components/gh-notification', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'article',
        classNames: ['gh-notification', 'gh-notification-passive'],
        classNameBindings: ['typeClass'],

        message: null,

        notifications: (0, _inject.default)(),

        typeClass: (0, _emberComputed.default)('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = void 0;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-notification-' + typeMapping[type];
            }

            return classes;
        }),

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    _this.get('notifications').closeNotification(_this.get('message'));
                }
            });
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$().off('animationend webkitAnimationEnd oanimationend MSAnimationEnd');
        },


        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-notifications', ['exports', 'ember-component', 'ember-service/inject', 'ember-computed'], function (exports, _emberComponent, _inject, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'aside',
        classNames: 'gh-notifications',

        notifications: (0, _inject.default)(),

        messages: (0, _emberComputed.alias)('notifications.notifications')
    });
});
define('ghost-admin/components/gh-post-settings-menu', ['exports', 'ember-component', 'ember', 'ghost-admin/mixins/settings-menu-component', 'ghost-admin/utils/bound-one-way', 'ember-computed', 'ghost-admin/utils/format-markdown', 'ember-service/inject', 'moment', 'ember-runloop', 'ember-metal/utils', 'ember-string', 'ember-invoke-action', 'ember-concurrency'], function (exports, _emberComponent, _ember, _settingsMenuComponent, _boundOneWay, _emberComputed, _formatMarkdown, _inject, _moment, _emberRunloop, _utils, _emberString, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Handlebars = _ember.default.Handlebars;


    var PSM_ANIMATION_LENGTH = 400;

    exports.default = _emberComponent.default.extend(_settingsMenuComponent.default, {
        selectedAuthor: null,
        authors: [],

        store: (0, _inject.default)(),
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        slugGenerator: (0, _inject.default)(),
        session: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        model: null,
        slugValue: (0, _boundOneWay.default)('model.slug'),
        metaTitleScratch: (0, _emberComputed.alias)('model.metaTitleScratch'),
        metaDescriptionScratch: (0, _emberComputed.alias)('model.metaDescriptionScratch'),

        _showSettingsMenu: false,
        _showThrobbers: false,

        didReceiveAttrs: function didReceiveAttrs() {
            var _this = this;

            this._super.apply(this, arguments);

            this.get('store').query('user', { limit: 'all' }).then(function (users) {
                if (!_this.get('isDestroyed')) {
                    _this.set('authors', users.sortBy('name'));
                }
            });

            this.get('model.author').then(function (author) {
                _this.set('selectedAuthor', author);
            });

            // HACK: ugly method of working around the CSS animations so that we
            // can add throbbers only when the animation has finished
            // TODO: use liquid-fire to handle PSM slide-in and replace tabs manager
            // with something more ember-like
            if (this.get('showSettingsMenu') && !this._showSettingsMenu) {
                this.get('showThrobbers').perform();
            }

            // fired when menu is closed
            if (!this.get('showSettingsMenu') && this._showSettingsMenu) {
                var post = this.get('model');
                var errors = post.get('errors');

                // reset the publish date if it has an error
                if (errors.has('publishedAtBlogDate') || errors.has('publishedAtBlogTime')) {
                    post.set('publishedAtBlogTZ', post.get('publishedAtUTC'));
                    post.validate({ attribute: 'publishedAtBlog' });
                }

                // remove throbbers
                this.set('_showThrobbers', false);
            }

            this._showSettingsMenu = this.get('showSettingsMenu');
        },


        showThrobbers: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _emberConcurrency.timeout)(PSM_ANIMATION_LENGTH);

                        case 2:
                            this.set('_showThrobbers', true);

                        case 3:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).restartable(),

        seoTitle: (0, _emberComputed.default)('model.titleScratch', 'metaTitleScratch', function () {
            var metaTitle = this.get('metaTitleScratch') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('model.titleScratch');

            if (metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = (0, _emberString.htmlSafe)(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoDescription: (0, _emberComputed.default)('model.scratch', 'metaDescriptionScratch', function () {
            var metaDescription = this.get('metaDescriptionScratch') || '';
            var mobiledoc = this.get('model.scratch');
            var markdown = mobiledoc.cards && mobiledoc.cards[0][1].markdown;
            var placeholder = void 0;

            if (metaDescription.length > 0) {
                placeholder = metaDescription;
            } else {
                var div = document.createElement('div');
                div.innerHTML = (0, _formatMarkdown.default)(markdown, false);

                // Strip HTML
                placeholder = div.textContent;
                // Replace new lines and trim
                placeholder = placeholder.replace(/\n+/g, ' ').trim();
            }

            if (placeholder.length > 156) {
                // Limit to 156 characters
                placeholder = placeholder.substring(0, 156).trim();
                placeholder = Handlebars.Utils.escapeExpression(placeholder);
                placeholder = (0, _emberString.htmlSafe)(placeholder + '&hellip;');
            }

            return placeholder;
        }),

        seoURL: (0, _emberComputed.default)('model.slug', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('model.slug') ? this.get('model.slug') : '';
            var seoURL = blogUrl + '/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = Handlebars.Utils.escapeExpression(seoURL);
                seoURL = (0, _emberString.htmlSafe)(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        // live-query of all tags for tag input autocomplete
        availableTags: (0, _emberComputed.default)(function () {
            return this.get('store').filter('tag', { limit: 'all' }, function () {
                return true;
            });
        }),

        showError: function showError(error) {
            // TODO: remove null check once ValidationEngine has been removed
            if (error) {
                this.get('notifications').showAPIError(error);
            }
        },


        actions: {
            showSubview: function showSubview() {
                this._super.apply(this, arguments);

                // Chrome appears to have an animation bug that cancels the slide
                // transition unless there's a delay between the animation starting
                // and the throbbers being removed
                _emberRunloop.default.later(this, function () {
                    this.set('_showThrobbers', false);
                }, 50);
            },
            closeSubview: function closeSubview() {
                this._super.apply(this, arguments);
                this.get('showThrobbers').perform();
            },
            discardEnter: function discardEnter() {
                return false;
            },
            togglePage: function togglePage() {
                var _this2 = this;

                this.toggleProperty('model.page');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save().catch(function (error) {
                    _this2.showError(error);
                    _this2.get('model').rollbackAttributes();
                });
            },
            toggleFeatured: function toggleFeatured() {
                var _this3 = this;

                this.toggleProperty('model.featured');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save(this.get('saveOptions')).catch(function (error) {
                    _this3.showError(error);
                    _this3.get('model').rollbackAttributes();
                });
            },


            /**
             * triggered by user manually changing slug
             */
            updateSlug: function updateSlug(newSlug) {
                var _this4 = this;

                return this.get('updateSlug').perform(newSlug).catch(function (error) {
                    _this4.showError(error);
                    _this4.get('model').rollbackAttributes();
                });
            },
            setPublishedAtBlogDate: function setPublishedAtBlogDate(date) {
                var post = this.get('model');
                var dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.get('errors').remove('publishedAtBlogDate');

                if (post.get('isNew') || date === post.get('publishedAtBlogDate')) {
                    post.validate({ property: 'publishedAtBlog' });
                } else {
                    post.set('publishedAtBlogDate', dateString);
                    return post.save();
                }
            },
            setPublishedAtBlogTime: function setPublishedAtBlogTime(time) {
                var post = this.get('model');

                post.get('errors').remove('publishedAtBlogDate');

                if (post.get('isNew') || time === post.get('publishedAtBlogTime')) {
                    post.validate({ property: 'publishedAtBlog' });
                } else {
                    post.set('publishedAtBlogTime', time);
                    return post.save();
                }
            },
            setMetaTitle: function setMetaTitle(metaTitle) {
                // Grab the model and current stored meta title
                var model = this.get('model');
                var currentTitle = model.get('metaTitle');

                // If the title entered matches the stored meta title, do nothing
                if (currentTitle === metaTitle) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                model.set('metaTitle', metaTitle);

                // Make sure the meta title is valid and if so, save it into the model
                return model.validate({ property: 'metaTitle' }).then(function () {
                    if (model.get('isNew')) {
                        return;
                    }

                    return model.save();
                });
            },
            setMetaDescription: function setMetaDescription(metaDescription) {
                // Grab the model and current stored meta description
                var model = this.get('model');
                var currentDescription = model.get('metaDescription');

                // If the title entered matches the stored meta title, do nothing
                if (currentDescription === metaDescription) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                model.set('metaDescription', metaDescription);

                // Make sure the meta title is valid and if so, save it into the model
                return model.validate({ property: 'metaDescription' }).then(function () {
                    if (model.get('isNew')) {
                        return;
                    }

                    return model.save();
                });
            },
            setCoverImage: function setCoverImage(image) {
                var _this5 = this;

                this.set('model.featureImage', image);

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save().catch(function (error) {
                    _this5.showError(error);
                    _this5.get('model').rollbackAttributes();
                });
            },
            clearCoverImage: function clearCoverImage() {
                var _this6 = this;

                this.set('model.featureImage', '');

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save().catch(function (error) {
                    _this6.showError(error);
                    _this6.get('model').rollbackAttributes();
                });
            },
            closeNavMenu: function closeNavMenu() {
                (0, _emberInvokeAction.invokeAction)(this, 'closeNavMenu');
            },
            closeMenus: function closeMenus() {
                (0, _emberInvokeAction.invokeAction)(this, 'closeMenus');
            },
            changeAuthor: function changeAuthor(newAuthor) {
                var _this7 = this;

                var author = this.get('model.author');
                var model = this.get('model');

                // return if nothing changed
                if (newAuthor.get('id') === author.get('id')) {
                    return;
                }

                model.set('author', newAuthor);

                // if this is a new post (never been saved before), don't try to save it
                if (this.get('model.isNew')) {
                    return;
                }

                model.save().catch(function (error) {
                    _this7.showError(error);
                    _this7.set('selectedAuthor', author);
                    model.rollbackAttributes();
                });
            },
            addTag: function addTag(tagName, index) {
                var _this8 = this;

                var currentTags = this.get('model.tags');
                var currentTagNames = currentTags.map(function (tag) {
                    return tag.get('name').toLowerCase();
                });
                var availableTagNames = void 0,
                    tagToAdd = void 0;

                tagName = tagName.trim();

                // abort if tag is already selected
                if (currentTagNames.includes(tagName.toLowerCase())) {
                    return;
                }

                this.get('availableTags').then(function (availableTags) {
                    availableTagNames = availableTags.map(function (tag) {
                        return tag.get('name').toLowerCase();
                    });

                    // find existing tag or create new
                    if (availableTagNames.includes(tagName.toLowerCase())) {
                        tagToAdd = availableTags.find(function (tag) {
                            return tag.get('name').toLowerCase() === tagName.toLowerCase();
                        });
                    } else {
                        tagToAdd = _this8.get('store').createRecord('tag', {
                            name: tagName
                        });

                        // we need to set a UUID so that selectize has a unique value
                        // it will be ignored when sent to the server
                        tagToAdd.set('uuid', (0, _utils.guidFor)(tagToAdd));
                    }

                    // push tag onto post relationship
                    if (tagToAdd) {
                        _this8.get('model.tags').insertAt(index, tagToAdd);
                    }
                });
            },
            removeTag: function removeTag(tag) {
                this.get('model.tags').removeObject(tag);

                if (tag.get('isNew')) {
                    tag.destroyRecord();
                }
            },
            deletePost: function deletePost() {
                if (this.get('deletePost')) {
                    this.get('deletePost')();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-posts-list-item', ['exports', 'jquery', 'ember-component', 'ember', 'ember-computed', 'ember-service/inject', 'ember-string', 'ember-utils'], function (exports, _jquery, _emberComponent, _ember, _emberComputed, _inject, _emberString, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Handlebars = _ember.default.Handlebars;
    exports.default = _emberComponent.default.extend({
        ghostPaths: (0, _inject.default)(),

        tagName: 'li',
        classNames: ['gh-posts-list-item'],
        classNameBindings: ['active'],

        post: null,
        active: false,

        isFeatured: (0, _emberComputed.alias)('post.featured'),
        isPage: (0, _emberComputed.alias)('post.page'),
        isPublished: (0, _emberComputed.equal)('post.status', 'published'),
        isScheduled: (0, _emberComputed.equal)('post.status', 'scheduled'),

        // closure actions
        onClick: function onClick() {},
        onDoubleClick: function onDoubleClick() {},


        authorName: (0, _emberComputed.default)('post.author.name', 'post.author.email', function () {
            return this.get('post.author.name') || this.get('post.author.email');
        }),

        authorAvatar: (0, _emberComputed.default)('post.author.profileImage', function () {
            return this.get('post.author.profileImage') || this.get('ghostPaths.assetRoot') + '/img/user-image-65d227a8129d14e33028afcad784158f.png';
        }),

        authorAvatarBackground: (0, _emberComputed.default)('authorAvatar', function () {
            var authorAvatar = this.get('authorAvatar');
            var safeUrl = Handlebars.Utils.escapeExpression(authorAvatar);
            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        // HACK: this is intentionally awful due to time constraints
        // TODO: find a better way to get an excerpt! :)
        subText: (0, _emberComputed.default)('post.{plaintext,metaDescription}', function () {
            var text = this.get('post.plaintext');
            var metaDescription = this.get('post.metaDescription');

            if (!(0, _emberUtils.isBlank)(metaDescription)) {
                text = metaDescription;
            }
            return text.slice(0, 80) + '...';
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            if (this.get('active')) {
                this.scrollIntoView();
            }
        },
        click: function click() {
            this.onClick(this.get('post'));
        },
        doubleClick: function doubleClick() {
            this.onDoubleClick(this.get('post'));
        },
        scrollIntoView: function scrollIntoView() {
            var element = this.$();
            var offset = element.offset().top;
            var elementHeight = element.height();
            var container = (0, _jquery.default)('.content-list');
            var containerHeight = container.height();
            var currentScroll = container.scrollTop();
            var isBelowTop = void 0,
                isAboveBottom = void 0,
                isOnScreen = void 0;

            isAboveBottom = offset < containerHeight;
            isBelowTop = offset > elementHeight;

            isOnScreen = isBelowTop && isAboveBottom;

            if (!isOnScreen) {
                // Scroll so that element is centered in container
                // 40 is the amount of padding on the container
                container.clearQueue().animate({
                    scrollTop: currentScroll + offset - 40 - containerHeight / 2
                });
            }
        }
    });
});
define('ghost-admin/components/gh-profile-image', ['exports', 'ember-component', 'ember-service/inject', 'ember-ajax/request', 'ember-runloop', 'ember-string', 'ember-concurrency'], function (exports, _emberComponent, _inject, _request, _emberRunloop, _emberString, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var ANIMATION_TIMEOUT = 1000;

    /**
     * A component to manage a user profile image. By default it just handles picture uploads,
     * but if passed a bound 'email' property it will render the user's gravatar image
     *
     * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
     *
     * @param  {int}            size              The size of the image to render
     * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
     * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
     * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
     * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
     * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
     * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
     */
    exports.default = _emberComponent.default.extend({
        email: '',
        size: 180,
        debounce: 300,

        hasUploadedImage: false,

        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        placeholderStyle: (0, _emberString.htmlSafe)('background-image: url()'),
        avatarStyle: (0, _emberString.htmlSafe)('display: none'),

        _defaultImageUrl: '',

        init: function init() {
            this._super.apply(this, arguments);

            this._defaultImageUrl = this.get('ghostPaths.assetRoot') + 'img/user-image-65d227a8129d14e33028afcad784158f.png';
            this._setPlaceholderImage(this._defaultImageUrl);
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            var size = this.get('size');
            var uploadElement = this.$('.js-file-input');

            // while theoretically the 'add' and 'processalways' functions could be
            // added as properties of the hash passed to fileupload(), for some reason
            // they needed to be placed in an on() call for the add method to work correctly
            uploadElement.fileupload({
                url: this.get('ghostPaths.url').api('uploads'),
                dropZone: this.$('.js-img-dropzone'),
                previewMaxHeight: size,
                previewMaxWidth: size,
                previewCrop: true,
                maxNumberOfFiles: 1,
                autoUpload: false
            }).on('fileuploadadd', _emberRunloop.default.bind(this, this.queueFile)).on('fileuploadprocessalways', _emberRunloop.default.bind(this, this.triggerPreview));
        },
        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            if (this.get('config.useGravatar')) {
                this.get('setGravatar').perform();
            }
        },


        setGravatar: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var email, size, gravatarUrl;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _emberConcurrency.timeout)(this.get('debounce'));

                        case 2:
                            email = this.get('email');

                            if (!validator.isEmail(email)) {
                                _context.next = 19;
                                break;
                            }

                            size = this.get('size');
                            gravatarUrl = '//www.gravatar.com/avatar/' + window.md5(email) + '?s=' + size + '&d=404';
                            _context.prev = 6;
                            _context.next = 9;
                            return (0, _request.default)(gravatarUrl, { type: 'HEAD' });

                        case 9:
                            // gravatar exists so switch style and let browser load it
                            this._setAvatarImage(gravatarUrl);
                            // wait for fade-in animation to finish before removing placeholder
                            _context.next = 12;
                            return (0, _emberConcurrency.timeout)(ANIMATION_TIMEOUT);

                        case 12:
                            this._setPlaceholderImage('');

                            _context.next = 19;
                            break;

                        case 15:
                            _context.prev = 15;
                            _context.t0 = _context['catch'](6);

                            // gravatar doesn't exist so make sure we're still showing the placeholder
                            this._setPlaceholderImage(this._defaultImageUrl);
                            // then make sure the avatar isn't visible
                            this._setAvatarImage('');

                        case 19:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[6, 15]]);
        })).restartable(),

        _setPlaceholderImage: function _setPlaceholderImage(url) {
            this.set('placeholderStyle', (0, _emberString.htmlSafe)('background-image: url(' + url + ');'));
        },
        _setAvatarImage: function _setAvatarImage(url) {
            var display = url ? 'block' : 'none';
            this.set('avatarStyle', (0, _emberString.htmlSafe)('background-image: url(' + url + '); display: ' + display));
        },
        willDestroyElement: function willDestroyElement() {
            var $input = this.$('.js-file-input');

            this._super.apply(this, arguments);

            if ($input.length && $input.data()['blueimp-fileupload']) {
                $input.fileupload('destroy');
            }
        },
        queueFile: function queueFile(e, data) {
            var fileName = data.files[0].name;

            if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
                this.sendAction('setImage', data);
            }
        },
        triggerPreview: function triggerPreview(e, data) {
            var file = data.files[data.index];

            if (file.preview) {
                this.set('hasUploadedImage', true);
                // necessary jQuery code because file.preview is a raw DOM object
                // potential todo: rename 'gravatar-img' class in the CSS to be something
                // that both the gravatar and the image preview can use that's not so confusing
                this.$('.js-img-preview').empty().append(this.$(file.preview).addClass('gravatar-img'));
            }
        }
    });
});
define('ghost-admin/components/gh-progress-bar', ['exports', 'ember-component', 'ember-string'], function (exports, _emberComponent, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: '',

        // Public attributes
        percentage: 0,
        isError: false,

        // Internal attributes
        progressStyle: '',

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            var percentage = this.get('percentage');
            var width = percentage > 0 ? percentage + '%' : '0';

            this.set('progressStyle', (0, _emberString.htmlSafe)('width: ' + width));
        }
    });
});
define('ghost-admin/components/gh-publishmenu-draft', ['exports', 'ember-component', 'moment', 'ember-utils'], function (exports, _emberComponent, _moment, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({

        post: null,
        saveType: null,

        // used to set minDate in datepicker
        _minDate: null,
        _publishedAtBlogTZ: null,

        'data-test-publishmenu-draft': true,

        didInsertElement: function didInsertElement() {
            this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
            this.send('setSaveType', 'publish');
        },


        // API only accepts dates at least 2 mins in the future, default the
        // scheduled date 5 mins in the future to avoid immediate validation errors
        _getMinDate: function _getMinDate() {
            return _moment.default.utc().add(5, 'minutes');
        },


        actions: {
            setSaveType: function setSaveType(type) {
                if (this.get('saveType') !== type) {
                    var hasDateError = !(0, _emberUtils.isEmpty)(this.get('post.errors').errorsFor('publishedAtBlogDate'));
                    var hasTimeError = !(0, _emberUtils.isEmpty)(this.get('post.errors').errorsFor('publishedAtBlogTime'));
                    var minDate = this._getMinDate();

                    this.set('_minDate', minDate);
                    this.get('setSaveType')(type);

                    // when publish: switch to now to avoid validation errors
                    // when schedule: switch to last valid or new minimum scheduled date
                    if (type === 'publish') {
                        if (!hasDateError && !hasTimeError) {
                            this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
                        } else {
                            this._publishedAtBlogTZ = this.get('post.publishedAtUTC');
                        }

                        this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
                    } else {
                        if (!this._publishedAtBlogTZ || (0, _moment.default)(this._publishedAtBlogTZ).isBefore(minDate)) {
                            this.get('post').set('publishedAtBlogTZ', minDate);
                        } else {
                            this.get('post').set('publishedAtBlogTZ', this._publishedAtBlogTZ);
                        }
                    }

                    this.get('post').validate();
                }
            },
            setDate: function setDate(date) {
                var post = this.get('post');
                var dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.set('publishedAtBlogDate', dateString);
                return post.validate();
            },
            setTime: function setTime(time) {
                var post = this.get('post');

                post.set('publishedAtBlogTime', time);
                return post.validate();
            }
        }
    });
});
define('ghost-admin/components/gh-publishmenu-published', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({

        'data-test-publishmenu-published': true,

        didInsertElement: function didInsertElement() {
            this.get('setSaveType')('publish');
        }
    });
});
define('ghost-admin/components/gh-publishmenu-scheduled', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'moment'], function (exports, _emberComponent, _emberComputed, _inject, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        clock: (0, _inject.default)(),

        post: null,
        saveType: null,
        isClosing: null,

        // used to set minDate in datepicker
        _minDate: null,

        'data-test-publishmenu-scheduled': true,

        timeToPublished: (0, _emberComputed.default)('post.publishedAtUTC', 'clock.second', function () {
            var publishedAtUTC = this.get('post.publishedAtUTC');

            if (!publishedAtUTC) {
                return null;
            }

            this.get('clock.second');

            return publishedAtUTC.toNow(true);
        }),

        didInsertElement: function didInsertElement() {
            this.set('_minDate', new Date());
            this.get('setSaveType')('schedule');
        },


        actions: {
            setSaveType: function setSaveType(type) {
                if (this.get('saveType') !== type) {
                    this.set('_minDate', new Date());
                    this.get('setSaveType')(type);

                    // when draft switch to now to avoid validation errors
                    // when schedule switch back to saved date to avoid unnecessary re-scheduling
                    if (type === 'draft') {
                        this.get('post').set('publishedAtBlogTZ', new Date());
                    } else {
                        this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
                    }

                    this.get('post').validate();
                }
            },
            setDate: function setDate(date) {
                var post = this.get('post');
                var dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.set('publishedAtBlogDate', dateString);
                return post.validate();
            },
            setTime: function setTime(time) {
                var post = this.get('post');

                if (!this.get('isClosing')) {
                    post.set('publishedAtBlogTime', time);
                    return post.validate();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-publishmenu', ['exports', 'jquery', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-concurrency'], function (exports, _jquery, _emberComponent, _emberComputed, _inject, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        clock: (0, _inject.default)(),

        classNames: 'gh-publishmenu',
        post: null,
        saveTask: null,

        _publishedAtBlogTZ: null,

        isClosing: null,

        forcePublishedMenu: (0, _emberComputed.reads)('post.pastScheduledTime'),

        postState: (0, _emberComputed.default)('post.{isPublished,isScheduled}', 'forcePublishedMenu', function () {
            if (this.get('forcePublishedMenu') || this.get('post.isPublished')) {
                return 'published';
            } else if (this.get('post.isScheduled')) {
                return 'scheduled';
            } else {
                return 'draft';
            }
        }),

        triggerText: (0, _emberComputed.default)('postState', function () {
            var state = this.get('postState');

            if (state === 'published') {
                return 'Update';
            } else if (state === 'scheduled') {
                return 'Scheduled';
            } else {
                return 'Publish';
            }
        }),

        _runningText: (0, _emberComputed.default)('postState', 'saveType', function () {
            var saveType = this.get('saveType');
            var postState = this.get('postState');
            var runningText = void 0;

            if (postState === 'draft') {
                runningText = saveType === 'publish' ? 'Publishing' : 'Scheduling';
            }

            if (postState === 'published') {
                runningText = saveType === 'publish' ? 'Updating' : 'Unpublishing';
            }

            if (postState === 'scheduled') {
                runningText = saveType === 'schedule' ? 'Rescheduling' : 'Unscheduling';
            }

            return runningText || 'Publishing';
        }),

        runningText: null,

        buttonText: (0, _emberComputed.default)('postState', 'saveType', function () {
            var saveType = this.get('saveType');
            var postState = this.get('postState');
            var buttonText = void 0;

            if (postState === 'draft') {
                buttonText = saveType === 'publish' ? 'Publish' : 'Schedule';
            }

            if (postState === 'published') {
                buttonText = saveType === 'publish' ? 'Update' : 'Unpublish';
            }

            if (postState === 'scheduled') {
                buttonText = saveType === 'schedule' ? 'Reschedule' : 'Unschedule';
            }

            return buttonText || 'Publish';
        }),

        successText: (0, _emberComputed.default)('_previousStatus', 'postState', function () {
            var postState = this.get('postState');
            var previousStatus = this.get('_previousStatus');
            var buttonText = void 0;

            if (previousStatus === 'draft') {
                buttonText = postState === 'published' ? 'Published' : 'Scheduled';
            }

            if (previousStatus === 'published') {
                buttonText = postState === 'draft' ? 'Unpublished' : 'Updated';
            }

            if (previousStatus === 'scheduled') {
                buttonText = postState === 'draft' ? 'Unscheduled' : 'Rescheduled';
            }

            return buttonText;
        }),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var post;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            // runningText needs to be declared before the other states change during the
                            // save action.
                            this.set('runningText', this.get('_runningText'));
                            this.set('_previousStatus', this.get('post.status'));
                            this.get('setSaveType')(this.get('saveType'));

                            _context.prev = 3;
                            _context.next = 6;
                            return this.get('post').validate({ property: 'publishedAtBlog' });

                        case 6:
                            _context.next = 8;
                            return this.get('saveTask').perform();

                        case 8:
                            post = _context.sent;


                            this._cachePublishedAtBlogTZ();
                            return _context.abrupt('return', post);

                        case 13:
                            _context.prev = 13;
                            _context.t0 = _context['catch'](3);

                            if (!_context.t0) {
                                _context.next = 17;
                                break;
                            }

                            throw _context.t0;

                        case 17:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[3, 13]]);
        })),

        _previousStatus: null,

        _cachePublishedAtBlogTZ: function _cachePublishedAtBlogTZ() {
            this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
        },


        // when closing the menu we reset the publishedAtBlogTZ date so that the
        // unsaved changes made to the scheduled date aren't reflected in the PSM
        _resetPublishedAtBlogTZ: function _resetPublishedAtBlogTZ() {
            this.get('post').set('publishedAtBlogTZ', this._publishedAtBlogTZ);
        },


        actions: {
            setSaveType: function setSaveType(saveType) {
                var post = this.get('post');

                this.set('saveType', saveType);

                if (saveType === 'draft') {
                    post.set('statusScratch', 'draft');
                } else if (saveType === 'schedule') {
                    post.set('statusScratch', 'scheduled');
                } else if (saveType === 'publish') {
                    post.set('statusScratch', 'published');
                }
            },
            open: function open() {
                this._cachePublishedAtBlogTZ();
                this.set('isClosing', false);
                this.get('post.errors').clear();
                if (this.get('onOpen')) {
                    this.get('onOpen')();
                }
            },
            close: function close(dropdown, e) {
                var post = this.get('post');

                // don't close the menu if the datepicker popup is clicked
                if (e && (0, _jquery.default)(e.target).closest('.ember-power-datepicker-content').length) {
                    return false;
                }

                // cleanup
                this._resetPublishedAtBlogTZ();
                post.set('statusScratch', null);
                post.validate();

                if (this.get('onClose')) {
                    this.get('onClose')();
                }

                this.set('isClosing', true);

                return true;
            }
        }
    });
});
define('ghost-admin/components/gh-search-input', ['exports', 'ember-component', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ember-utils'], function (exports, _emberComponent, _rsvp, _emberComputed, _inject, _emberRunloop, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.computedGroup = computedGroup;
    /* global key */
    /* eslint-disable camelcase */
    function computedGroup(category) {
        return (0, _emberComputed.default)('content', 'currentSearch', function () {
            var _this = this;

            if (!this.get('currentSearch') || !this.get('content')) {
                return [];
            }

            return this.get('content').filter(function (item) {
                var search = new RegExp(_this.get('currentSearch'), 'ig');

                return item.category === category && item.title.match(search);
            });
        });
    }

    exports.default = _emberComponent.default.extend({

        selection: null,
        content: [],
        isLoading: false,
        contentExpiry: 10 * 1000,
        contentExpiresAt: false,
        currentSearch: '',

        posts: computedGroup('Posts'),
        pages: computedGroup('Pages'),
        users: computedGroup('Users'),
        tags: computedGroup('Tags'),

        _store: (0, _inject.default)('store'),
        _routing: (0, _inject.default)('-routing'),
        ajax: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        refreshContent: function refreshContent() {
            var _this2 = this;

            var promises = [];
            var now = new Date();
            var contentExpiry = this.get('contentExpiry');
            var contentExpiresAt = this.get('contentExpiresAt');

            if (this.get('isLoading') || contentExpiresAt > now) {
                return _rsvp.default.resolve();
            }

            this.set('isLoading', true);
            this.set('content', []);
            promises.pushObject(this._loadPosts());
            promises.pushObject(this._loadUsers());
            promises.pushObject(this._loadTags());

            return _rsvp.default.all(promises).then(function () {}).finally(function () {
                _this2.set('isLoading', false);
                _this2.set('contentExpiresAt', new Date(now.getTime() + contentExpiry));
            });
        },


        groupedContent: (0, _emberComputed.default)('posts', 'pages', 'users', 'tags', function () {
            var groups = [];

            if (!(0, _emberUtils.isEmpty)(this.get('posts'))) {
                groups.pushObject({ groupName: 'Posts', options: this.get('posts') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('pages'))) {
                groups.pushObject({ groupName: 'Pages', options: this.get('pages') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('users'))) {
                groups.pushObject({ groupName: 'Users', options: this.get('users') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('tags'))) {
                groups.pushObject({ groupName: 'Tags', options: this.get('tags') });
            }

            return groups;
        }),

        _loadPosts: function _loadPosts() {
            var _this3 = this;

            var store = this.get('_store');
            var postsUrl = store.adapterFor('post').urlForQuery({}, 'post') + '/';
            var postsQuery = { fields: 'id,title,page', limit: 'all', status: 'all', staticPages: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(postsUrl, { data: postsQuery }).then(function (posts) {
                content.pushObjects(posts.posts.map(function (post) {
                    return {
                        id: 'post.' + post.id,
                        title: post.title,
                        category: post.page ? 'Pages' : 'Posts'
                    };
                }));
            }).catch(function (error) {
                _this3.get('notifications').showAPIError(error, { key: 'search.loadPosts.error' });
            });
        },
        _loadUsers: function _loadUsers() {
            var _this4 = this;

            var store = this.get('_store');
            var usersUrl = store.adapterFor('user').urlForQuery({}, 'user') + '/';
            var usersQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(usersUrl, { data: usersQuery }).then(function (users) {
                content.pushObjects(users.users.map(function (user) {
                    return {
                        id: 'user.' + user.slug,
                        title: user.name,
                        category: 'Users'
                    };
                }));
            }).catch(function (error) {
                _this4.get('notifications').showAPIError(error, { key: 'search.loadUsers.error' });
            });
        },
        _loadTags: function _loadTags() {
            var _this5 = this;

            var store = this.get('_store');
            var tagsUrl = store.adapterFor('tag').urlForQuery({}, 'tag') + '/';
            var tagsQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(tagsUrl, { data: tagsQuery }).then(function (tags) {
                content.pushObjects(tags.tags.map(function (tag) {
                    return {
                        id: 'tag.' + tag.slug,
                        title: tag.name,
                        category: 'Tags'
                    };
                }));
            }).catch(function (error) {
                _this5.get('notifications').showAPIError(error, { key: 'search.loadTags.error' });
            });
        },
        _performSearch: function _performSearch(term, resolve, reject) {
            var _this6 = this;

            if ((0, _emberUtils.isBlank)(term)) {
                return resolve([]);
            }

            this.refreshContent().then(function () {
                _this6.set('currentSearch', term);

                return resolve(_this6.get('groupedContent'));
            }).catch(reject);
        },
        _setKeymasterScope: function _setKeymasterScope() {
            key.setScope('search-input');
        },
        _resetKeymasterScope: function _resetKeymasterScope() {
            key.setScope('default');
        },
        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            this._resetKeymasterScope();
        },


        actions: {
            openSelected: function openSelected(selected) {
                if (!selected) {
                    return;
                }

                if (selected.category === 'Posts' || selected.category === 'Pages') {
                    var id = selected.id.replace('post.', '');
                    this.get('_routing.router').transitionTo('editor.edit', id);
                }

                if (selected.category === 'Users') {
                    var _id = selected.id.replace('user.', '');
                    this.get('_routing.router').transitionTo('team.user', _id);
                }

                if (selected.category === 'Tags') {
                    var _id2 = selected.id.replace('tag.', '');
                    this.get('_routing.router').transitionTo('settings.tags.tag', _id2);
                }
            },
            onFocus: function onFocus() {
                this._setKeymasterScope();
            },
            onBlur: function onBlur() {
                this._resetKeymasterScope();
            },
            search: function search(term) {
                var _this7 = this;

                return new _rsvp.default.Promise(function (resolve, reject) {
                    _emberRunloop.default.debounce(_this7, _this7._performSearch, term, resolve, reject, 200);
                });
            }
        }

    });
});
define('ghost-admin/components/gh-search-input/trigger', ['exports', 'ember-component', 'ember-runloop', 'ember-invoke-action', 'ember-utils'], function (exports, _emberComponent, _emberRunloop, _emberInvokeAction, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        open: function open() {
            this.get('select.actions').open();
        },
        close: function close() {
            this.get('select.actions').close();
        },


        actions: {
            captureMouseDown: function captureMouseDown(e) {
                e.stopPropagation();
            },
            search: function search(term) {
                if ((0, _emberUtils.isBlank)(term) === this.get('select.isOpen')) {
                    _emberRunloop.default.scheduleOnce('afterRender', this, (0, _emberUtils.isBlank)(term) ? this.close : this.open);
                }

                (0, _emberInvokeAction.invokeAction)(this, 'select.actions.search', term);
            },
            focusInput: function focusInput() {
                this.$('input')[0].focus();
            },
            resetInput: function resetInput() {
                this.$('input').val('');
            },
            handleKeydown: function handleKeydown(e) {
                var select = this.get('select');

                // TODO: remove keycode check once EPS is updated to 1.0
                if (!select.isOpen || e.keyCode === 32) {
                    e.stopPropagation();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize', 'ember-computed', 'ember-metal/get', 'ember-runloop', 'ember-array/utils', 'ember-utils'], function (exports, _emberSelectize, _emberComputed, _get, _emberRunloop, _utils, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberSelectize.default.extend({

        selectizeOptions: (0, _emberComputed.default)(function () {
            var options = this._super.apply(this, arguments);

            options.onChange = _emberRunloop.default.bind(this, '_onChange');

            return options;
        }),

        /**
        * Event callback that is triggered when user creates a tag
        * - modified to pass the caret position to the action
        */
        _create: function _create(input, callback) {
            var caret = this._selectize.caretPos;

            // Delete user entered text
            this._selectize.setTextboxValue('');
            // Send create action

            // allow the observers and computed properties to run first
            _emberRunloop.default.schedule('actions', this, function () {
                this.sendAction('create-item', input, caret);
            });
            // We cancel the creation here, so it's up to you to include the created element
            // in the content and selection property
            callback(null);
        },
        _addSelection: function _addSelection(obj) {
            var _valuePath = this.get('_valuePath');
            var val = (0, _get.default)(obj, _valuePath);
            var caret = this._selectize.caretPos;

            // caret position is always 1 more than the desired index as this method
            // is called after selectize has inserted the item and the caret has moved
            // to the right
            caret = caret - 1;

            this.get('selection').insertAt(caret, obj);

            _emberRunloop.default.schedule('actions', this, function () {
                this.sendAction('add-item', obj);
                this.sendAction('add-value', val);
            });
        },
        _onChange: function _onChange(args) {
            var selection = (0, _get.default)(this, 'selection');
            var valuePath = (0, _get.default)(this, '_valuePath');
            var reorderedSelection = (0, _utils.A)([]);

            if (!args || !selection || !(0, _utils.isEmberArray)(selection) || args.length !== (0, _get.default)(selection, 'length')) {
                return;
            }

            // exit if we're not dealing with the same objects as the selection
            var objectsHaveChanged = selection.any(function (obj) {
                return args.indexOf((0, _get.default)(obj, valuePath)) === -1;
            });

            if (objectsHaveChanged) {
                return;
            }

            // exit if the order is still the same
            var orderIsSame = selection.every(function (obj, idx) {
                return (0, _get.default)(obj, valuePath) === args[idx];
            });

            if (orderIsSame) {
                return;
            }

            // we have a re-order, update the selection
            args.forEach(function (value) {
                var obj = selection.find(function (item) {
                    return '' + (0, _get.default)(item, valuePath) === value;
                });

                if (obj) {
                    reorderedSelection.addObject(obj);
                }
            });

            this.set('selection', reorderedSelection);
        },
        _preventOpeningWhenBlank: function _preventOpeningWhenBlank() {
            var openOnFocus = this.get('openOnFocus');

            if (!openOnFocus) {
                _emberRunloop.default.schedule('afterRender', this, function () {
                    var selectize = this._selectize;
                    if (selectize) {
                        selectize.on('dropdown_open', function () {
                            if ((0, _emberUtils.isBlank)(selectize.$control_input.val())) {
                                selectize.close();
                            }
                        });
                        selectize.on('type', function (filter) {
                            if ((0, _emberUtils.isBlank)(filter)) {
                                selectize.close();
                            }
                        });
                    }
                });
            }
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._preventOpeningWhenBlank();
        }
    });
});
define('ghost-admin/components/gh-simplemde', ['exports', 'ember', 'ember-components/text-area', 'ember-computed', 'ember-platform', 'ember-utils'], function (exports, _ember, _textArea, _emberComputed, _emberPlatform, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;
    exports.default = _textArea.default.extend({

        // Public attributes
        autofocus: false,
        options: null,
        value: null,
        placeholder: '',

        // Closure actions
        onChange: function onChange() {},
        onEditorInit: function onEditorInit() {},
        onEditorDestroy: function onEditorDestroy() {},


        // Private
        _editor: null,

        // default SimpleMDE options, see docs for available config:
        // https://github.com/NextStepWebs/simplemde-markdown-editor#configuration
        defaultOptions: (0, _emberComputed.default)(function () {
            return {
                autofocus: this.get('autofocus'),
                indentWithTabs: false,
                placeholder: this.get('placeholder'),
                tabSize: 4
            };
        }),

        init: function init() {
            this._super.apply(this, arguments);

            if ((0, _emberUtils.isEmpty)(this.get('options'))) {
                this.set('options', {});
            }
        },


        // instantiate the editor with the contents of value
        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            var editorOptions = (0, _emberPlatform.assign)({ element: document.getElementById(this.elementId) }, this.get('defaultOptions'), this.get('options'));

            // disable spellchecker when testing so that the exterally loaded plugin
            // doesn't fail
            if (testing) {
                editorOptions.spellChecker = false;
            }

            this._editor = new SimpleMDE(editorOptions);
            this._editor.value(this.get('value') || '');

            this._editor.codemirror.on('change', function () {
                _this.onChange(_this._editor.value());
            });

            if (this.get('autofocus')) {
                this._editor.codemirror.execCommand('goDocEnd');
            }

            this.onEditorInit(this._editor);
        },


        // update the editor when the value property changes from the outside
        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            if ((0, _emberUtils.isEmpty)(this._editor)) {
                return;
            }

            // compare values before forcing a content reset to avoid clobbering
            // the undo behaviour
            if (this.get('value') !== this._editor.value()) {
                var cursor = this._editor.codemirror.getDoc().getCursor();
                this._editor.value(this.get('value'));
                this._editor.codemirror.getDoc().setCursor(cursor);
            }
        },
        willDestroyElement: function willDestroyElement() {
            this.onEditorDestroy();
            this._editor.toTextArea();
            delete this._editor;
            this._super.apply(this, arguments);
        }
    });
});
define('ghost-admin/components/gh-skip-link', ['exports', 'jquery', 'ember-component', 'ember-string'], function (exports, _jquery, _emberComponent, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'a',
        anchor: '',
        classNames: ['sr-only', 'sr-only-focusable'],
        // Add attributes to component for href
        // href should be set to retain anchor properties
        // such as pointer cursor and text underline
        attributeBindings: ['href'],
        // Used so that upon clicking on the link
        // anchor behaviors or ignored
        href: (0, _emberString.htmlSafe)('javascript:;'),

        click: function click() {
            var anchor = this.get('anchor');
            var $el = (0, _jquery.default)(anchor);

            if ($el) {
                // Scrolls to the top of main content or whatever
                // is passed to the anchor attribute
                (0, _jquery.default)('body').scrollTop($el.offset().top);

                // This sets focus on the content which was skipped to
                // upon losing focus, the tabindex should be removed
                // so that normal keyboard navigation picks up from focused
                // element
                (0, _jquery.default)($el).attr('tabindex', -1).on('blur focusout', function () {
                    (0, _jquery.default)(this).removeAttr('tabindex');
                }).focus();
            }
        }
    });
});
define('ghost-admin/components/gh-subscribers-table', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: ['subscribers-table'],

        table: null,

        actions: {
            onScrolledToBottom: function onScrolledToBottom() {
                var loadNextPage = this.get('loadNextPage');

                if (!this.get('isLoading')) {
                    loadNextPage();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-tab-pane', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNameBindings: ['active'],

        tabsManager: (0, _emberComputed.default)(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        tab: (0, _emberComputed.default)('tabsManager.tabs.[]', 'tabsManager.tabPanes.[]', function () {
            var index = this.get('tabsManager.tabPanes').indexOf(this);
            var tabs = this.get('tabsManager.tabs');

            return tabs && tabs.objectAt(index);
        }),

        active: (0, _emberComputed.alias)('tab.active'),

        willRender: function willRender() {
            this._super.apply(this, arguments);
            // Register with the tabs manager
            this.get('tabsManager').registerTabPane(this);
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // Deregister with the tabs manager
            this.get('tabsManager').unregisterTabPane(this);
        }
    });
});
define('ghost-admin/components/gh-tab', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tabsManager: (0, _emberComputed.default)(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        active: (0, _emberComputed.default)('tabsManager.activeTab', function () {
            return this.get('tabsManager.activeTab') === this;
        }),

        index: (0, _emberComputed.default)('tabsManager.tabs.[]', function () {
            return this.get('tabsManager.tabs').indexOf(this);
        }),

        // Select on click
        click: function click() {
            this.get('tabsManager').select(this);
        },
        willRender: function willRender() {
            this._super.apply(this, arguments);
            // register the tabs with the tab manager
            this.get('tabsManager').registerTab(this);
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // unregister the tabs with the tab manager
            this.get('tabsManager').unregisterTab(this);
        }
    });
});
define('ghost-admin/components/gh-tabs-manager', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        activeTab: null,
        tabs: [],
        tabPanes: [],

        // Used by children to find this tabsManager
        isTabsManager: true,

        // Called when a gh-tab is clicked.
        select: function select(tab) {
            this.set('activeTab', tab);
            this.sendAction('selected');
        },


        // Register tabs and their panes to allow for
        // interaction between components.
        registerTab: function registerTab(tab) {
            this.get('tabs').addObject(tab);
        },
        unregisterTab: function unregisterTab(tab) {
            this.get('tabs').removeObject(tab);
        },
        registerTabPane: function registerTabPane(tabPane) {
            this.get('tabPanes').addObject(tabPane);
        },
        unregisterTabPane: function unregisterTabPane(tabPane) {
            this.get('tabPanes').removeObject(tabPane);
        }
    });
});
define('ghost-admin/components/gh-tag-settings-form', ['exports', 'ember-component', 'ember', 'ghost-admin/utils/bound-one-way', 'ember-computed', 'ember-service/inject', 'ember-string', 'ember-invoke-action'], function (exports, _emberComponent, _ember, _boundOneWay, _emberComputed, _inject, _emberString, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Handlebars = _ember.default.Handlebars;
    exports.default = _emberComponent.default.extend({

        tag: null,

        scratchName: (0, _boundOneWay.default)('tag.name'),
        scratchSlug: (0, _boundOneWay.default)('tag.slug'),
        scratchDescription: (0, _boundOneWay.default)('tag.description'),
        scratchMetaTitle: (0, _boundOneWay.default)('tag.metaTitle'),
        scratchMetaDescription: (0, _boundOneWay.default)('tag.metaDescription'),

        isViewingSubview: false,

        feature: (0, _inject.default)(),
        config: (0, _inject.default)(),
        mediaQueries: (0, _inject.default)(),

        isMobile: (0, _emberComputed.reads)('mediaQueries.maxWidth600'),

        title: (0, _emberComputed.default)('tag.isNew', function () {
            if (this.get('tag.isNew')) {
                return 'New Tag';
            } else {
                return 'Tag Settings';
            }
        }),

        seoTitle: (0, _emberComputed.default)('scratchName', 'scratchMetaTitle', function () {
            var metaTitle = this.get('scratchMetaTitle') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('scratchName');

            if (metaTitle && metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = (0, _emberString.htmlSafe)(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoURL: (0, _emberComputed.default)('scratchSlug', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('scratchSlug') || '';

            var seoURL = blogUrl + '/tag/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = Handlebars.Utils.escapeExpression(seoURL);
                seoURL = (0, _emberString.htmlSafe)(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        seoDescription: (0, _emberComputed.default)('scratchDescription', 'scratchMetaDescription', function () {
            var metaDescription = this.get('scratchMetaDescription') || '';

            metaDescription = metaDescription.length > 0 ? metaDescription : this.get('scratchDescription');

            if (metaDescription && metaDescription.length > 156) {
                metaDescription = metaDescription.substring(0, 156).trim();
                metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
                metaDescription = (0, _emberString.htmlSafe)(metaDescription + '&hellip;');
            }

            return metaDescription;
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            var oldTagId = this._oldTagId;
            var newTagId = this.get('tag.id');

            if (newTagId !== oldTagId) {
                this.reset();
            }

            this._oldTagId = newTagId;
        },
        reset: function reset() {
            this.set('isViewingSubview', false);
            if (this.$()) {
                this.$('.settings-menu-pane').scrollTop(0);
            }
        },
        focusIn: function focusIn() {
            key.setScope('tag-settings-form');
        },
        focusOut: function focusOut() {
            key.setScope('default');
        },


        actions: {
            setProperty: function setProperty(property, value) {
                (0, _emberInvokeAction.invokeAction)(this, 'setProperty', property, value);
            },
            setCoverImage: function setCoverImage(image) {
                this.send('setProperty', 'featureImage', image);
            },
            clearCoverImage: function clearCoverImage() {
                this.send('setProperty', 'featureImage', '');
            },
            openMeta: function openMeta() {
                this.set('isViewingSubview', true);
            },
            closeMeta: function closeMeta() {
                this.set('isViewingSubview', false);
            },
            deleteTag: function deleteTag() {
                (0, _emberInvokeAction.invokeAction)(this, 'showDeleteTagModal');
            }
        }

    });
});
define('ghost-admin/components/gh-tag', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: ''
    });
});
define('ghost-admin/components/gh-tags-management-container', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-metal/observer', 'ember-runloop', 'ember-utils'], function (exports, _emberComponent, _emberComputed, _inject, _observer, _emberRunloop, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: ['view-container'],
        classNameBindings: ['isMobile'],

        mediaQueries: (0, _inject.default)(),

        tags: null,
        selectedTag: null,

        isMobile: (0, _emberComputed.reads)('mediaQueries.maxWidth600'),
        isEmpty: (0, _emberComputed.equal)('tags.length', 0),

        init: function init() {
            this._super.apply(this, arguments);
            _emberRunloop.default.schedule('actions', this, this.fireMobileChangeActions);
        },


        displaySettingsPane: (0, _emberComputed.default)('isEmpty', 'selectedTag', 'isMobile', function () {
            var isEmpty = this.get('isEmpty');
            var selectedTag = this.get('selectedTag');
            var isMobile = this.get('isMobile');

            // always display settings pane for blank-slate on mobile
            if (isMobile && isEmpty) {
                return true;
            }

            // display list if no tag is selected on mobile
            if (isMobile && (0, _emberUtils.isBlank)(selectedTag)) {
                return false;
            }

            // default to displaying settings pane
            return true;
        }),

        fireMobileChangeActions: (0, _observer.default)('isMobile', function () {
            if (!this.get('isMobile')) {
                this.sendAction('leftMobile');
            }
        })
    });
});
define('ghost-admin/components/gh-task-button', ['exports', 'ember-component', 'ember-computed', 'ember-metal/observer', 'ember-invoke-action', 'ember-utils', 'ember-concurrency'], function (exports, _emberComponent, _emberComputed, _observer, _emberInvokeAction, _emberUtils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    /**
     * Task Button works exactly like Spin button, but with one major difference:
     *
     * Instead of passing a "submitting" parameter (which is bound to the parent object),
     * you pass an ember-concurrency task. All of the "submitting" behavior is handled automatically.
     *
     * As another bonus, there's no need to handle canceling the promises when something
     * like a controller changes. Because the only task running is handled through this
     * component, all running promises will automatically be cancelled when this
     * component is removed from the DOM
     */
    var GhTaskButton = _emberComponent.default.extend({
        tagName: 'button',
        classNameBindings: ['isRunning:appear-disabled', 'isIdleClass', 'isRunningClass', 'isSuccessClass', 'isFailureClass'],
        attributeBindings: ['disabled', 'type', 'tabindex'],

        task: null,
        disabled: false,
        buttonText: 'Save',
        runningText: (0, _emberComputed.reads)('buttonText'),
        idleClass: '',
        runningClass: '',
        successText: 'Saved',
        successClass: 'gh-btn-green',
        failureText: 'Retry',
        failureClass: 'gh-btn-red',

        // hasRun is needed so that a newly rendered button does not show the last
        // state of the associated task
        hasRun: false,
        isRunning: (0, _emberComputed.reads)('task.last.isRunning'),

        isIdleClass: (0, _emberComputed.default)('isIdle', function () {
            if (this.get('isIdle')) {
                return this.get('idleClass');
            }
        }),

        isRunningClass: (0, _emberComputed.default)('isRunning', function () {
            if (this.get('isRunning')) {
                return this.get('runningClass') || this.get('idleClass');
            }
        }),

        isSuccess: (0, _emberComputed.default)('hasRun', 'isRunning', 'task.last.value', function () {
            if (!this.get('hasRun') || this.get('isRunning')) {
                return false;
            }

            var value = this.get('task.last.value');
            return !(0, _emberUtils.isBlank)(value) && value !== false;
        }),

        isSuccessClass: (0, _emberComputed.default)('isSuccess', function () {
            if (this.get('isSuccess')) {
                return this.get('successClass');
            }
        }),

        isFailure: (0, _emberComputed.default)('hasRun', 'isRunning', 'isSuccess', 'task.last.error', function () {
            if (!this.get('hasRun') || this.get('isRunning') || this.get('isSuccess')) {
                return false;
            }

            return this.get('task.last.error') !== undefined;
        }),

        isFailureClass: (0, _emberComputed.default)('isFailure', function () {
            if (this.get('isFailure')) {
                return this.get('failureClass');
            }
        }),

        isIdle: (0, _emberComputed.default)('isRunning', 'isSuccess', 'isFailure', function () {
            return !this.get('isRunning') && !this.get('isSuccess') && !this.get('isFailure');
        }),

        click: function click() {
            // do nothing if disabled externally
            if (this.get('disabled')) {
                return false;
            }

            var task = this.get('task');
            var taskName = this.get('task.name');
            var lastTaskName = this.get('task.last.task.name');

            // task-buttons are never disabled whilst running so that clicks when a
            // taskGroup is running don't get dropped BUT that means we need to check
            // here to avoid spamming actions from multiple clicks
            if (this.get('isRunning') && taskName === lastTaskName) {
                return;
            }

            (0, _emberInvokeAction.invokeAction)(this, 'action');
            task.perform();

            this.get('_restartAnimation').perform();

            // prevent the click from bubbling and triggering form actions
            return false;
        },


        setSize: (0, _observer.default)('isRunning', function () {
            if (this.get('isRunning')) {
                this.set('hasRun', true);
                // this.$().width(this.$().width());
                // this.$().height(this.$().height());
            } else {
                    // this.$().width('');
                    // this.$().height('');
                }
        }),

        // when local validation fails there's no transition from failed->running
        // so we want to restart the retry spinner animation to show something
        // has happened when the button is clicked
        _restartAnimation: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var elem;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.$('.retry-animated').length) {
                                _context.next = 6;
                                break;
                            }

                            elem = this.$('.retry-animated')[0];

                            elem.classList.remove('retry-animated');
                            _context.next = 5;
                            return (0, _emberConcurrency.timeout)(10);

                        case 5:
                            elem.classList.add('retry-animated');

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }))
    });

    GhTaskButton.reopenClass({
        positionalParams: ['buttonText']
    });

    exports.default = GhTaskButton;
});
define('ghost-admin/components/gh-textarea', ['exports', 'ember-one-way-controls/components/one-way-textarea', 'ghost-admin/mixins/text-input', 'ember-service/inject', 'ember-runloop'], function (exports, _oneWayTextarea, _textInput, _inject, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _oneWayTextarea.default.extend(_textInput.default, {
        resizeDetector: (0, _inject.default)(),

        classNames: 'gh-input',

        autoExpand: false,

        willInsertElement: function willInsertElement() {
            this._super.apply(this, arguments);

            // disable the draggable resize element that browsers add to textareas
            if (this.get('autoExpand')) {
                this.element.style.resize = 'none';
            }
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            // set up resize handler on element insert so that we can autoexpand
            // when the element container changes size
            if (this.get('autoExpand')) {
                _emberRunloop.default.scheduleOnce('afterRender', this, this._setupAutoExpand);
            }
        },
        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            // trigger auto-expand any time the value changes
            if (this.get('autoExpand')) {
                _emberRunloop.default.scheduleOnce('afterRender', this, this._autoExpand);
            }
        },
        willDestroyElement: function willDestroyElement() {
            this._teardownAutoExpand();
            this._super.apply(this, arguments);
        },
        _autoExpand: function _autoExpand() {
            var el = this.element;

            // collapse the element first so that we can shrink as well as expand
            // then set the height to match the text height
            if (el) {
                el.style.height = 0;
                el.style.height = el.scrollHeight + 'px';
            }
        },
        _setupAutoExpand: function _setupAutoExpand() {
            this._resizeCallback = _emberRunloop.default.bind(this, this._onResize);
            this.get('resizeDetector').setup(this.get('autoExpand'), this._resizeCallback);
            this._autoExpand();
        },
        _onResize: function _onResize() {
            this._autoExpand();
        },
        _teardownAutoExpand: function _teardownAutoExpand() {
            this.get('resizeDetector').teardown(this.get('autoExpand'), this._resizeCallback);
        }
    });
});
define('ghost-admin/components/gh-theme-error-li', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: '',
        error: null,
        showDetails: false,

        actions: {
            toggleDetails: function toggleDetails() {
                this.toggleProperty('showDetails');
            }
        }
    });
});
define('ghost-admin/components/gh-theme-table', ['exports', 'ember-component', 'ember-computed', 'ember-metal/get'], function (exports, _emberComponent, _emberComputed, _get) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({

        themes: null,

        sortedThemes: (0, _emberComputed.default)('themes.@each.active', function () {
            var themes = (0, _get.default)(this, 'themes').map(function (t) {
                var theme = {};
                var themePackage = (0, _get.default)(t, 'package');

                theme.model = t;
                theme.name = (0, _get.default)(t, 'name');
                theme.label = themePackage ? '' + themePackage.name : theme.name;
                theme.version = themePackage ? '' + themePackage.version : '1.0';
                theme.package = themePackage;
                theme.active = (0, _get.default)(t, 'active');
                theme.isDeletable = !theme.active;

                return theme;
            });
            var duplicateThemes = [];

            themes.forEach(function (theme) {
                var duplicateLabels = themes.filterBy('label', theme.label);

                if (duplicateLabels.length > 1) {
                    duplicateThemes.pushObject(theme);
                }
            });

            duplicateThemes.forEach(function (theme) {
                if (theme.name !== 'casper') {
                    theme.label = theme.label + ' (' + theme.name + ')';
                }
            });

            // "(default)" needs to be added to casper manually as it's always
            // displayed and would mess up the duplicate checking if added earlier
            var casper = themes.findBy('name', 'casper');
            if (casper) {
                casper.label = casper.label + ' (default)';
                casper.isDefault = true;
                casper.isDeletable = false;
            }

            // sorting manually because .sortBy('label') has a different sorting
            // algorithm to [...strings].sort()
            return themes.sort(function (themeA, themeB) {
                var a = themeA.label.toLowerCase();
                var b = themeB.label.toLowerCase();

                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                return 0;
            });
        }).readOnly()

    });
});
define('ghost-admin/components/gh-timezone-select', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'moment', 'ember-invoke-action'], function (exports, _emberComponent, _emberComputed, _inject, _moment, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    exports.default = _emberComponent.default.extend({
        classNames: ['form-group', 'for-select'],

        activeTimezone: null,
        availableTimezones: null,

        clock: (0, _inject.default)(),

        availableTimezoneNames: (0, _emberComputed.mapBy)('availableTimezones', 'name'),

        hasTimezoneOverride: (0, _emberComputed.default)('activeTimezone', 'availableTimezoneNames', function () {
            var activeTimezone = this.get('activeTimezone');
            var availableTimezoneNames = this.get('availableTimezoneNames');

            return !availableTimezoneNames.includes(activeTimezone);
        }),

        selectedTimezone: (0, _emberComputed.default)('activeTimezone', 'availableTimezones', 'hasTimezoneOverride', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var activeTimezone = this.get('activeTimezone');
            var availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return { name: '', label: '' };
            }

            return availableTimezones.filterBy('name', activeTimezone).get('firstObject');
        }),

        selectableTimezones: (0, _emberComputed.default)('availableTimezones', 'hasTimezoneOverride', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return [{ name: '', label: '' }].concat(_toConsumableArray(availableTimezones));
            }

            return availableTimezones;
        }),

        localTime: (0, _emberComputed.default)('hasTimezoneOverride', 'activeTimezone', 'selectedTimezone', 'clock.second', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var timezone = hasTimezoneOverride ? this.get('activeTimezone') : this.get('selectedTimezone.name');

            this.get('clock.second');
            return timezone ? (0, _moment.default)().tz(timezone).format('HH:mm:ss') : (0, _moment.default)().utc().format('HH:mm:ss');
        }),

        actions: {
            setTimezone: function setTimezone(timezone) {
                (0, _emberInvokeAction.invokeAction)(this, 'update', timezone);
            }
        }
    });
});
define('ghost-admin/components/gh-tour-item', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ember-utils'], function (exports, _emberComponent, _emberComputed, _inject, _emberRunloop, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var instancesCounter = 0;

    var triangleClassPositions = {
        'top-left': {
            attachment: 'top left',
            targetAttachment: 'bottom center',
            offset: '0 28px'
        },
        'top': {
            attachment: 'top center',
            targetAttachment: 'bottom center'
        },
        'top-right': {
            attachment: 'top right',
            targetAttachment: 'bottom center',
            offset: '0 -28px'
        },
        'right-top': {
            attachment: 'top right',
            targetAttachment: 'middle left',
            offset: '28px 0'
        },
        'right': {
            attachment: 'middle right',
            targetAttachment: 'middle left'
        },
        'right-bottom': {
            attachment: 'bottom right',
            targetAttachment: 'middle left',
            offset: '-28px 0'
        },
        'bottom-right': {
            attachment: 'bottom right',
            targetAttachment: 'top center',
            offset: '0 -28px'
        },
        'bottom': {
            attachment: 'bottom center',
            targetAttachment: 'top center'
        },
        'bottom-left': {
            attachment: 'bottom left',
            targetAttachment: 'top center',
            offset: '0 28px'
        },
        'left-bottom': {
            attachment: 'bottom left',
            targetAttachment: 'middle right',
            offset: '-28px 0'
        },
        'left': {
            attachment: 'middle left',
            targetAttachment: 'middle right'
        },
        'left-top': {
            attachment: 'top left',
            targetAttachment: 'middle right',
            offset: '28px 0'
        }
    };

    var GhTourItemComponent = _emberComponent.default.extend({

        mediaQueries: (0, _inject.default)(),
        tour: (0, _inject.default)(),

        tagName: '',

        throbberId: null,
        target: null,
        throbberAttachment: 'middle center',
        popoverTriangleClass: 'top',
        isOpen: false,

        _elementId: null,
        _throbber: null,
        _throbberElementId: null,
        _throbberElementSelector: null,
        _popoverAttachment: null,
        _popoverTargetAttachment: null,
        _popoverOffset: null,

        isMobile: (0, _emberComputed.reads)('mediaQueries.isMobile'),
        isVisible: (0, _emberComputed.default)('isMobile', '_throbber', function () {
            var isMobile = this.get('isMobile');
            var hasThrobber = !(0, _emberUtils.isBlank)(this.get('_throbber'));

            return !isMobile && hasThrobber;
        }),

        init: function init() {
            this._super.apply(this, arguments);
            // this is a tagless component so we need to generate our own elementId
            this._elementId = instancesCounter++;
            this._throbberElementId = 'throbber-' + this._elementId;
            this._throbberElementSelector = '#throbber-' + this._elementId;

            this._handleOptOut = _emberRunloop.default.bind(this, this._remove);
            this._handleViewed = _emberRunloop.default.bind(this, this._removeIfViewed);

            this.get('tour').on('optOut', this._handleOptOut);
            this.get('tour').on('viewed', this._handleViewed);
        },
        didReceiveAttrs: function didReceiveAttrs() {
            var throbberId = this.get('throbberId');
            var throbber = this.get('tour').activeThrobber(throbberId);
            var triangleClass = this.get('popoverTriangleClass');
            var popoverPositions = triangleClassPositions[triangleClass];

            this._throbber = throbber;
            this._popoverAttachment = popoverPositions.attachment;
            this._popoverTargetAttachment = popoverPositions.targetAttachment;
            this._popoverOffset = popoverPositions.offset;
        },
        willDestroyElement: function willDestroyElement() {
            this.get('tour').off('optOut', this._handleOptOut);
            this.get('tour').off('viewed', this._handleViewed);
            this._super.apply(this, arguments);
        },
        _removeIfViewed: function _removeIfViewed(id) {
            if (id === this.get('throbberId')) {
                this._remove();
            }
        },
        _remove: function _remove() {
            this.set('_throbber', null);
        },
        _close: function _close() {
            this.set('isOpen', false);
        },


        actions: {
            open: function open() {
                this.set('isOpen', true);
            },
            close: function close() {
                this._close();
            },
            markAsViewed: function markAsViewed() {
                var throbberId = this.get('throbberId');
                this.get('tour').markThrobberAsViewed(throbberId);
                this.set('_throbber', null);
                this._close();
            },
            optOut: function optOut() {
                this.get('tour').optOut();
                this.set('_throbber', null);
                this._close();
            }
        }
    });

    GhTourItemComponent.reopenClass({
        positionalParams: ['throbberId']
    });

    exports.default = GhTourItemComponent;
});
define('ghost-admin/components/gh-trim-focus-input', ['exports', 'ghost-admin/components/gh-input'], function (exports, _ghInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    /**
     * This doesn't override the OneWayInput component because
     * we need finer control. It borrows
     * parts from both the OneWayInput component and Ember's default
     * input component
     */
    var TrimFocusInputComponent = _ghInput.default.extend({

        shouldFocus: true,

        focusOut: function focusOut(event) {
            this._trimInput(event.target.value);
        },
        _trimInput: function _trimInput(value) {
            if (value && typeof value.trim === 'function') {
                value = value.trim();
            }

            this._processNewValue(value);
        }
    });

    exports.default = TrimFocusInputComponent;
});
define('ghost-admin/components/gh-upgrade-notification', ['exports', 'ember-component', 'ember-service/inject', 'ember-computed'], function (exports, _emberComponent, _inject, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'section',

        classNames: ['gh-upgrade-notification'],

        upgradeNotification: (0, _inject.default)('upgrade-notification'),

        message: (0, _emberComputed.alias)('upgradeNotification.content')
    });
});
define('ghost-admin/components/gh-uploader', ['exports', 'ember-component', 'ember-object', 'ghost-admin/utils/ghost-paths', 'ember-service/inject', 'ember-runloop', 'ember-concurrency', 'ember-array/utils', 'ember-utils'], function (exports, _emberComponent, _emberObject, _ghostPaths, _inject, _emberRunloop, _emberConcurrency, _utils, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    // TODO: this is designed to be a more re-usable/composable upload component, it
    // should be able to replace the duplicated upload logic in:
    // - gh-image-uploader
    // - gh-file-uploader
    // - gh-koenig/cards/card-image
    // - gh-koenig/cards/card-markdown
    //
    // In order to support the above components we'll need to introduce an
    // "allowMultiple" attribute so that single-image uploads don't allow multiple
    // simultaneous uploads

    /**
     * Result from a file upload
     * @typedef {Object} UploadResult
     * @property {string} fileName - file name, eg "my-image.png"
     * @property {string} url - url relative to Ghost root,eg "/content/images/2017/05/my-image.png"
     */

    var UploadTracker = _emberObject.default.extend({
        file: null,
        total: 0,
        loaded: 0,

        init: function init() {
            this.total = this.file && this.file.size || 0;
        },
        update: function update(_ref) {
            var loaded = _ref.loaded,
                total = _ref.total;

            this.total = total;
            this.loaded = loaded;
        }
    });

    exports.default = _emberComponent.default.extend({
        tagName: '',

        ajax: (0, _inject.default)(),

        // Public attributes
        accept: '',
        extensions: '',
        files: null,
        paramName: 'uploadimage', // TODO: is this the best default?
        uploadUrl: null,

        // Interal attributes
        errors: null, // [{fileName: 'x', message: 'y'}, ...]
        totalSize: 0,
        uploadedSize: 0,
        uploadPercentage: 0,
        uploadUrls: null, // [{filename: 'x', url: 'y'}],

        // Private
        _defaultUploadUrl: '/uploads/',
        _files: null,
        _uploadTrackers: null,

        // Closure actions
        onCancel: function onCancel() {},
        onComplete: function onComplete() {},
        onFailed: function onFailed() {},
        onStart: function onStart() {},
        onUploadFail: function onUploadFail() {},
        onUploadSuccess: function onUploadSuccess() {},


        // Optional closure actions
        // validate(file) {}

        init: function init() {
            this._super.apply(this, arguments);
            this.set('errors', []);
            this.set('uploadUrls', []);
            this._uploadTrackers = [];
        },
        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            // set up any defaults
            if (!this.get('uploadUrl')) {
                this.set('uploadUrl', this._defaultUploadUrl);
            }

            // if we have new files, validate and start an upload
            var files = this.get('files');
            if (files && files !== this._files) {
                if (this.get('_uploadFiles.isRunning')) {
                    // eslint-disable-next-line
                    console.error('Adding new files whilst an upload is in progress is not supported.');
                }

                this._files = files;

                // we cancel early if any file fails client-side validation
                if (this._validate()) {
                    this.get('_uploadFiles').perform(files);
                }
            }
        },
        _validate: function _validate() {
            var files = this.get('files');
            var validate = this.get('validate') || this._defaultValidator.bind(this);
            var ok = [];
            var errors = [];

            // NOTE: for...of loop results in a transpilation that errors in Edge,
            // once we drop IE11 support we should be able to use native for...of
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var result = validate(file);
                if (result === true) {
                    ok.push(file);
                } else {
                    errors.push({ fileName: file.name, message: result });
                }
            }

            if ((0, _emberUtils.isEmpty)(errors)) {
                return true;
            }

            this.set('errors', errors);
            this.onFailed(errors);
            return false;
        },


        // we only check the file extension by default because IE doesn't always
        // expose the mime-type, we'll rely on the API for final validation
        _defaultValidator: function _defaultValidator(file) {
            var extensions = this.get('extensions');

            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2),
                extension = _$exec2[1];

            // if extensions is falsy exit early and accept all files


            if (!extensions) {
                return true;
            }

            if (!(0, _utils.isEmberArray)(extensions)) {
                extensions = extensions.split(',');
            }

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                var validExtensions = '.' + extensions.join(', .').toUpperCase();
                return 'The image type you uploaded is not supported. Please use ' + validExtensions;
            }

            return true;
        },


        _uploadFiles: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee(files) {
            var uploads, i;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            uploads = [];


                            this._reset();
                            this.onStart();

                            // NOTE: for...of loop results in a transpilation that errors in Edge,
                            // once we drop IE11 support we should be able to use native for...of
                            for (i = 0; i < files.length; i++) {
                                uploads.push(this.get('_uploadFile').perform(files[i]));
                            }

                            // populates this.errors and this.uploadUrls
                            _context.next = 6;
                            return (0, _emberConcurrency.all)(uploads);

                        case 6:

                            if (!(0, _emberUtils.isEmpty)(this.get('errors'))) {
                                this.onFailed(this.get('errors'));
                            }

                            this.onComplete(this.get('uploadUrls'));

                        case 8:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).drop(),

        _uploadFile: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2(file) {
            var _this = this;

            var ajax, formData, url, tracker, response, uploadUrl, result, message, _result;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            ajax = this.get('ajax');
                            formData = this._getFormData(file);
                            url = '' + (0, _ghostPaths.default)().apiRoot + this.get('uploadUrl');
                            tracker = new UploadTracker({ file: file });

                            this.get('_uploadTrackers').pushObject(tracker);

                            _context2.prev = 5;
                            _context2.next = 8;
                            return ajax.post(url, {
                                data: formData,
                                processData: false,
                                contentType: false,
                                dataType: 'text',
                                xhr: function xhr() {
                                    var xhr = new window.XMLHttpRequest();

                                    xhr.upload.addEventListener('progress', function (event) {
                                        (0, _emberRunloop.default)(function () {
                                            tracker.update(event);
                                            _this._updateProgress();
                                        });
                                    }, false);

                                    return xhr;
                                }
                            });

                        case 8:
                            response = _context2.sent;


                            // force tracker progress to 100% in case we didn't get a final event,
                            // eg. when using mirage
                            tracker.update({ loaded: file.size, total: file.size });
                            this._updateProgress();

                            // TODO: is it safe to assume we'll only get a url back?
                            uploadUrl = JSON.parse(response);
                            result = {
                                fileName: file.name,
                                url: uploadUrl
                            };


                            this.get('uploadUrls').pushObject(result);
                            this.onUploadSuccess(result);

                            return _context2.abrupt('return', true);

                        case 18:
                            _context2.prev = 18;
                            _context2.t0 = _context2['catch'](5);

                            // grab custom error message if present
                            message = _context2.t0.errors && _context2.t0.errors[0].message;

                            // fall back to EmberData/ember-ajax default message for error type

                            if (!message) {
                                message = _context2.t0.message;
                            }

                            _result = {
                                fileName: file.name,
                                message: _context2.t0.errors[0].message
                            };

                            // TODO: check for or expose known error types?

                            this.get('errors').pushObject(_result);
                            this.onUploadFail(_result);

                        case 25:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[5, 18]]);
        })),

        // NOTE: this is necessary because the API doesn't accept direct file uploads
        _getFormData: function _getFormData(file) {
            var formData = new FormData();
            formData.append(this.get('paramName'), file, file.name);
            return formData;
        },


        // TODO: this was needed because using CPs directly resulted in infrequent updates
        // - I think this was because updates were being wrapped up to save
        // computation but that hypothesis needs testing
        _updateProgress: function _updateProgress() {
            var trackers = this._uploadTrackers;

            var totalSize = trackers.reduce(function (total, tracker) {
                return total + tracker.get('total');
            }, 0);

            var uploadedSize = trackers.reduce(function (total, tracker) {
                return total + tracker.get('loaded');
            }, 0);

            this.set('totalSize', totalSize);
            this.set('uploadedSize', uploadedSize);

            if (totalSize === 0 || uploadedSize === 0) {
                return;
            }

            var uploadPercentage = Math.round(uploadedSize / totalSize * 100);
            this.set('uploadPercentage', uploadPercentage);
        },
        _reset: function _reset() {
            this.set('errors', []);
            this.set('totalSize', 0);
            this.set('uploadedSize', 0);
            this.set('uploadPercentage', 0);
            this.set('uploadUrls', []);
            this._uploadTrackers = [];
        },


        actions: {
            cancel: function cancel() {
                this._reset();
                this.onCancel();
            }
        }
    });
});
define('ghost-admin/components/gh-url-preview', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        classNames: 'ghost-url-preview',
        prefix: null,
        slug: null,

        config: (0, _inject.default)(),

        url: (0, _emberComputed.default)('slug', function () {
            // Get the blog URL and strip the scheme
            var blogUrl = this.get('config.blogUrl');
            // Remove `http[s]://`
            var noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3);

            // Get the prefix and slug values
            var prefix = this.get('prefix') ? this.get('prefix') + '/' : '';
            var slug = this.get('slug') ? this.get('slug') + '/' : '';

            // Join parts of the URL together with slashes
            var theUrl = noSchemeBlogUrl + '/' + prefix + slug;

            return theUrl;
        })
    });
});
define('ghost-admin/components/gh-user-active', ['exports', 'ember-component', 'ember', 'ember-computed', 'ember-service/inject', 'moment', 'ember-string'], function (exports, _emberComponent, _ember, _emberComputed, _inject, _moment, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Handlebars = _ember.default.Handlebars;
    exports.default = _emberComponent.default.extend({
        tagName: '',

        user: null,

        ghostPaths: (0, _inject.default)(),

        userDefault: (0, _emberComputed.default)('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-image-65d227a8129d14e33028afcad784158f.png';
        }),

        userImageBackground: (0, _emberComputed.default)('user.profileImage', 'userDefault', function () {
            var url = this.get('user.profileImage') || this.get('userDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        lastLoginUTC: (0, _emberComputed.default)('user.lastLoginUTC', function () {
            var lastLoginUTC = this.get('user.lastLoginUTC');

            return lastLoginUTC ? (0, _moment.default)(lastLoginUTC).fromNow() : '(Never)';
        })
    });
});
define('ghost-admin/components/gh-user-invited', ['exports', 'ember-component', 'ember-computed', 'moment', 'ember-service/inject', 'ember-ajax/errors'], function (exports, _emberComponent, _emberComputed, _moment, _inject, _errors) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: '',

        invite: null,
        isSending: false,

        notifications: (0, _inject.default)(),
        store: (0, _inject.default)(),

        createdAt: (0, _emberComputed.default)('invite.createdAtUTC', function () {
            var createdAtUTC = this.get('invite.createdAtUTC');

            return createdAtUTC ? (0, _moment.default)(createdAtUTC).fromNow() : '';
        }),

        expiresAt: (0, _emberComputed.default)('invite.expires', function () {
            var expires = this.get('invite.expires');

            return expires ? (0, _moment.default)(expires).fromNow() : '';
        }),

        isExpired: (0, _emberComputed.default)('invite.expires', function () {
            var expires = this.get('invite.expires');
            var now = new Date().valueOf();

            return expires < now;
        }),

        actions: {
            resend: function resend() {
                var _this = this;

                var invite = this.get('invite');
                var notifications = this.get('notifications');

                this.set('isSending', true);
                invite.resend().then(function (result) {
                    var notificationText = 'Invitation resent! (' + invite.get('email') + ')';

                    // the server deletes the old record and creates a new one when
                    // resending so we need to update the store accordingly
                    invite.unloadRecord();
                    _this.get('store').pushPayload('invite', result);

                    // If sending the invitation email fails, the API will still return a status of 201
                    // but the invite's status in the response object will be 'invited-pending'.
                    if (result.invites[0].status === 'invited-pending') {
                        notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.resend.not-sent' });
                    } else {
                        notifications.showNotification(notificationText, { key: 'invite.resend.success' });
                    }
                }).catch(function (error) {
                    notifications.showAPIError(error, { key: 'invite.resend' });
                }).finally(function () {
                    _this.set('isSending', false);
                });
            },
            revoke: function revoke() {
                var _this2 = this;

                var invite = this.get('invite');
                var email = invite.get('email');
                var notifications = this.get('notifications');

                // reload the invite to get the most up-to-date information
                invite.reload().then(function () {
                    invite.destroyRecord().then(function () {
                        var notificationText = 'Invitation revoked. (' + email + ')';
                        notifications.showNotification(notificationText, { key: 'invite.revoke.success' });
                    }).catch(function (error) {
                        notifications.showAPIError(error, { key: 'invite.revoke' });
                    });
                }).catch(function (error) {
                    if ((0, _errors.isNotFoundError)(error)) {
                        // if the invite no longer exists, then show a warning and reload the route
                        _this2.sendAction('reload');
                        notifications.showAlert('This invite has been revoked or a user has already accepted the invitation.', { type: 'error', delayed: true, key: 'invite.revoke.already-accepted' });
                    } else {
                        throw error;
                    }
                });
            }
        }
    });
});
define('ghost-admin/components/gh-validation-status-container', ['exports', 'ember-component', 'ghost-admin/mixins/validation-state', 'ember-computed'], function (exports, _emberComponent, _validationState, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend(_validationState.default, {
        classNameBindings: ['errorClass'],

        errorClass: (0, _emberComputed.default)('property', 'hasError', 'hasValidated.[]', function () {
            var hasValidated = this.get('hasValidated');
            var property = this.get('property');

            if (hasValidated && hasValidated.includes(property)) {
                return this.get('hasError') ? 'error' : 'success';
            } else {
                return '';
            }
        })
    });
});
define('ghost-admin/components/gh-view-title', ['exports', 'ember-component'], function (exports, _emberComponent) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'h2',
        classNames: ['view-title'],

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.sendAction('openMobileMenu');
            }
        }
    });
});
define("ghost-admin/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (exports, _illiquidModel) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _illiquidModel.default;
    }
  });
});
define('ghost-admin/components/infinity-loader', ['exports', 'ember-infinity/components/infinity-loader'], function (exports, _infinityLoader) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _infinityLoader.default;
});
define('ghost-admin/components/light-table', ['exports', 'ember-light-table/components/light-table'], function (exports, _lightTable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lightTable.default;
    }
  });
});
define('ghost-admin/components/light-table/cells/base', ['exports', 'ember-light-table/components/cells/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _base.default;
    }
  });
});
define('ghost-admin/components/light-table/columns/base', ['exports', 'ember-light-table/components/columns/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _base.default;
    }
  });
});
define('ghost-admin/components/liquid-append', ['exports', 'liquid-wormhole/components/liquid-append'], function (exports, _liquidAppend) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidAppend.default;
    }
  });
});
define("ghost-admin/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (exports, _liquidBind) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidBind.default;
    }
  });
});
define("ghost-admin/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (exports, _liquidChild) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidChild.default;
    }
  });
});
define("ghost-admin/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (exports, _liquidContainer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidContainer.default;
    }
  });
});
define('ghost-admin/components/liquid-destination', ['exports', 'liquid-wormhole/components/liquid-destination'], function (exports, _liquidDestination) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidDestination.default;
    }
  });
});
define("ghost-admin/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (exports, _liquidIf) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidIf.default;
    }
  });
});
define("ghost-admin/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (exports, _liquidMeasured) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.default;
    }
  });
  Object.defineProperty(exports, "measure", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.measure;
    }
  });
});
define("ghost-admin/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (exports, _liquidOutlet) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidOutlet.default;
    }
  });
});
define("ghost-admin/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (exports, _liquidSpacer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSpacer.default;
    }
  });
});
define('ghost-admin/components/liquid-sync', ['exports', 'liquid-fire/components/liquid-sync'], function (exports, _liquidSync) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidSync.default;
    }
  });
});
define('ghost-admin/components/liquid-tether', ['exports', 'liquid-tether/components/liquid-tether'], function (exports, _liquidTether) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidTether.default;
    }
  });
});
define("ghost-admin/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (exports, _liquidUnless) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidUnless.default;
    }
  });
});
define("ghost-admin/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (exports, _liquidVersions) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidVersions.default;
    }
  });
});
define('ghost-admin/components/liquid-wormhole', ['exports', 'liquid-wormhole/components/liquid-wormhole'], function (exports, _liquidWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
define('ghost-admin/components/lt-body', ['exports', 'ember-light-table/components/lt-body'], function (exports, _ltBody) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltBody.default;
    }
  });
});
define('ghost-admin/components/lt-column-resizer', ['exports', 'ember-light-table/components/lt-column-resizer'], function (exports, _ltColumnResizer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltColumnResizer.default;
    }
  });
});
define('ghost-admin/components/lt-foot', ['exports', 'ember-light-table/components/lt-foot'], function (exports, _ltFoot) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltFoot.default;
    }
  });
});
define('ghost-admin/components/lt-head', ['exports', 'ember-light-table/components/lt-head'], function (exports, _ltHead) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltHead.default;
    }
  });
});
define('ghost-admin/components/lt-infinity', ['exports', 'ember-light-table/components/lt-infinity'], function (exports, _ltInfinity) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltInfinity.default;
    }
  });
});
define('ghost-admin/components/lt-row', ['exports', 'ember-light-table/components/lt-row'], function (exports, _ltRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltRow.default;
    }
  });
});
define('ghost-admin/components/lt-scrollable', ['exports', 'ember-light-table/components/lt-scrollable'], function (exports, _ltScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltScrollable.default;
    }
  });
});
define('ghost-admin/components/lt-spanned-row', ['exports', 'ember-light-table/components/lt-spanned-row'], function (exports, _ltSpannedRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltSpannedRow.default;
    }
  });
});
define('ghost-admin/components/modals/base', ['exports', 'ember-component', 'ember-runloop', 'ember-invoke-action'], function (exports, _emberComponent, _emberRunloop, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberComponent.default.extend({
        tagName: 'section',
        classNames: 'modal-content',

        _previousKeymasterScope: null,

        _setupShortcuts: function _setupShortcuts() {
            var _this = this;

            (0, _emberRunloop.default)(function () {
                document.activeElement.blur();
            });
            this._previousKeymasterScope = key.getScope();

            key('enter', 'modal', function () {
                _this.send('confirm');
            });

            key('escape', 'modal', function () {
                _this.send('closeModal');
            });

            key.setScope('modal');
        },
        _removeShortcuts: function _removeShortcuts() {
            key.unbind('enter', 'modal');
            key.unbind('escape', 'modal');

            key.setScope(this._previousKeymasterScope);
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._setupShortcuts();
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this._removeShortcuts();
        },


        actions: {
            confirm: function confirm() {
                throw new Error('You must override the "confirm" action in your modal component');
            },
            closeModal: function closeModal() {
                (0, _emberInvokeAction.invokeAction)(this, 'closeModal');
            }
        }
    });
});
define('ghost-admin/components/modals/copy-html', ['exports', 'ghost-admin/components/modals/base', 'ember-computed'], function (exports, _base, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        generatedHtml: (0, _emberComputed.alias)('model')
    });
});
define('ghost-admin/components/modals/delete-all', ['exports', 'ghost-admin/components/modals/base', 'ember-service/inject', 'ember-concurrency'], function (exports, _base, _inject, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        store: (0, _inject.default)(),
        ajax: (0, _inject.default)(),

        _deleteAll: function _deleteAll() {
            var deleteUrl = this.get('ghostPaths.url').api('db');
            return this.get('ajax').del(deleteUrl);
        },
        _unloadData: function _unloadData() {
            this.get('store').unloadAll('post');
            this.get('store').unloadAll('tag');
        },
        _showSuccess: function _showSuccess() {
            this.get('notifications').showAlert('All content deleted from database.', { type: 'success', key: 'all-content.delete.success' });
        },
        _showFailure: function _showFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'all-content.delete' });
        },


        deleteAll: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return this._deleteAll();

                        case 3:
                            this._unloadData();
                            this._showSuccess();
                            _context.next = 10;
                            break;

                        case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](0);

                            this._showFailure(_context.t0);

                        case 10:
                            _context.prev = 10;

                            this.send('closeModal');
                            return _context.finish(10);

                        case 13:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 7, 10, 13]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteAll').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-post', ['exports', 'ghost-admin/components/modals/base', 'ember-service/inject', 'ember-computed', 'ember-concurrency'], function (exports, _base, _inject, _emberComputed, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        post: (0, _emberComputed.alias)('model.post'),
        onSuccess: (0, _emberComputed.alias)('model.onSuccess'),

        notifications: (0, _inject.default)(),
        routing: (0, _inject.default)('-routing'),

        _deletePost: function _deletePost() {
            var post = this.get('post');

            // definitely want to clear the data store and post of any unsaved,
            // client-generated tags
            post.updateTags();

            return post.destroyRecord();
        },
        _success: function _success() {
            // clear any previous error messages
            this.get('notifications').closeAlerts('post.delete');

            // trigger the success action
            if (this.get('onSuccess')) {
                this.get('onSuccess')();
            }
        },
        _failure: function _failure(error) {
            this.get('notifications').showAPIError(error, { key: 'post.delete.failed' });
        },


        deletePost: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return this._deletePost();

                        case 3:
                            this._success();
                            _context.next = 9;
                            break;

                        case 6:
                            _context.prev = 6;
                            _context.t0 = _context['catch'](0);

                            this._failure(_context.t0);

                        case 9:
                            _context.prev = 9;

                            this.send('closeModal');
                            return _context.finish(9);

                        case 12:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 6, 9, 12]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deletePost').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-subscriber', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        subscriber: (0, _emberComputed.alias)('model'),

        deleteSubscriber: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 2:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteSubscriber').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-tag', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        tag: (0, _emberComputed.alias)('model'),

        postInflection: (0, _emberComputed.default)('tag.count.posts', function () {
            return this.get('tag.count.posts') > 1 ? 'posts' : 'post';
        }),

        deleteTag: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteTag').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-theme', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        theme: (0, _emberComputed.alias)('model.theme'),
        download: (0, _emberComputed.alias)('model.download'),

        deleteTheme: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteTheme').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-user', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        user: (0, _emberComputed.alias)('model'),

        deleteUser: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteUser').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/import-subscribers', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ghost-admin/utils/ghost-paths', 'ember-invoke-action'], function (exports, _base, _emberComputed, _ghostPaths, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        labelText: 'Select or drag-and-drop a CSV File',

        response: null,
        closeDisabled: false,

        uploadUrl: (0, _emberComputed.default)(function () {
            return (0, _ghostPaths.default)().apiRoot + '/subscribers/csv/';
        }),

        actions: {
            uploadStarted: function uploadStarted() {
                this.set('closeDisabled', true);
            },
            uploadFinished: function uploadFinished() {
                this.set('closeDisabled', false);
            },
            uploadSuccess: function uploadSuccess(response) {
                this.set('response', response.meta.stats);
                // invoke the passed in confirm action
                (0, _emberInvokeAction.invokeAction)(this, 'confirm');
            },
            confirm: function confirm() {
                // noop - we don't want the enter key doing anything
            },
            closeModal: function closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super.apply(this, arguments);
                }
            }
        }
    });
});
define('ghost-admin/components/modals/invite-new-user', ['exports', 'ghost-admin/components/modals/base', 'rsvp', 'ghost-admin/mixins/validation-engine', 'ember-service/inject', 'ember-runloop', 'ember-array/utils', 'ember-concurrency'], function (exports, _base, _rsvp, _validationEngine, _inject, _emberRunloop, _utils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Promise = _rsvp.default.Promise;
    exports.default = _base.default.extend(_validationEngine.default, {
        classNames: 'modal-content invite-new-user',

        role: null,
        roles: null,
        authorRole: null,

        validationType: 'inviteUser',

        notifications: (0, _inject.default)(),
        store: (0, _inject.default)(),

        init: function init() {
            this._super.apply(this, arguments);

            // populate roles and set initial value for the dropdown
            _emberRunloop.default.schedule('afterRender', this, function () {
                var _this = this;

                this.get('store').query('role', { permissions: 'assign' }).then(function (roles) {
                    var authorRole = roles.findBy('name', 'Author');

                    _this.set('roles', roles);
                    _this.set('authorRole', authorRole);

                    if (!_this.get('role')) {
                        _this.set('role', authorRole);
                    }
                });
            });
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // TODO: this should not be needed, ValidationEngine acts as a
            // singleton and so it's errors and hasValidated state stick around
            this.get('errors').clear();
            this.set('hasValidated', (0, _utils.A)());
        },
        validate: function validate() {
            var _this2 = this;

            var email = this.get('email');

            // TODO: either the validator should check the email's existence or
            // the API should return an appropriate error when attempting to save
            return new Promise(function (resolve, reject) {
                return _this2._super().then(function () {
                    return _rsvp.default.hash({
                        users: _this2.get('store').findAll('user', { reload: true }),
                        invites: _this2.get('store').findAll('invite', { reload: true })
                    }).then(function (data) {
                        var existingUser = data.users.findBy('email', email);
                        var existingInvite = data.invites.findBy('email', email);

                        if (existingUser || existingInvite) {
                            _this2.get('errors').clear('email');
                            if (existingUser) {
                                _this2.get('errors').add('email', 'A user with that email address already exists.');
                            } else {
                                _this2.get('errors').add('email', 'A user with that email address was already invited.');
                            }

                            // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                            // properties as validated when validating an entire object
                            _this2.get('hasValidated').addObject('email');
                            reject();
                        } else {
                            resolve();
                        }
                    });
                }, function () {
                    // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                    // properties as validated when validating an entire object
                    _this2.get('hasValidated').addObject('email');
                    reject();
                });
            });
        },


        sendInvitation: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var email, role, notifications, notificationText, invite;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            email = this.get('email');
                            role = this.get('role');
                            notifications = this.get('notifications');
                            notificationText = 'Invitation sent! (' + email + ')';
                            invite = void 0;
                            _context.prev = 5;
                            _context.next = 8;
                            return this.validate();

                        case 8:

                            invite = this.get('store').createRecord('invite', {
                                email: email,
                                role: role
                            });

                            _context.next = 11;
                            return invite.save();

                        case 11:

                            // If sending the invitation email fails, the API will still return a status of 201
                            // but the invite's status in the response object will be 'invited-pending'.
                            if (invite.get('status') === 'pending') {
                                notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.send.failed' });
                            } else {
                                notifications.showNotification(notificationText, { key: 'invite.send.success' });
                            }

                            this.send('closeModal');
                            _context.next = 18;
                            break;

                        case 15:
                            _context.prev = 15;
                            _context.t0 = _context['catch'](5);

                            // validation will reject and cause this to be called with no error
                            if (_context.t0) {
                                invite.deleteRecord();
                                notifications.showAPIError(_context.t0, { key: 'invite.send' });
                                this.send('closeModal');
                            }

                        case 18:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[5, 15]]);
        })).drop(),

        actions: {
            setRole: function setRole(role) {
                this.set('role', role);
            },
            confirm: function confirm() {
                this.get('sendInvitation').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/leave-editor', ['exports', 'ghost-admin/components/modals/base', 'ember-invoke-action'], function (exports, _base, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        actions: {
            confirm: function confirm() {
                var _this = this;

                (0, _emberInvokeAction.invokeAction)(this, 'confirm').finally(function () {
                    _this.send('closeModal');
                });
            }
        }
    });
});
define('ghost-admin/components/modals/markdown-help', ['exports', 'ghost-admin/components/modals/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _base.default.extend({});
});
define('ghost-admin/components/modals/new-subscriber', ['exports', 'ghost-admin/components/modals/base', 'ember-array/utils', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _base, _utils, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _base.default.extend({

        addSubscriber: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var _error$errors, firstError, message;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return this.get('confirm')();

                        case 3:
                            this.send('closeModal');
                            _context.next = 17;
                            break;

                        case 6:
                            _context.prev = 6;
                            _context.t0 = _context['catch'](0);

                            if (!(_context.t0 && (0, _errors.isInvalidError)(_context.t0))) {
                                _context.next = 15;
                                break;
                            }

                            _error$errors = _slicedToArray(_context.t0.errors, 1), firstError = _error$errors[0];
                            message = firstError.message;

                            if (!(message && message.match(/email/i))) {
                                _context.next = 15;
                                break;
                            }

                            this.get('model.errors').add('email', message);
                            this.get('model.hasValidated').pushObject('email');
                            return _context.abrupt('return');

                        case 15:
                            if (!_context.t0) {
                                _context.next = 17;
                                break;
                            }

                            throw _context.t0;

                        case 17:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 6]]);
        })).drop(),

        actions: {
            updateEmail: function updateEmail(newEmail) {
                this.set('model.email', newEmail);
                this.set('model.hasValidated', (0, _utils.A)());
                this.get('model.errors').clear();
            },
            confirm: function confirm() {
                this.get('addSubscriber').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/re-authenticate', ['exports', 'jquery', 'ghost-admin/components/modals/base', 'ghost-admin/mixins/validation-engine', 'ember-computed', 'ember-service/inject', 'ember-string', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _jquery, _base, _validationEngine, _emberComputed, _inject, _emberString, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend(_validationEngine.default, {
        validationType: 'signin',

        authenticationError: null,

        config: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        torii: (0, _inject.default)(),

        identification: (0, _emberComputed.default)('session.user.email', function () {
            return this.get('session.user.email');
        }),

        _authenticate: function _authenticate() {
            var _this = this;

            var session = this.get('session');
            var authStrategy = 'authenticator:oauth2';
            var identification = this.get('identification');
            var password = this.get('password');

            session.set('skipAuthSuccessHandler', true);

            this.toggleProperty('submitting');

            return session.authenticate(authStrategy, identification, password).finally(function () {
                _this.toggleProperty('submitting');
                session.set('skipAuthSuccessHandler', undefined);
            });
        },
        _passwordConfirm: function _passwordConfirm() {
            var _this2 = this;

            // Manually trigger events for input fields, ensuring legacy compatibility with
            // browsers and password managers that don't send proper events on autofill
            (0, _jquery.default)('#login').find('input').trigger('change');

            this.set('authenticationError', null);

            return this.validate({ property: 'signin' }).then(function () {
                return _this2._authenticate().then(function () {
                    _this2.get('notifications').closeAlerts();
                    _this2.send('closeModal');
                    return true;
                }).catch(function (error) {
                    if (error && error.errors) {
                        error.errors.forEach(function (err) {
                            if ((0, _ajax.isVersionMismatchError)(err)) {
                                return _this2.get('notifications').showAPIError(error);
                            }
                            err.message = (0, _emberString.htmlSafe)(err.context || err.message);
                        });

                        _this2.get('errors').add('password', 'Incorrect password');
                        _this2.get('hasValidated').pushObject('password');
                        _this2.set('authenticationError', error.errors[0].message);
                    }
                });
            }, function () {
                _this2.get('hasValidated').pushObject('password');
                return false;
            });
        },
        _oauthConfirm: function _oauthConfirm() {
            var _this3 = this;

            // TODO: remove duplication between signin/signup/re-auth
            var authStrategy = 'authenticator:oauth2-ghost';

            this.toggleProperty('submitting');
            this.set('authenticationError', '');

            return this.get('torii').open('ghost-oauth2', { type: 'signin' }).then(function (authentication) {
                _this3.get('session').set('skipAuthSuccessHandler', true);

                _this3.get('session').authenticate(authStrategy, authentication).finally(function () {
                    _this3.get('session').set('skipAuthSuccessHandler', undefined);

                    _this3.toggleProperty('submitting');
                    _this3.get('notifications').closeAlerts();
                    _this3.send('closeModal');
                });
            }).catch(function () {
                _this3.toggleProperty('submitting');
                _this3.set('authenticationError', 'Authentication with Ghost.org denied or failed');
            });
        },


        reauthenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.get('config.ghostOAuth')) {
                                _context.next = 6;
                                break;
                            }

                            _context.next = 3;
                            return this._oauthConfirm();

                        case 3:
                            return _context.abrupt('return', _context.sent);

                        case 6:
                            _context.next = 8;
                            return this._passwordConfirm();

                        case 8:
                            return _context.abrupt('return', _context.sent);

                        case 9:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('reauthenticate').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/suspend-user', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        user: (0, _emberComputed.alias)('model'),

        suspendUser: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                return this.get('suspendUser').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/theme-warnings', ['exports', 'ghost-admin/components/modals/base', 'ember-computed'], function (exports, _base, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        title: (0, _emberComputed.reads)('model.title'),
        message: (0, _emberComputed.reads)('model.message'),
        warnings: (0, _emberComputed.reads)('model.warnings'),
        errors: (0, _emberComputed.reads)('model.errors'),
        fatalErrors: (0, _emberComputed.reads)('model.fatalErrors'),

        'data-test-theme-warnings-modal': true
    });
});
define('ghost-admin/components/modals/transfer-owner', ['exports', 'ghost-admin/components/modals/base', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        user: null,

        transferOwnership: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('transferOwnership').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/unsuspend-user', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _base, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({

        user: (0, _emberComputed.alias)('model'),

        unsuspendUser: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                        case 3:
                            _context.prev = 3;

                            this.send('closeModal');
                            return _context.finish(3);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                return this.get('unsuspendUser').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/upload-image', ['exports', 'ghost-admin/components/modals/base', 'ghost-admin/utils/caja-sanitizers', 'ember-computed', 'ember-service/inject', 'ember-utils', 'ember-concurrency'], function (exports, _base, _cajaSanitizers, _emberComputed, _inject, _emberUtils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        model: null,

        url: '',
        newUrl: '',

        config: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        image: (0, _emberComputed.default)('model.model', 'model.imageProperty', {
            get: function get() {
                var imageProperty = this.get('model.imageProperty');

                return this.get('model.model.' + imageProperty);
            },
            set: function set(key, value) {
                var model = this.get('model.model');
                var imageProperty = this.get('model.imageProperty');

                return model.set(imageProperty, value);
            }
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            var image = this.get('image');
            this.set('url', image);
            this.set('newUrl', image);
        },


        // TODO: should validation be handled in the gh-image-uploader component?
        //  pro - consistency everywhere, simplification here
        //  con - difficult if the "save" is happening externally as it does here
        //
        //  maybe it should be handled at the model level?
        //      - automatically present everywhere
        //      - file uploads should always result in valid urls so it should only
        //        affect the url input form
        keyDown: function keyDown() {
            this._setErrorState(false);
        },
        _setErrorState: function _setErrorState(state) {
            if (state) {
                this.$('.url').addClass('error');
            } else {
                this.$('.url').removeClass('error');
            }
        },
        _validateUrl: function _validateUrl(url) {
            if (!(0, _emberUtils.isEmpty)(url) && !_cajaSanitizers.default.url(url)) {
                this._setErrorState(true);
                return { message: 'Image URI is not valid' };
            }

            return true;
        },

        // end validation

        uploadImage: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var model, newUrl, result, notifications;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            model = this.get('model.model');
                            newUrl = this.get('newUrl');
                            result = this._validateUrl(newUrl);
                            notifications = this.get('notifications');

                            if (!(result === true)) {
                                _context.next = 17;
                                break;
                            }

                            this.set('image', newUrl);

                            _context.prev = 6;
                            _context.next = 9;
                            return model.save();

                        case 9:
                            _context.next = 14;
                            break;

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context['catch'](6);

                            notifications.showAPIError(_context.t0, { key: 'image.upload' });

                        case 14:
                            _context.prev = 14;

                            this.send('closeModal');
                            return _context.finish(14);

                        case 17:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[6, 11, 14, 17]]);
        })).drop(),

        actions: {
            fileUploaded: function fileUploaded(url) {
                this.set('url', url);
                this.set('newUrl', url);
            },
            removeImage: function removeImage() {
                this.set('url', '');
                this.set('newUrl', '');
            },
            confirm: function confirm() {
                this.get('uploadImage').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/upload-theme', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-metal/get', 'ghost-admin/utils/ghost-paths', 'ember-service/inject', 'ember-runloop', 'ghost-admin/services/ajax', 'ember-invoke-action'], function (exports, _base, _emberComputed, _get, _ghostPaths, _inject, _emberRunloop, _ajax, _emberInvokeAction) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _base.default.extend({

        accept: ['application/zip', 'application/x-zip-compressed'],
        extensions: ['zip'],
        themes: null,
        closeDisabled: false,
        file: null,
        theme: false,
        displayOverwriteWarning: false,

        eventBus: (0, _inject.default)(),
        store: (0, _inject.default)(),

        hideUploader: (0, _emberComputed.or)('theme', 'displayOverwriteWarning'),

        uploadUrl: (0, _emberComputed.default)(function () {
            return (0, _ghostPaths.default)().apiRoot + '/themes/upload/';
        }),

        themeName: (0, _emberComputed.default)('theme.{name,package.name}', function () {
            var themePackage = this.get('theme.package');
            var name = this.get('theme.name');

            return themePackage ? themePackage.name + ' - ' + themePackage.version : name;
        }),

        currentThemeNames: (0, _emberComputed.mapBy)('model.themes', 'name'),

        fileThemeName: (0, _emberComputed.default)('file', function () {
            var file = this.get('file');
            return file.name.replace(/\.zip$/, '');
        }),

        canActivateTheme: (0, _emberComputed.default)('theme', function () {
            var theme = this.get('theme');
            return theme && !theme.get('active');
        }),

        actions: {
            validateTheme: function validateTheme(file) {
                var themeName = file.name.replace(/\.zip$/, '').replace(/[^\w@.]/gi, '-').toLowerCase();

                var currentThemeNames = this.get('currentThemeNames');

                this.set('file', file);

                var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                    _$exec2 = _slicedToArray(_$exec, 2),
                    extension = _$exec2[1];

                var extensions = this.get('extensions');

                if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                    return new _ajax.UnsupportedMediaTypeError();
                }

                if (file.name.match(/^casper\.zip$/i)) {
                    return { errors: [{ message: 'Sorry, the default Casper theme cannot be overwritten.<br>Please rename your zip file and try again.' }] };
                }

                if (!this._allowOverwrite && currentThemeNames.includes(themeName)) {
                    this.set('displayOverwriteWarning', true);
                    return false;
                }

                return true;
            },
            confirmOverwrite: function confirmOverwrite() {
                this._allowOverwrite = true;
                this.set('displayOverwriteWarning', false);

                // we need to schedule afterRender so that the upload component is
                // displayed again in order to subscribe/respond to the event bus
                _emberRunloop.default.schedule('afterRender', this, function () {
                    this.get('eventBus').publish('themeUploader:upload', this.get('file'));
                });
            },
            uploadStarted: function uploadStarted() {
                this.set('closeDisabled', true);
            },
            uploadFinished: function uploadFinished() {
                this.set('closeDisabled', false);
            },
            uploadSuccess: function uploadSuccess(response) {
                this.get('store').pushPayload(response);

                var theme = this.get('store').peekRecord('theme', response.themes[0].name);

                this.set('theme', theme);

                if ((0, _get.default)(theme, 'warnings.length') > 0) {
                    this.set('validationWarnings', (0, _get.default)(theme, 'warnings'));
                }

                // Ghost differentiates between errors and fatal errors
                // You can't activate a theme with fatal errors, but with errors.
                if ((0, _get.default)(theme, 'errors.length') > 0) {
                    this.set('validationErrors', (0, _get.default)(theme, 'errors'));
                }

                this.set('hasWarningsOrErrors', this.get('validationErrors').length || this.get('validationWarnings').length);

                // invoke the passed in confirm action
                (0, _emberInvokeAction.invokeAction)(this, 'model.uploadSuccess', theme);
            },
            uploadFailed: function uploadFailed(error) {
                if ((0, _ajax.isThemeValidationError)(error)) {
                    var errors = error.errors[0].errorDetails;
                    var fatalErrors = [];
                    var normalErrors = [];

                    // to have a proper grouping of fatal errors and none fatal, we need to check
                    // our errors for the fatal property
                    if (errors.length > 0) {
                        for (var i = 0; i < errors.length; i++) {
                            if (errors[i].fatal) {
                                fatalErrors.push(errors[i]);
                            } else {
                                normalErrors.push(errors[i]);
                            }
                        }
                    }

                    this.set('fatalValidationErrors', fatalErrors);
                    this.set('validationErrors', normalErrors);
                }
            },
            confirm: function confirm() {
                // noop - we don't want the enter key doing anything
            },
            activate: function activate() {
                (0, _emberInvokeAction.invokeAction)(this, 'model.activate', this.get('theme'));
                (0, _emberInvokeAction.invokeAction)(this, 'closeModal');
            },
            closeModal: function closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super.apply(this, arguments);
                }
            },
            reset: function reset() {
                this.set('validationWarnings', []);
                this.set('validationErrors', []);
                this.set('fatalValidationErrors', []);
                this.set('hasWarningsOrErrors', false);
            }
        }
    });
});
define('ghost-admin/components/one-way-checkbox', ['exports', 'ember-one-way-controls/components/one-way-checkbox'], function (exports, _oneWayCheckbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayCheckbox.default;
    }
  });
});
define('ghost-admin/components/one-way-color', ['exports', 'ember-one-way-controls/components/one-way-color'], function (exports, _oneWayColor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayColor.default;
    }
  });
});
define('ghost-admin/components/one-way-date', ['exports', 'ember-one-way-controls/components/one-way-date'], function (exports, _oneWayDate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayDate.default;
    }
  });
});
define('ghost-admin/components/one-way-datetime-local', ['exports', 'ember-one-way-controls/components/one-way-datetime-local'], function (exports, _oneWayDatetimeLocal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayDatetimeLocal.default;
    }
  });
});
define('ghost-admin/components/one-way-email', ['exports', 'ember-one-way-controls/components/one-way-email'], function (exports, _oneWayEmail) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayEmail.default;
    }
  });
});
define('ghost-admin/components/one-way-file', ['exports', 'ember-one-way-controls/components/one-way-file'], function (exports, _oneWayFile) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayFile.default;
    }
  });
});
define('ghost-admin/components/one-way-hidden', ['exports', 'ember-one-way-controls/components/one-way-hidden'], function (exports, _oneWayHidden) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayHidden.default;
    }
  });
});
define('ghost-admin/components/one-way-input', ['exports', 'ember-one-way-controls/components/one-way-input'], function (exports, _oneWayInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayInput.default;
    }
  });
});
define('ghost-admin/components/one-way-month', ['exports', 'ember-one-way-controls/components/one-way-month'], function (exports, _oneWayMonth) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayMonth.default;
    }
  });
});
define('ghost-admin/components/one-way-number', ['exports', 'ember-one-way-controls/components/one-way-number'], function (exports, _oneWayNumber) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayNumber.default;
    }
  });
});
define('ghost-admin/components/one-way-password', ['exports', 'ember-one-way-controls/components/one-way-password'], function (exports, _oneWayPassword) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayPassword.default;
    }
  });
});
define('ghost-admin/components/one-way-radio', ['exports', 'ember-one-way-controls/components/one-way-radio'], function (exports, _oneWayRadio) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayRadio.default;
    }
  });
});
define('ghost-admin/components/one-way-range', ['exports', 'ember-one-way-controls/components/one-way-range'], function (exports, _oneWayRange) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayRange.default;
    }
  });
});
define('ghost-admin/components/one-way-search', ['exports', 'ember-one-way-controls/components/one-way-search'], function (exports, _oneWaySearch) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWaySearch.default;
    }
  });
});
define('ghost-admin/components/one-way-select', ['exports', 'ember-one-way-controls/components/one-way-select'], function (exports, _oneWaySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWaySelect.default;
    }
  });
});
define('ghost-admin/components/one-way-select/option', ['exports', 'ember-one-way-controls/components/one-way-select/option'], function (exports, _option) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _option.default;
    }
  });
});
define('ghost-admin/components/one-way-tel', ['exports', 'ember-one-way-controls/components/one-way-tel'], function (exports, _oneWayTel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayTel.default;
    }
  });
});
define('ghost-admin/components/one-way-text', ['exports', 'ember-one-way-controls/components/one-way-text'], function (exports, _oneWayText) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayText.default;
    }
  });
});
define('ghost-admin/components/one-way-textarea', ['exports', 'ember-one-way-controls/components/one-way-textarea'], function (exports, _oneWayTextarea) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayTextarea.default;
    }
  });
});
define('ghost-admin/components/one-way-time', ['exports', 'ember-one-way-controls/components/one-way-time'], function (exports, _oneWayTime) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayTime.default;
    }
  });
});
define('ghost-admin/components/one-way-url', ['exports', 'ember-one-way-controls/components/one-way-url'], function (exports, _oneWayUrl) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayUrl.default;
    }
  });
});
define('ghost-admin/components/one-way-week', ['exports', 'ember-one-way-controls/components/one-way-week'], function (exports, _oneWayWeek) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWayWeek.default;
    }
  });
});
define('ghost-admin/components/power-calendar-multiple', ['exports', 'ember-power-calendar/components/power-calendar-multiple'], function (exports, _powerCalendarMultiple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendarMultiple.default;
    }
  });
});
define('ghost-admin/components/power-calendar-multiple/days', ['exports', 'ember-power-calendar/components/power-calendar-multiple/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar-range', ['exports', 'ember-power-calendar/components/power-calendar-range'], function (exports, _powerCalendarRange) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendarRange.default;
    }
  });
});
define('ghost-admin/components/power-calendar-range/days', ['exports', 'ember-power-calendar/components/power-calendar-range/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar', ['exports', 'ember-power-calendar/components/power-calendar'], function (exports, _powerCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
define('ghost-admin/components/power-calendar/days', ['exports', 'ember-power-calendar/components/power-calendar/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar/nav', ['exports', 'ember-power-calendar/components/power-calendar/nav'], function (exports, _nav) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _nav.default;
    }
  });
});
define('ghost-admin/components/power-datepicker', ['exports', 'ember-power-datepicker/components/power-datepicker'], function (exports, _powerDatepicker) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerDatepicker.default;
    }
  });
});
define('ghost-admin/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _powerSelectMultiple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectMultiple.default;
    }
  });
});
define('ghost-admin/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
define('ghost-admin/components/power-select-vertical-collection-options', ['exports', 'ember-power-select/components/power-select/options', 'ghost-admin/templates/components/power-select-vertical-collection-options'], function (exports, _options, _powerSelectVerticalCollectionOptions) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _options.default.extend({
        layout: _powerSelectVerticalCollectionOptions.default
    });
});
define('ghost-admin/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _powerSelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelect.default;
    }
  });
});
define('ghost-admin/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _beforeOptions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _beforeOptions.default;
    }
  });
});
define('ghost-admin/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _options) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _options.default;
    }
  });
});
define('ghost-admin/components/power-select/placeholder', ['exports', 'ember-power-select/components/power-select/placeholder'], function (exports, _placeholder) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _placeholder.default;
    }
  });
});
define('ghost-admin/components/power-select/power-select-group', ['exports', 'ember-power-select/components/power-select/power-select-group'], function (exports, _powerSelectGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectGroup.default;
    }
  });
});
define('ghost-admin/components/power-select/search-message', ['exports', 'ember-power-select/components/power-select/search-message'], function (exports, _searchMessage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _searchMessage.default;
    }
  });
});
define('ghost-admin/components/power-select/trigger', ['exports', 'ghost-admin/templates/components/power-select/trigger', 'ember-power-select/components/power-select/trigger'], function (exports, _trigger, _trigger2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _trigger2.default.extend({
        layout: _trigger.default
    });
});
define('ghost-admin/components/resize-detector', ['exports', 'ember-element-resize-detector/components/resize-detector'], function (exports, _resizeDetector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _resizeDetector.default;
    }
  });
});
define('ghost-admin/components/scroll-content-element', ['exports', 'ember-scrollable/components/scroll-content-element'], function (exports, _scrollContentElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollContentElement.default;
    }
  });
});
define('ghost-admin/components/sortable-group', ['exports', 'ember-sortable/components/sortable-group'], function (exports, _sortableGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _sortableGroup.default;
});
define('ghost-admin/components/sortable-item', ['exports', 'ember-sortable/components/sortable-item'], function (exports, _sortableItem) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _sortableItem.default;
});
define('ghost-admin/components/torii-iframe-placeholder', ['exports', 'torii/components/torii-iframe-placeholder'], function (exports, _toriiIframePlaceholder) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _toriiIframePlaceholder.default;
});
define('ghost-admin/components/vertical-collection', ['exports', 'vertical-collection/components/vertical-collection/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
define('ghost-admin/components/x-file-input', ['exports', 'emberx-file-input/components/x-file-input'], function (exports, _xFileInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _xFileInput.default;
    }
  });
});
define('ghost-admin/controllers/about', ['exports', 'ember-controller', 'ember-computed'], function (exports, _emberController, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        updateNotificationCount: 0,

        actions: {
            updateNotificationChange: function updateNotificationChange(count) {
                this.set('updateNotificationCount', count);
            }
        },

        copyrightYear: (0, _emberComputed.default)(function () {
            var date = new Date();
            return date.getFullYear();
        })
    });
});
define('ghost-admin/controllers/application', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject'], function (exports, _emberController, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        dropdown: (0, _inject.default)(),
        session: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        showNavMenu: (0, _emberComputed.default)('currentPath', 'session.isAuthenticated', 'session.user.isFulfilled', function () {
            // we need to defer showing the navigation menu until the session.user
            // promise has fulfilled so that gh-user-can-admin has the correct data
            if (!this.get('session.isAuthenticated') || !this.get('session.user.isFulfilled')) {
                return false;
            }

            return (this.get('currentPath') !== 'error404' || this.get('session.isAuthenticated')) && !this.get('currentPath').match(/(signin|signup|setup|reset)/);
        }),

        topNotificationCount: 0,
        showMobileMenu: false,
        showSettingsMenu: false,
        showMarkdownHelpModal: false,

        autoNav: false,
        autoNavOpen: (0, _emberComputed.default)('autoNav', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                if (this.get('autoNav')) {
                    return value;
                }
                return false;
            }
        }),

        actions: {
            topNotificationChange: function topNotificationChange(count) {
                this.set('topNotificationCount', count);
            },
            toggleAutoNav: function toggleAutoNav() {
                this.toggleProperty('autoNav');
            },
            openAutoNav: function openAutoNav() {
                this.set('autoNavOpen', true);
            },
            closeAutoNav: function closeAutoNav() {
                if (this.get('autoNavOpen')) {
                    this.get('dropdown').closeDropdowns();
                }
                this.set('autoNavOpen', false);
            },
            closeMobileMenu: function closeMobileMenu() {
                this.set('showMobileMenu', false);
            }
        }
    });
});
define('ghost-admin/controllers/editor/edit', ['exports', 'ember-controller', 'ghost-admin/mixins/editor-base-controller'], function (exports, _emberController, _editorBaseController) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberController.default.extend(_editorBaseController.default);
});
define('ghost-admin/controllers/editor/new', ['exports', 'ember-controller', 'ghost-admin/mixins/editor-base-controller'], function (exports, _emberController, _editorBaseController) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberController.default.extend(_editorBaseController.default, {});
});
define('ghost-admin/controllers/error', ['exports', 'ember-controller', 'ember-computed'], function (exports, _emberController, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        stack: false,

        code: (0, _emberComputed.default)('content.status', function () {
            return this.get('content.status') > 200 ? this.get('content.status') : 500;
        }),

        message: (0, _emberComputed.default)('content.statusText', function () {
            if (this.get('code') === 404) {
                return 'Page not found';
            }

            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';
        })
    });
});
define('ghost-admin/controllers/posts-loading', ['exports', 'ember-controller', 'ember-controller/inject', 'ember-service/inject', 'ember-computed'], function (exports, _emberController, _inject, _inject2, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        postsController: (0, _inject.default)('posts'),
        session: (0, _inject2.default)(),

        availableTypes: (0, _emberComputed.readOnly)('postsController.availableTypes'),
        selectedType: (0, _emberComputed.readOnly)('postsController.selectedType'),
        availableTags: (0, _emberComputed.readOnly)('postsController.availableTags'),
        selectedTag: (0, _emberComputed.readOnly)('postsController.selectedTag'),
        availableAuthors: (0, _emberComputed.readOnly)('postsController.availableAuthors'),
        selectedAuthor: (0, _emberComputed.readOnly)('postsController.selectedAuthor'),
        availableOrders: (0, _emberComputed.readOnly)('postsController.availableOrders'),
        selectedOrder: (0, _emberComputed.readOnly)('postsController.selectedOrder')

    });
});
define('ghost-admin/controllers/posts', ['exports', 'ember-controller', 'ember-computed', 'ember-metal/get', 'ember-service/inject'], function (exports, _emberController, _emberComputed, _get, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        session: (0, _inject.default)(),
        store: (0, _inject.default)(),

        queryParams: ['type', 'author', 'tag', 'order'],
        type: null,
        author: null,
        tag: null,
        order: null,

        _hasLoadedTags: false,
        _hasLoadedAuthors: false,

        availableTypes: [{
            name: 'All posts',
            value: null
        }, {
            name: 'Draft posts',
            value: 'draft'
        }, {
            name: 'Published posts',
            value: 'published'
        }, {
            name: 'Scheduled posts',
            value: 'scheduled'
        }, {
            name: 'Pages',
            value: 'page'
        }],

        availableOrders: [{
            name: 'Newest',
            value: null
        }, {
            name: 'Oldest',
            value: 'published_at asc'
        }],

        showingAll: (0, _emberComputed.default)('type', 'author', 'tag', function () {
            var _getProperties = this.getProperties(['type', 'author', 'tag']),
                type = _getProperties.type,
                author = _getProperties.author,
                tag = _getProperties.tag;

            return !type && !author && !tag;
        }),

        selectedType: (0, _emberComputed.default)('type', function () {
            var types = this.get('availableTypes');
            return types.findBy('value', this.get('type'));
        }),

        selectedOrder: (0, _emberComputed.default)('order', function () {
            var orders = this.get('availableOrders');
            return orders.findBy('value', this.get('order'));
        }),

        _availableTags: (0, _emberComputed.default)(function () {
            return this.get('store').peekAll('tag');
        }),

        availableTags: (0, _emberComputed.default)('_availableTags.[]', function () {
            var tags = this.get('_availableTags').filter(function (tag) {
                return tag.get('id') !== null;
            });
            var options = tags.toArray();

            options.unshiftObject({ name: 'All tags', slug: null });

            return options;
        }),

        selectedTag: (0, _emberComputed.default)('tag', '_availableTags.[]', function () {
            var tag = this.get('tag');
            var tags = this.get('availableTags');

            return tags.findBy('slug', tag);
        }),

        _availableAuthors: (0, _emberComputed.default)(function () {
            return this.get('store').peekAll('user');
        }),

        availableAuthors: (0, _emberComputed.default)('_availableAuthors.[]', function () {
            var authors = this.get('_availableAuthors');
            var options = authors.toArray();

            options.unshiftObject({ name: 'All authors', slug: null });

            return options;
        }),

        selectedAuthor: (0, _emberComputed.default)('author', 'availableAuthors.[]', function () {
            var author = this.get('author');
            var authors = this.get('availableAuthors');

            return authors.findBy('slug', author);
        }),

        actions: {
            changeType: function changeType(type) {
                this.set('type', (0, _get.default)(type, 'value'));
            },
            changeAuthor: function changeAuthor(author) {
                this.set('author', (0, _get.default)(author, 'slug'));
            },
            changeTag: function changeTag(tag) {
                this.set('tag', (0, _get.default)(tag, 'slug'));
            },
            changeOrder: function changeOrder(order) {
                this.set('order', (0, _get.default)(order, 'value'));
            },
            openEditor: function openEditor(post) {
                this.transitionToRoute('editor.edit', post.get('id'));
            }
        }
    });
});
define('ghost-admin/controllers/reset', ['exports', 'ember-controller', 'ghost-admin/mixins/validation-engine', 'ember-computed', 'ember-service/inject', 'ember-concurrency'], function (exports, _emberController, _validationEngine, _emberComputed, _inject, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend(_validationEngine.default, {
        newPassword: '',
        ne2Password: '',
        token: '',
        flowErrors: '',

        validationType: 'reset',

        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        ajax: (0, _inject.default)(),

        email: (0, _emberComputed.default)('token', function () {
            // The token base64 encodes the email (and some other stuff),
            // each section is divided by a '|'. Email comes second.
            return atob(this.get('token')).split('|')[1];
        }),

        // Used to clear sensitive information
        clearData: function clearData() {
            this.setProperties({
                newPassword: '',
                ne2Password: '',
                token: ''
            });
        },


        resetPassword: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var credentials, authUrl, resp;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            credentials = this.getProperties('newPassword', 'ne2Password', 'token');
                            authUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');


                            this.set('flowErrors', '');
                            this.get('hasValidated').addObjects(['newPassword', 'ne2Password']);

                            _context.prev = 4;
                            _context.next = 7;
                            return this.validate();

                        case 7:
                            _context.prev = 7;
                            _context.next = 10;
                            return this.get('ajax').put(authUrl, {
                                data: {
                                    passwordreset: [credentials]
                                }
                            });

                        case 10:
                            resp = _context.sent;

                            this.get('notifications').showAlert(resp.passwordreset[0].message, { type: 'warn', delayed: true, key: 'password.reset' });
                            this.get('session').authenticate('authenticator:oauth2', this.get('email'), credentials.newPassword);
                            return _context.abrupt('return', true);

                        case 16:
                            _context.prev = 16;
                            _context.t0 = _context['catch'](7);

                            this.get('notifications').showAPIError(_context.t0, { key: 'password.reset' });

                        case 19:
                            _context.next = 27;
                            break;

                        case 21:
                            _context.prev = 21;
                            _context.t1 = _context['catch'](4);

                            if (this.get('errors.newPassword')) {
                                this.set('flowErrors', this.get('errors.newPassword')[0].message);
                            }

                            if (this.get('errors.ne2Password')) {
                                this.set('flowErrors', this.get('errors.ne2Password')[0].message);
                            }

                            if (!(_context.t1 && this.get('errors.length') === 0)) {
                                _context.next = 27;
                                break;
                            }

                            throw _context.t1;

                        case 27:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[4, 21], [7, 16]]);
        })).drop(),

        actions: {
            submit: function submit() {
                return this.get('resetPassword').perform();
            }
        }
    });
});
define('ghost-admin/controllers/settings/apps/amp', ['exports', 'ember-controller', 'ember-service/inject', 'ember-computed', 'ember-concurrency'], function (exports, _emberController, _inject, _emberComputed, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        notifications: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        model: (0, _emberComputed.alias)('settings.amp'),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var amp, settings;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            amp = this.get('model');
                            settings = this.get('settings');


                            settings.set('amp', amp);

                            _context.prev = 3;
                            _context.next = 6;
                            return settings.save();

                        case 6:
                            return _context.abrupt('return', _context.sent);

                        case 9:
                            _context.prev = 9;
                            _context.t0 = _context['catch'](3);

                            this.get('notifications').showAPIError(_context.t0);
                            throw _context.t0;

                        case 13:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[3, 9]]);
        })).drop(),

        actions: {
            update: function update(value) {
                this.set('model', value);
            },
            save: function save() {
                this.get('save').perform();
            }
        }
    });
});
define('ghost-admin/controllers/settings/apps/slack', ['exports', 'ember-controller', 'ember-service/inject', 'ember-computed', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _emberController, _inject, _emberComputed, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        ghostPaths: (0, _inject.default)(),
        ajax: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        model: (0, _emberComputed.alias)('settings.slack.firstObject'),
        testNotificationDisabled: (0, _emberComputed.empty)('model.url'),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var slack, settings;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            slack = this.get('model');
                            settings = this.get('settings');
                            _context.prev = 2;
                            _context.next = 5;
                            return slack.validate();

                        case 5:
                            settings.get('slack').clear().pushObject(slack);
                            _context.next = 8;
                            return settings.save();

                        case 8:
                            return _context.abrupt('return', _context.sent);

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context['catch'](2);

                            if (!_context.t0) {
                                _context.next = 16;
                                break;
                            }

                            this.get('notifications').showAPIError(_context.t0);
                            throw _context.t0;

                        case 16:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 11]]);
        })).drop(),

        sendTestNotification: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            var notifications, slackApi;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            notifications = this.get('notifications');
                            slackApi = this.get('ghostPaths.url').api('slack', 'test');
                            _context2.prev = 2;
                            _context2.next = 5;
                            return this.get('save').perform();

                        case 5:
                            _context2.next = 7;
                            return this.get('ajax').post(slackApi);

                        case 7:
                            notifications.showAlert('Check your slack channel test message.', { type: 'info', key: 'slack-test.send.success' });
                            return _context2.abrupt('return', true);

                        case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2['catch'](2);

                            notifications.showAPIError(_context2.t0, { key: 'slack-test:send' });

                            if ((0, _errors.isInvalidError)(_context2.t0)) {
                                _context2.next = 16;
                                break;
                            }

                            throw _context2.t0;

                        case 16:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[2, 11]]);
        })).drop(),

        actions: {
            save: function save() {
                this.get('save').perform();
            },
            updateURL: function updateURL(value) {
                this.set('model.url', value);
                this.get('model.errors').clear();
            }
        }
    });
});
define('ghost-admin/controllers/settings/code-injection', ['exports', 'ember-controller', 'ember-service/inject', 'ember-concurrency'], function (exports, _emberController, _inject, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        notifications: (0, _inject.default)(),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var notifications;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            notifications = this.get('notifications');
                            _context.prev = 1;
                            _context.next = 4;
                            return this.get('model').save();

                        case 4:
                            return _context.abrupt('return', _context.sent);

                        case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](1);

                            notifications.showAPIError(_context.t0, { key: 'code-injection.save' });
                            throw _context.t0;

                        case 11:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[1, 7]]);
        })),

        actions: {
            save: function save() {
                this.get('save').perform();
            }
        }
    });
});
define('ghost-admin/controllers/settings/design', ['exports', 'jquery', 'ember-controller', 'ghost-admin/models/navigation-item', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-utils', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _jquery, _emberController, _navigationItem, _rsvp, _emberComputed, _inject, _emberUtils, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),

        newNavItem: null,

        themes: null,
        themeToDelete: null,
        showDeleteThemeModal: (0, _emberComputed.notEmpty)('themeToDelete'),

        blogUrl: (0, _emberComputed.default)('config.blogUrl', function () {
            var url = this.get('config.blogUrl');

            return url.slice(-1) !== '/' ? url + '/' : url;
        }),

        init: function init() {
            this._super.apply(this, arguments);
            this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
        },


        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var navItems, newNavItem, notifications, validationPromises;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            navItems = this.get('model.navigation');
                            newNavItem = this.get('newNavItem');
                            notifications = this.get('notifications');
                            validationPromises = [];


                            if (!newNavItem.get('isBlank')) {
                                validationPromises.pushObject(this.send('addNavItem'));
                            }

                            navItems.map(function (item) {
                                validationPromises.pushObject(item.validate());
                            });

                            _context.prev = 6;
                            _context.next = 9;
                            return _rsvp.default.all(validationPromises);

                        case 9:
                            _context.next = 11;
                            return this.get('model').save();

                        case 11:
                            return _context.abrupt('return', _context.sent);

                        case 14:
                            _context.prev = 14;
                            _context.t0 = _context['catch'](6);

                            if (!_context.t0) {
                                _context.next = 19;
                                break;
                            }

                            notifications.showAPIError(_context.t0);
                            throw _context.t0;

                        case 19:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[6, 14]]);
        })),

        addNewNavItem: function addNewNavItem() {
            var navItems = this.get('model.navigation');
            var newNavItem = this.get('newNavItem');

            newNavItem.set('isNew', false);
            navItems.pushObject(newNavItem);
            this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
        },
        _deleteTheme: function _deleteTheme() {
            var _this = this;

            var theme = this.get('store').peekRecord('theme', this.get('themeToDelete').name);

            if (!theme) {
                return;
            }

            return theme.destroyRecord().then(function () {
                // HACK: this is a private method, we need to unload from the store
                // here so that uploading another theme with the same "id" doesn't
                // attempt to update the deleted record
                theme.unloadRecord();
            }).catch(function (error) {
                _this.get('notifications').showAPIError(error);
            });
        },


        actions: {
            save: function save() {
                this.get('save').perform();
            },
            addNavItem: function addNavItem() {
                var _this2 = this;

                var newNavItem = this.get('newNavItem');

                // If the url sent through is blank (user never edited the url)
                if (newNavItem.get('url') === '') {
                    newNavItem.set('url', '/');
                }

                return newNavItem.validate().then(function () {
                    _this2.addNewNavItem();
                });
            },
            deleteNavItem: function deleteNavItem(item) {
                if (!item) {
                    return;
                }

                var navItems = this.get('model.navigation');

                navItems.removeObject(item);
            },
            reorderItems: function reorderItems(navItems) {
                this.set('model.navigation', navItems);
            },
            updateUrl: function updateUrl(url, navItem) {
                if (!navItem) {
                    return;
                }

                navItem.set('url', url);
            },
            activateTheme: function activateTheme(theme) {
                var _this3 = this;

                return theme.activate().then(function (theme) {
                    var themeName = theme.get('name');

                    if (!(0, _emberUtils.isEmpty)(theme.get('warnings'))) {
                        _this3.set('themeWarnings', theme.get('warnings'));
                        _this3.set('showThemeWarningsModal', true);
                    }

                    if (!(0, _emberUtils.isEmpty)(theme.get('errors'))) {
                        _this3.set('themeErrors', theme.get('errors'));
                        _this3.set('showThemeWarningsModal', true);
                    }

                    if (_this3.get('themeErrors') || _this3.get('themeWarnings')) {
                        var message = themeName + ' activated successfully but some warnings/errors were detected.\n                                   You are still able to use and activate the theme. Here is your report...';
                        _this3.set('message', message);
                    }
                }).catch(function (error) {
                    if ((0, _ajax.isThemeValidationError)(error)) {
                        var errors = error.errors[0].errorDetails;
                        var fatalErrors = [];
                        var normalErrors = [];

                        // to have a proper grouping of fatal errors and none fatal, we need to check
                        // our errors for the fatal property
                        if (errors.length > 0) {
                            for (var i = 0; i < errors.length; i++) {
                                if (errors[i].fatal) {
                                    fatalErrors.push(errors[i]);
                                } else {
                                    normalErrors.push(errors[i]);
                                }
                            }
                        }

                        _this3.set('themeErrors', normalErrors);
                        _this3.set('themeFatalErrors', fatalErrors);
                        _this3.set('showThemeErrorsModal', true);
                        return;
                    }

                    throw error;
                });
            },
            downloadTheme: function downloadTheme(theme) {
                var themeURL = this.get('ghostPaths.apiRoot') + '/themes/' + theme.name;
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = themeURL + '/download/?access_token=' + accessToken;
                var iframe = (0, _jquery.default)('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery.default)('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },
            deleteTheme: function deleteTheme(theme) {
                if (theme) {
                    return this.set('themeToDelete', theme);
                }

                return this._deleteTheme();
            },
            hideDeleteThemeModal: function hideDeleteThemeModal() {
                this.set('themeToDelete', null);
            },
            hideThemeWarningsModal: function hideThemeWarningsModal() {
                this.set('themeWarnings', null);
                this.set('themeErrors', null);
                this.set('themeFatalErrors', null);
                this.set('showThemeWarningsModal', false);
                this.set('showThemeErrorsModal', false);
            },
            reset: function reset() {
                this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
            }
        }
    });
});
define('ghost-admin/controllers/settings/general', ['exports', 'jquery', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-metal/observer', 'ghost-admin/utils/random-password', 'ember-runloop', 'ghost-admin/components/gh-image-uploader', 'ember-concurrency'], function (exports, _jquery, _emberController, _emberComputed, _inject, _observer, _randomPassword, _emberRunloop, _ghImageUploader, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _emberController.default.extend({
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),

        availableTimezones: null,
        iconExtensions: ['ico', 'png'],
        iconMimeTypes: 'image/png,image/x-icon',
        imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
        imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,

        _scratchFacebook: null,
        _scratchTwitter: null,

        isDatedPermalinks: (0, _emberComputed.default)('model.permalinks', {
            set: function set(key, value) {
                this.set('model.permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');

                var slugForm = this.get('model.permalinks');
                return slugForm !== '/:slug/';
            },
            get: function get() {
                var slugForm = this.get('model.permalinks');

                return slugForm !== '/:slug/';
            }
        }),

        generatePassword: (0, _observer.default)('model.isPrivate', function () {
            this.get('model.errors').remove('password');
            if (this.get('model.isPrivate') && this.get('model.hasDirtyAttributes')) {
                this.get('model').set('password', (0, _randomPassword.default)());
            }
        }),

        _deleteTheme: function _deleteTheme() {
            var _this = this;

            var theme = this.get('store').peekRecord('theme', this.get('themeToDelete').name);

            if (!theme) {
                return;
            }

            return theme.destroyRecord().catch(function (error) {
                _this.get('notifications').showAPIError(error);
            });
        },


        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var notifications, config, model;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            notifications = this.get('notifications');
                            config = this.get('config');
                            _context.prev = 2;
                            _context.next = 5;
                            return this.get('model').save();

                        case 5:
                            model = _context.sent;

                            config.set('blogTitle', model.get('title'));

                            // this forces the document title to recompute after
                            // a blog title change
                            this.send('collectTitleTokens', []);

                            return _context.abrupt('return', model);

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context['catch'](2);

                            if (_context.t0) {
                                notifications.showAPIError(_context.t0, { key: 'settings.save' });
                            }
                            throw _context.t0;

                        case 15:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 11]]);
        })),

        actions: {
            save: function save() {
                this.get('save').perform();
            },
            setTimezone: function setTimezone(timezone) {
                this.set('model.activeTimezone', timezone.name);
            },
            removeImage: function removeImage(image) {
                // setting `null` here will error as the server treats it as "null"
                this.get('model').set(image, '');
            },


            /**
             * Opens a file selection dialog - Triggered by "Upload Image" buttons,
             * searches for the hidden file input within the .gh-setting element
             * containing the clicked button then simulates a click
             * @param  {MouseEvent} event - MouseEvent fired by the button click
             */
            triggerFileDialog: function triggerFileDialog(event) {
                var fileInput = (0, _jquery.default)(event.target).closest('.gh-setting').find('input[type="file"]');

                if (fileInput.length > 0) {
                    // reset file input value before clicking so that the same image
                    // can be selected again
                    fileInput.value = '';

                    // simulate click to open file dialog
                    // using jQuery because IE11 doesn't support MouseEvent
                    (0, _jquery.default)(fileInput).click();
                }
            },


            /**
             * Fired after an image upload completes
             * @param  {string} property - Property name to be set on `this.model`
             * @param  {UploadResult[]} results - Array of UploadResult objects
             * @return {string} The URL that was set on `this.model.property`
             */
            imageUploaded: function imageUploaded(property, results) {
                if (results[0]) {
                    // Note: We have to reset the file input after upload, otherwise you can't upload the same image again
                    // See https://github.com/thefrontside/emberx-file-input/blob/master/addon/components/x-file-input.js#L37
                    // See https://github.com/TryGhost/Ghost/issues/8545
                    (0, _jquery.default)('.x-file--input').val('');
                    return this.get('model').set(property, results[0].url);
                }
            },
            validateFacebookUrl: function validateFacebookUrl() {
                var _this2 = this;

                var newUrl = this.get('_scratchFacebook');
                var oldUrl = this.get('model.facebook');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('model.facebook', '');
                    this.get('model.errors').remove('facebook');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('model.errors').remove('facebook');
                    return;
                }

                if (newUrl.match(/(?:facebook\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:facebook\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:facebook\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/(?:https\:\/\/|http\:\/\/)?(?:www\.)?(?:\w+\.\w+\/+)?(\S+)/mi);

                        var _newUrl$match4 = _slicedToArray(_newUrl$match3, 2);

                        username = _newUrl$match4[1];
                    }

                    // check if we have a /page/username or without
                    if (username.match(/^(?:\/)?(pages?\/\S+)/mi)) {
                        var _username$match = username.match(/^(?:\/)?(pages?\/\S+)/mi);
                        // we got a page url, now save the username without the / in the beginning

                        var _username$match2 = _slicedToArray(_username$match, 2);

                        username = _username$match2[1];
                    } else if (username.match(/^(http|www)|(\/)/) || !username.match(/^([a-z\d\.]{1,50})$/mi)) {
                        errMessage = !username.match(/^([a-z\d\.]{1,50})$/mi) ? 'Your Page name is not a valid Facebook Page name' : 'The URL must be in a format like https://www.facebook.com/yourPage';

                        this.get('model.errors').add('facebook', errMessage);
                        this.get('model.hasValidated').pushObject('facebook');
                        return;
                    }

                    newUrl = 'https://www.facebook.com/' + username;
                    this.set('model.facebook', newUrl);

                    this.get('model.errors').remove('facebook');
                    this.get('model.hasValidated').pushObject('facebook');

                    // User input is validated
                    return this.get('save').perform().then(function () {
                        _this2.set('model.facebook', '');
                        _emberRunloop.default.schedule('afterRender', _this2, function () {
                            this.set('model.facebook', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
                    this.get('model.errors').add('facebook', errMessage);
                    this.get('model.hasValidated').pushObject('facebook');
                    return;
                }
            },
            validateTwitterUrl: function validateTwitterUrl() {
                var _this3 = this;

                var newUrl = this.get('_scratchTwitter');
                var oldUrl = this.get('model.twitter');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('model.twitter', '');
                    this.get('model.errors').remove('twitter');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('model.errors').remove('twitter');
                    return;
                }

                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match5 = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match6 = _slicedToArray(_newUrl$match5, 2);

                        username = _newUrl$match6[1];
                    } else {
                        var _newUrl$match7 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match8 = _slicedToArray(_newUrl$match7, 1);

                        username = _newUrl$match8[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d\.\_]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d\.\_]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('model.errors').add('twitter', errMessage);
                        this.get('model.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = 'https://twitter.com/' + username;
                    this.set('model.twitter', newUrl);

                    this.get('model.errors').remove('twitter');
                    this.get('model.hasValidated').pushObject('twitter');

                    // User input is validated
                    return this.get('save').perform().then(function () {
                        _this3.set('model.twitter', '');
                        _emberRunloop.default.schedule('afterRender', _this3, function () {
                            this.set('model.twitter', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('model.errors').add('twitter', errMessage);
                    this.get('model.hasValidated').pushObject('twitter');
                    return;
                }
            }
        }
    });
});
define('ghost-admin/controllers/settings/labs', ['exports', 'jquery', 'ember-controller', 'rsvp', 'ember-service/inject', 'ember-runloop', 'ghost-admin/services/ajax', 'ember-utils', 'ember-array/utils', 'ember-concurrency'], function (exports, _jquery, _emberController, _rsvp, _inject, _emberRunloop, _ajax, _emberUtils, _utils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var Promise = _rsvp.default.Promise;
    exports.default = _emberController.default.extend({
        importErrors: null,
        importSuccessful: false,
        showDeleteAllModal: false,
        submitting: false,
        uploadButtonText: 'Import',

        importMimeType: ['application/json', 'application/zip', 'application/x-zip-compressed'],

        ajax: (0, _inject.default)(),
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        // TODO: convert to ember-concurrency task
        _validate: function _validate(file) {
            // Windows doesn't have mime-types for json files by default, so we
            // need to have some additional checking
            if (file.type === '') {
                // First check file extension so we can early return
                var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                    _$exec2 = _slicedToArray(_$exec, 2),
                    extension = _$exec2[1];

                if (!extension || extension.toLowerCase() !== 'json') {
                    return _rsvp.default.reject(new _ajax.UnsupportedMediaTypeError());
                }

                return new Promise(function (resolve, reject) {
                    // Extension is correct, so check the contents of the file
                    var reader = new FileReader();

                    reader.onload = function () {
                        var result = reader.result;


                        try {
                            JSON.parse(result);

                            return resolve();
                        } catch (e) {
                            return reject(new _ajax.UnsupportedMediaTypeError());
                        }
                    };

                    reader.readAsText(file);
                });
            }

            var accept = this.get('importMimeType');

            if (!(0, _emberUtils.isBlank)(accept) && file && accept.indexOf(file.type) === -1) {
                return _rsvp.default.reject(new _ajax.UnsupportedMediaTypeError());
            }

            return _rsvp.default.resolve();
        },


        sendTestEmail: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var notifications, emailUrl;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            notifications = this.get('notifications');
                            emailUrl = this.get('ghostPaths.url').api('mail', 'test');
                            _context.prev = 2;
                            _context.next = 5;
                            return this.get('ajax').post(emailUrl);

                        case 5:
                            notifications.showAlert('Check your email for the test message.', { type: 'info', key: 'test-email.send.success' });
                            return _context.abrupt('return', true);

                        case 9:
                            _context.prev = 9;
                            _context.t0 = _context['catch'](2);

                            notifications.showAPIError(_context.t0, { key: 'test-email:send' });

                        case 12:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 9]]);
        })).drop(),

        reset: function reset() {
            this.set('importErrors', null);
            this.set('importSuccessful', false);
        },


        actions: {
            onUpload: function onUpload(file) {
                var _this = this;

                var formData = new FormData();
                var notifications = this.get('notifications');
                var currentUserId = this.get('session.user.id');
                var dbUrl = this.get('ghostPaths.url').api('db');

                this.set('uploadButtonText', 'Importing');
                this.set('importErrors', null);
                this.set('importSuccessful', false);

                return this._validate(file).then(function () {
                    formData.append('importfile', file);

                    return _this.get('ajax').post(dbUrl, {
                        data: formData,
                        dataType: 'json',
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }).then(function (response) {
                    var store = _this.get('store');

                    _this.set('importSuccessful', true);

                    if (response.problems) {
                        _this.set('importErrors', response.problems);
                    }

                    // Clear the store, so that all the new data gets fetched correctly.
                    store.unloadAll();

                    // NOTE: workaround for behaviour change in Ember 2.13
                    // store.unloadAll has some async tendencies so we need to schedule
                    // the reload of the current user once the unload has finished
                    // https://github.com/emberjs/data/issues/4963
                    _emberRunloop.default.schedule('destroy', _this, function () {
                        // Reload currentUser and set session
                        _this.set('session.user', store.findRecord('user', currentUserId));

                        // TODO: keep as notification, add link to view content
                        notifications.showNotification('Import successful.', { key: 'import.upload.success' });

                        // reload settings
                        return _this.get('settings').reload().then(function (settings) {
                            _this.get('config').set('blogTitle', settings.get('title'));
                        });
                    });
                }).catch(function (response) {
                    if ((0, _ajax.isUnsupportedMediaTypeError)(response)) {
                        _this.set('importErrors', [response]);
                        return;
                    }

                    if (response && response.errors && (0, _utils.isEmberArray)(response.errors)) {
                        _this.set('importErrors', response.errors);
                    }
                }).finally(function () {
                    _this.set('uploadButtonText', 'Import');
                });
            },
            exportData: function exportData() {
                var dbUrl = this.get('ghostPaths.url').api('db');
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = dbUrl + '?access_token=' + accessToken;
                var iframe = (0, _jquery.default)('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery.default)('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },
            toggleDeleteAllModal: function toggleDeleteAllModal() {
                this.toggleProperty('showDeleteAllModal');
            }
        }
    });
});
define('ghost-admin/controllers/settings/tags', ['exports', 'ember-controller', 'ember-controller/inject', 'ember-runloop', 'ember-computed'], function (exports, _emberController, _inject, _emberRunloop, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        tagController: (0, _inject.default)('settings.tags.tag'),

        selectedTag: (0, _emberComputed.alias)('tagController.tag'),

        tagListFocused: (0, _emberComputed.equal)('keyboardFocus', 'tagList'),
        tagContentFocused: (0, _emberComputed.equal)('keyboardFocus', 'tagContent'),

        // TODO: replace with ordering by page count once supported by the API
        sortedTags: (0, _emberComputed.sort)('model', function (a, b) {
            var idA = +a.get('id');
            var idB = +b.get('id');

            if (idA > idB) {
                return 1;
            } else if (idA < idB) {
                return -1;
            }

            return 0;
        }),

        scrollTagIntoView: function scrollTagIntoView(tag) {
            _emberRunloop.default.scheduleOnce('afterRender', this, function () {
                var id = '#gh-tag-' + tag.get('id');
                var element = document.querySelector(id);

                if (element) {
                    var scroll = document.querySelector('.tag-list');
                    var scrollTop = scroll.scrollTop;

                    var scrollHeight = scroll.offsetHeight;
                    var _element = document.querySelector(id);
                    var elementTop = _element.offsetTop;
                    var elementHeight = _element.offsetHeight;

                    if (elementTop < scrollTop) {
                        _element.scrollIntoView(true);
                    }

                    if (elementTop + elementHeight > scrollTop + scrollHeight) {
                        _element.scrollIntoView(false);
                    }
                }
            });
        },


        actions: {
            leftMobile: function leftMobile() {
                var firstTag = this.get('tags.firstObject');
                // redirect to first tag if possible so that you're not left with
                // tag settings blank slate when switching from portrait to landscape
                if (firstTag && !this.get('tagController.tag')) {
                    this.transitionToRoute('settings.tags.tag', firstTag);
                }
            }
        }

    });
});
define('ghost-admin/controllers/settings/tags/tag', ['exports', 'ember-controller', 'ember-controller/inject', 'ember-service/inject', 'ember-computed'], function (exports, _emberController, _inject, _inject2, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        showDeleteTagModal: false,

        tag: (0, _emberComputed.alias)('model'),
        isMobile: (0, _emberComputed.alias)('tagsController.isMobile'),

        applicationController: (0, _inject.default)('application'),
        tagsController: (0, _inject.default)('settings.tags'),
        notifications: (0, _inject2.default)(),

        _saveTagProperty: function _saveTagProperty(propKey, newValue) {
            var _this = this;

            var tag = this.get('tag');
            var currentValue = tag.get(propKey);

            if (newValue) {
                newValue = newValue.trim();
            }

            // Quit if there was no change
            if (newValue === currentValue) {
                return;
            }

            tag.set(propKey, newValue);
            // TODO: This is required until .validate/.save mark fields as validated
            tag.get('hasValidated').addObject(propKey);

            tag.save().then(function (savedTag) {
                // replace 'new' route with 'tag' route
                _this.replaceRoute('settings.tags.tag', savedTag);
            }).catch(function (error) {
                if (error) {
                    _this.get('notifications').showAPIError(error, { key: 'tag.save' });
                }
            });
        },
        _deleteTag: function _deleteTag() {
            var _this2 = this;

            var tag = this.get('tag');

            return tag.destroyRecord().then(function () {
                _this2._deleteTagSuccess();
            }, function (error) {
                _this2._deleteTagFailure(error);
            });
        },
        _deleteTagSuccess: function _deleteTagSuccess() {
            var currentRoute = this.get('applicationController.currentRouteName') || '';

            if (currentRoute.match(/^settings\.tags/)) {
                this.transitionToRoute('settings.tags.index');
            }
        },
        _deleteTagFailure: function _deleteTagFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'tag.delete' });
        },


        actions: {
            setProperty: function setProperty(propKey, value) {
                this._saveTagProperty(propKey, value);
            },
            toggleDeleteTagModal: function toggleDeleteTagModal() {
                this.toggleProperty('showDeleteTagModal');
            },
            deleteTag: function deleteTag() {
                return this._deleteTag();
            }
        }
    });
});
define('ghost-admin/controllers/setup', ['exports', 'ember-controller', 'ember-computed', 'ember-controller/inject', 'ember-service/inject'], function (exports, _emberController, _emberComputed, _inject, _inject2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({
        appController: (0, _inject.default)('application'),
        ghostPaths: (0, _inject2.default)(),

        showBackLink: (0, _emberComputed.match)('appController.currentRouteName', /^setup\.(two|three)$/),

        backRoute: (0, _emberComputed.default)('appController.currentRouteName', function () {
            var currentRoute = this.get('appController.currentRouteName');

            return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
        })
    });
});
define('ghost-admin/controllers/setup/three', ['exports', 'ember-controller', 'ember-data', 'rsvp', 'ember-computed', 'ember-controller/inject', 'ember-service/inject', 'ember-runloop', 'ember-array/utils', 'ember-string', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _emberController, _emberData, _rsvp, _emberComputed, _inject, _inject2, _emberRunloop, _utils, _emberString, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Errors = _emberData.default.Errors;
    exports.default = _emberController.default.extend({
        notifications: (0, _inject2.default)(),
        two: (0, _inject.default)('setup/two'),

        errors: Errors.create(),
        hasValidated: (0, _utils.A)(),
        users: '',
        ownerEmail: (0, _emberComputed.alias)('two.email'),

        usersArray: (0, _emberComputed.default)('users', function () {
            var errors = this.get('errors');
            var users = this.get('users').split('\n').filter(function (email) {
                return email.trim().length > 0;
            });

            // remove "no users to invite" error if we have users
            if (users.uniq().length > 0 && errors.get('users.length') === 1) {
                if (errors.get('users.firstObject').message.match(/no users/i)) {
                    errors.remove('users');
                }
            }

            return users.uniq();
        }),

        validUsersArray: (0, _emberComputed.default)('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').filter(function (user) {
                return validator.isEmail(user) && user !== ownerEmail;
            });
        }),

        invalidUsersArray: (0, _emberComputed.default)('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').reject(function (user) {
                return validator.isEmail(user) || user === ownerEmail;
            });
        }),

        validationResult: (0, _emberComputed.default)('invalidUsersArray', function () {
            var errors = [];

            this.get('invalidUsersArray').forEach(function (user) {
                errors.push({
                    user: user,
                    error: 'email'
                });
            });

            if (errors.length === 0) {
                // ensure we aren't highlighting fields when everything is fine
                this.get('errors').clear();
                return true;
            } else {
                return errors;
            }
        }),

        validate: function validate() {
            var errors = this.get('errors');
            var validationResult = this.get('validationResult');
            var property = 'users';

            errors.clear();

            // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result
            this.get('hasValidated').addObject(property);

            if (validationResult === true) {
                return true;
            }

            validationResult.forEach(function (error) {
                // Only one error type here so far, but one day the errors might be more detailed
                switch (error.error) {
                    case 'email':
                        errors.add(property, error.user + ' is not a valid email.');
                }
            });

            return false;
        },


        buttonText: (0, _emberComputed.default)('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
            var usersError = this.get('errors.users.firstObject.message');
            var validNum = this.get('validUsersArray').length;
            var invalidNum = this.get('invalidUsersArray').length;
            var userCount = void 0;

            if (usersError && usersError.match(/no users/i)) {
                return usersError;
            }

            if (invalidNum > 0) {
                userCount = invalidNum === 1 ? 'email address' : 'email addresses';
                return invalidNum + ' invalid ' + userCount;
            }

            if (validNum > 0) {
                userCount = validNum === 1 ? 'user' : 'users';
                userCount = validNum + ' ' + userCount;
            } else {
                userCount = 'some users';
            }

            return 'Invite ' + userCount;
        }),

        buttonClass: (0, _emberComputed.default)('validationResult', 'usersArray.length', function () {
            if (this.get('validationResult') === true && this.get('usersArray.length') > 0) {
                return 'gh-btn-green';
            } else {
                return 'gh-btn-minor';
            }
        }),

        authorRole: (0, _emberComputed.default)(function () {
            return this.store.findAll('role', { reload: true }).then(function (roles) {
                return roles.findBy('name', 'Author');
            });
        }),

        _transitionAfterSubmission: function _transitionAfterSubmission() {
            if (!this._hasTransitioned) {
                this._hasTransitioned = true;
                this.transitionToRoute('posts.index');
            }
        },


        invite: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var users, authorRole, invites;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            users = this.get('validUsersArray');

                            if (!(this.validate() && users.length > 0)) {
                                _context.next = 15;
                                break;
                            }

                            this._hasTransitioned = false;

                            this.get('_slowSubmissionTimeout').perform();

                            _context.next = 6;
                            return this.get('authorRole');

                        case 6:
                            authorRole = _context.sent;
                            _context.next = 9;
                            return this._saveInvites(authorRole);

                        case 9:
                            invites = _context.sent;


                            this.get('_slowSubmissionTimeout').cancelAll();

                            this._showNotifications(invites);

                            _emberRunloop.default.schedule('actions', this, function () {
                                this.send('loadServerNotifications');
                                this._transitionAfterSubmission();
                            });

                            _context.next = 16;
                            break;

                        case 15:
                            if (users.length === 0) {
                                this.get('errors').add('users', 'No users to invite');
                            }

                        case 16:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).drop(),

        _slowSubmissionTimeout: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return (0, _emberConcurrency.timeout)(4000);

                        case 2:
                            this._transitionAfterSubmission();

                        case 3:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        })).drop(),

        _saveInvites: function _saveInvites(authorRole) {
            var _this = this;

            var users = this.get('validUsersArray');

            return _rsvp.default.Promise.all(users.map(function (user) {
                var invite = _this.store.createRecord('invite', {
                    email: user,
                    role: authorRole
                });

                return invite.save().then(function () {
                    return {
                        email: user,
                        success: invite.get('status') === 'sent'
                    };
                }).catch(function (error) {
                    return {
                        error: error,
                        email: user,
                        success: false
                    };
                });
            }));
        },
        _showNotifications: function _showNotifications(invites) {
            var notifications = this.get('notifications');
            var erroredEmails = [];
            var successCount = 0;
            var invitationsString = void 0,
                message = void 0;

            invites.forEach(function (invite) {
                if (invite.success) {
                    successCount++;
                } else if ((0, _errors.isInvalidError)(invite.error)) {
                    message = invite.email + ' was invalid: ' + invite.error.errors[0].message;
                    notifications.showAlert(message, { type: 'error', delayed: true, key: 'signup.send-invitations.' + invite.email });
                } else {
                    erroredEmails.push(invite.email);
                }
            });

            if (erroredEmails.length > 0) {
                invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
                message = 'Failed to send ' + erroredEmails.length + ' ' + invitationsString;
                message += erroredEmails.join(', ');
                message += ". Please check your email configuration, see <a href=\'https://docs.ghost.org/v1.0.0/docs/mail-config\' target=\'_blank\'>https://docs.ghost.org/v1.0.0/docs/mail-config</a> for instructions";

                message = (0, _emberString.htmlSafe)(message);
                notifications.showAlert(message, { type: 'error', delayed: successCount > 0, key: 'signup.send-invitations.failed' });
            }

            if (successCount > 0) {
                // pluralize
                invitationsString = successCount > 1 ? 'invitations' : 'invitation';
                notifications.showAlert(successCount + ' ' + invitationsString + ' sent!', { type: 'success', delayed: true, key: 'signup.send-invitations.success' });
            }
        },


        actions: {
            validate: function validate() {
                this.validate();
            },
            invite: function invite() {
                this.get('invite').perform();
            },
            skipInvite: function skipInvite() {
                this.send('loadServerNotifications');
                this.transitionToRoute('posts.index');
            }
        }
    });
});
define('ghost-admin/controllers/setup/two', ['exports', 'ember-controller', 'rsvp', 'ghost-admin/mixins/validation-engine', 'ember-controller/inject', 'ember-service/inject', 'ember-ajax/errors', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _emberController, _rsvp, _validationEngine, _inject, _inject2, _errors, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    var Promise = _rsvp.default.Promise;
    exports.default = _emberController.default.extend(_validationEngine.default, {
        ajax: (0, _inject2.default)(),
        application: (0, _inject.default)(),
        config: (0, _inject2.default)(),
        ghostPaths: (0, _inject2.default)(),
        notifications: (0, _inject2.default)(),
        session: (0, _inject2.default)(),
        settings: (0, _inject2.default)(),
        torii: (0, _inject2.default)(),

        // ValidationEngine settings
        validationType: 'setup',

        blogCreated: false,
        blogTitle: null,
        email: '',
        flowErrors: '',
        profileImage: null,
        name: null,
        password: null,

        setup: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this.get('config.ghostOAuth')) {
                                _context.next = 6;
                                break;
                            }

                            _context.next = 3;
                            return this._oauthSetup();

                        case 3:
                            return _context.abrupt('return', _context.sent);

                        case 6:
                            _context.next = 8;
                            return this._passwordSetup();

                        case 8:
                            return _context.abrupt('return', _context.sent);

                        case 9:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })),

        // TODO: remove duplication with controllers/signin
        authenticateWithGhostOrg: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            var authStrategy, authentication;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            authStrategy = 'authenticator:oauth2-ghost';


                            this.set('flowErrors', '');

                            _context2.prev = 2;
                            _context2.next = 5;
                            return this.get('torii').open('ghost-oauth2', { type: 'setup' });

                        case 5:
                            authentication = _context2.sent;
                            _context2.next = 8;
                            return this.get('authenticate').perform(authStrategy, [authentication]);

                        case 8:
                            return _context2.abrupt('return', true);

                        case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2['catch'](2);

                            this.set('flowErrors', 'Authentication with Ghost.org denied or failed');
                            throw _context2.t0;

                        case 15:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[2, 11]]);
        })).drop(),

        authenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee3(authStrategy, authentication) {
            var _get, authResult;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            // we don't want to redirect after sign-in during setup
                            this.set('session.skipAuthSuccessHandler', true);

                            _context3.prev = 1;
                            _context3.next = 4;
                            return (_get = this.get('session')).authenticate.apply(_get, [authStrategy].concat(_toConsumableArray(authentication)));

                        case 4:
                            authResult = _context3.sent;


                            this.get('errors').remove('session');

                            return _context3.abrupt('return', authResult);

                        case 9:
                            _context3.prev = 9;
                            _context3.t0 = _context3['catch'](1);

                            if (!(_context3.t0 && _context3.t0.errors)) {
                                _context3.next = 18;
                                break;
                            }

                            if (!(0, _ajax.isVersionMismatchError)(_context3.t0)) {
                                _context3.next = 14;
                                break;
                            }

                            return _context3.abrupt('return', this.get('notifications').showAPIError(_context3.t0));

                        case 14:

                            _context3.t0.errors.forEach(function (err) {
                                err.message = err.message.htmlSafe();
                            });

                            this.set('flowErrors', _context3.t0.errors[0].message.string);
                            _context3.next = 19;
                            break;

                        case 18:
                            // Connection errors don't return proper status message, only req.body
                            this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });

                        case 19:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this, [[1, 9]]);
        })),

        /**
         * Uploads the given data image, then sends the changed user image property to the server
         * @param  {Object} user User object, returned from the 'setup' api call
         * @return {Ember.RSVP.Promise} A promise that takes care of both calls
         */
        _sendImage: function _sendImage(user) {
            var _this = this;

            var image = this.get('profileImage');

            return new Promise(function (resolve, reject) {
                image.formData = {};
                return image.submit().done(function (response) {
                    var usersUrl = _this.get('ghostPaths.url').api('users', user.id.toString());
                    user.profile_image = response;

                    return _this.get('ajax').put(usersUrl, {
                        data: {
                            users: [user]
                        }
                    }).then(resolve).catch(reject);
                }).fail(reject);
            });
        },
        _passwordSetup: function _passwordSetup() {
            var _this2 = this;

            var setupProperties = ['blogTitle', 'name', 'email', 'password'];
            var data = this.getProperties(setupProperties);
            var config = this.get('config');
            var method = this.get('blogCreated') ? 'put' : 'post';

            this.set('flowErrors', '');

            this.get('hasValidated').addObjects(setupProperties);

            return this.validate().then(function () {
                var authUrl = _this2.get('ghostPaths.url').api('authentication', 'setup');

                return _this2.get('ajax')[method](authUrl, {
                    data: {
                        setup: [{
                            name: data.name,
                            email: data.email,
                            password: data.password,
                            blogTitle: data.blogTitle
                        }]
                    }
                }).then(function (result) {
                    config.set('blogTitle', data.blogTitle);

                    // don't try to login again if we are already logged in
                    if (_this2.get('session.isAuthenticated')) {
                        return _this2._afterAuthentication(result);
                    }

                    // Don't call the success handler, otherwise we will be redirected to admin
                    _this2.set('session.skipAuthSuccessHandler', true);

                    return _this2.get('session').authenticate('authenticator:oauth2', _this2.get('email'), _this2.get('password')).then(function () {
                        _this2.set('blogCreated', true);
                        return _this2._afterAuthentication(result);
                    }).catch(function (error) {
                        _this2._handleAuthenticationError(error);
                    }).finally(function () {
                        _this2.set('session.skipAuthSuccessHandler', undefined);
                    });
                }).catch(function (error) {
                    _this2._handleSaveError(error);
                });
            }).catch(function () {
                _this2.set('flowErrors', 'Please fill out the form to setup your blog.');
            });
        },


        // NOTE: for OAuth ghost is in the "setup completed" step as soon
        // as a user has been authenticated so we need to use the standard settings
        // update to set the blog title before redirecting
        _oauthSetup: function _oauthSetup() {
            var _this3 = this;

            var blogTitle = this.get('blogTitle');
            var config = this.get('config');

            this.get('hasValidated').addObjects(['blogTitle', 'session']);

            return this.validate().then(function () {
                return _this3.get('settings').fetch().then(function (settings) {
                    settings.set('title', blogTitle);

                    return settings.save().then(function (settings) {
                        // update the config so that the blog title shown in
                        // the nav bar is also updated
                        config.set('blogTitle', settings.get('title'));

                        // this.blogCreated is used by step 3 to check if step 2
                        // has been completed
                        _this3.set('blogCreated', true);
                        return _this3._afterAuthentication(settings);
                    }).catch(function (error) {
                        _this3._handleSaveError(error);
                    });
                }).finally(function () {
                    _this3.set('session.skipAuthSuccessHandler', undefined);
                });
            });
        },
        _handleSaveError: function _handleSaveError(resp) {
            if ((0, _errors.isInvalidError)(resp)) {
                this.set('flowErrors', resp.errors[0].message);
            } else {
                this.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
            }
        },
        _handleAuthenticationError: function _handleAuthenticationError(error) {
            if (error && error.errors) {
                this.set('flowErrors', error.errors[0].message);
            } else {
                // Connection errors don't return proper status message, only req.body
                this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'setup.authenticate.failed' });
            }
        },
        _afterAuthentication: function _afterAuthentication(result) {
            var _this4 = this;

            if (this.get('profileImage')) {
                return this._sendImage(result.users[0]).then(function () {

                    // fetch settings for synchronous access before transitioning
                    return _this4.get('settings').fetch().then(function () {
                        return _this4.transitionToRoute('setup.three');
                    });
                }).catch(function (resp) {
                    _this4.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
                });
            } else {

                // fetch settings for synchronous access before transitioning
                return this.get('settings').fetch().then(function () {
                    return _this4.transitionToRoute('setup.three');
                });
            }
        },


        actions: {
            setup: function setup() {
                this.get('setup').perform();
            },
            preValidate: function preValidate(model) {
                // Only triggers validation if a value has been entered, preventing empty errors on focusOut
                if (this.get(model)) {
                    return this.validate({ property: model });
                }
            },
            setImage: function setImage(image) {
                this.set('profileImage', image);
            }
        }
    });
});
define('ghost-admin/controllers/signin', ['exports', 'jquery', 'ember-controller', 'ghost-admin/mixins/validation-engine', 'ember-controller/inject', 'ember-service/inject', 'ember-array/utils', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _jquery, _emberController, _validationEngine, _inject, _inject2, _utils, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    exports.default = _emberController.default.extend(_validationEngine.default, {
        submitting: false,
        loggingIn: false,
        authProperties: ['identification', 'password'],

        ajax: (0, _inject2.default)(),
        application: (0, _inject.default)(),
        config: (0, _inject2.default)(),
        ghostPaths: (0, _inject2.default)(),
        notifications: (0, _inject2.default)(),
        session: (0, _inject2.default)(),
        settings: (0, _inject2.default)(),
        torii: (0, _inject2.default)(),

        flowErrors: '',

        // ValidationEngine settings
        validationType: 'signin',

        authenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee(authStrategy, authentication) {
            var _get, authResult;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (_get = this.get('session')).authenticate.apply(_get, [authStrategy].concat(_toConsumableArray(authentication)));

                        case 3:
                            authResult = _context.sent;
                            _context.next = 6;
                            return this.get('settings').fetch();

                        case 6:
                            return _context.abrupt('return', authResult);

                        case 9:
                            _context.prev = 9;
                            _context.t0 = _context['catch'](0);

                            if (!(_context.t0 && _context.t0.errors)) {
                                _context.next = 20;
                                break;
                            }

                            if (!(0, _ajax.isVersionMismatchError)(_context.t0)) {
                                _context.next = 14;
                                break;
                            }

                            return _context.abrupt('return', this.get('notifications').showAPIError(_context.t0));

                        case 14:

                            _context.t0.errors.forEach(function (err) {
                                err.message = err.message.htmlSafe();
                            });

                            this.set('flowErrors', _context.t0.errors[0].message.string);

                            if (_context.t0.errors[0].message.string.match(/user with that email/)) {
                                this.get('model.errors').add('identification', '');
                            }

                            if (_context.t0.errors[0].message.string.match(/password is incorrect/)) {
                                this.get('model.errors').add('password', '');
                            }
                            _context.next = 21;
                            break;

                        case 20:
                            // Connection errors don't return proper status message, only req.body
                            this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });

                        case 21:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 9]]);
        })).drop(),

        validateAndAuthenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            var model, authStrategy;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            model = this.get('model');
                            authStrategy = 'authenticator:oauth2';


                            this.set('flowErrors', '');
                            // Manually trigger events for input fields, ensuring legacy compatibility with
                            // browsers and password managers that don't send proper events on autofill
                            (0, _jquery.default)('#login').find('input').trigger('change');

                            // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'
                            this.get('hasValidated').addObjects(this.authProperties);

                            _context2.prev = 5;
                            _context2.next = 8;
                            return this.validate({ property: 'signin' });

                        case 8:
                            _context2.next = 10;
                            return this.get('authenticate').perform(authStrategy, [model.get('identification'), model.get('password')]);

                        case 10:
                            return _context2.abrupt('return', _context2.sent);

                        case 13:
                            _context2.prev = 13;
                            _context2.t0 = _context2['catch'](5);

                            this.set('flowErrors', 'Please fill out the form to sign in.');

                        case 16:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[5, 13]]);
        })).drop(),

        // TODO: remove duplication with controllers/setup/two
        authenticateWithGhostOrg: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee3() {
            var authStrategy, authentication;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            authStrategy = 'authenticator:oauth2-ghost';


                            this.set('flowErrors', '');

                            _context3.prev = 2;
                            _context3.next = 5;
                            return this.get('torii').open('ghost-oauth2', { type: 'signin' });

                        case 5:
                            authentication = _context3.sent;
                            _context3.next = 8;
                            return this.get('authenticate').perform(authStrategy, [authentication]);

                        case 8:
                            return _context3.abrupt('return', _context3.sent);

                        case 11:
                            _context3.prev = 11;
                            _context3.t0 = _context3['catch'](2);

                            this.set('flowErrors', 'Authentication with Ghost.org denied or failed');
                            throw _context3.t0;

                        case 15:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this, [[2, 11]]);
        })).drop(),

        forgotten: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee4() {
            var email, forgottenUrl, notifications, _error$errors, message;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            email = this.get('model.identification');
                            forgottenUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
                            notifications = this.get('notifications');


                            this.set('flowErrors', '');
                            // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'
                            this.get('hasValidated').addObject('identification');

                            _context4.prev = 5;
                            _context4.next = 8;
                            return this.validate({ property: 'forgotPassword' });

                        case 8:
                            _context4.next = 10;
                            return this.get('ajax').post(forgottenUrl, { data: { passwordreset: [{ email: email }] } });

                        case 10:
                            notifications.showAlert('Please check your email for instructions.', { type: 'info', key: 'forgot-password.send.success' });
                            return _context4.abrupt('return', true);

                        case 14:
                            _context4.prev = 14;
                            _context4.t0 = _context4['catch'](5);

                            if (_context4.t0) {
                                _context4.next = 18;
                                break;
                            }

                            return _context4.abrupt('return', this.set('flowErrors', 'We need your email address to reset your password!'));

                        case 18:
                            if (!(0, _ajax.isVersionMismatchError)(_context4.t0)) {
                                _context4.next = 20;
                                break;
                            }

                            return _context4.abrupt('return', notifications.showAPIError(_context4.t0));

                        case 20:

                            if (_context4.t0 && _context4.t0.errors && (0, _utils.isEmberArray)(_context4.t0.errors)) {
                                _error$errors = _slicedToArray(_context4.t0.errors, 1), message = _error$errors[0].message;


                                this.set('flowErrors', message);

                                if (message.match(/no user with that email/)) {
                                    this.get('model.errors').add('identification', '');
                                }
                            } else {
                                notifications.showAPIError(_context4.t0, { defaultErrorText: 'There was a problem with the reset, please try again.', key: 'forgot-password.send' });
                            }

                        case 21:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this, [[5, 14]]);
        })),

        actions: {
            authenticate: function authenticate() {
                this.get('validateAndAuthenticate').perform();
            }
        }
    });
});
define('ghost-admin/controllers/signup', ['exports', 'ember-controller', 'rsvp', 'ghost-admin/mixins/validation-engine', 'ember-service/inject', 'ghost-admin/services/ajax', 'ember-platform', 'ember-array/utils', 'ember-concurrency'], function (exports, _emberController, _rsvp, _validationEngine, _inject, _ajax, _emberPlatform, _utils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    var Promise = _rsvp.default.Promise;
    exports.default = _emberController.default.extend(_validationEngine.default, {
        ajax: (0, _inject.default)(),
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        settings: (0, _inject.default)(),
        torii: (0, _inject.default)(),

        // ValidationEngine settings
        validationType: 'signup',

        flowErrors: '',
        image: null,

        authenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee(authStrategy, authentication) {
            var _get, authResult, versionMismatchError;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (_get = this.get('session')).authenticate.apply(_get, [authStrategy].concat(_toConsumableArray(authentication)));

                        case 3:
                            authResult = _context.sent;
                            _context.next = 6;
                            return this.get('settings').fetch();

                        case 6:
                            return _context.abrupt('return', authResult);

                        case 9:
                            _context.prev = 9;
                            _context.t0 = _context['catch'](0);

                            if (!(_context.t0 && _context.t0.errors)) {
                                _context.next = 21;
                                break;
                            }

                            if (!(0, _ajax.isVersionMismatchError)(null, _context.t0)) {
                                _context.next = 15;
                                break;
                            }

                            versionMismatchError = new _ajax.VersionMismatchError(_context.t0);
                            return _context.abrupt('return', this.get('notifications').showAPIError(versionMismatchError));

                        case 15:

                            _context.t0.errors.forEach(function (err) {
                                err.message = err.message.htmlSafe();
                            });

                            this.set('flowErrors', _context.t0.errors[0].message.string);

                            if (_context.t0.errors[0].message.string.match(/user with that email/)) {
                                this.get('model.errors').add('identification', '');
                            }

                            if (_context.t0.errors[0].message.string.match(/password is incorrect/)) {
                                this.get('model.errors').add('password', '');
                            }
                            _context.next = 23;
                            break;

                        case 21:
                            // Connection errors don't return proper status message, only req.body
                            this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                            throw _context.t0;

                        case 23:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 9]]);
        })).drop(),

        authenticateWithGhostOrg: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            var authStrategy, inviteToken, email, authentication;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            authStrategy = 'authenticator:oauth2-ghost';
                            inviteToken = this.get('model.token');
                            email = this.get('model.email');


                            this.set('flowErrors', '');

                            _context2.prev = 4;
                            _context2.next = 7;
                            return this.get('torii').open('ghost-oauth2', { email: email, type: 'invite' });

                        case 7:
                            authentication = _context2.sent;


                            authentication = (0, _emberPlatform.assign)(authentication, { inviteToken: inviteToken });

                            _context2.next = 11;
                            return this.get('authenticate').perform(authStrategy, [authentication]);

                        case 11:
                            return _context2.abrupt('return', _context2.sent);

                        case 14:
                            _context2.prev = 14;
                            _context2.t0 = _context2['catch'](4);

                            this.set('flowErrors', 'Authentication with Ghost.org denied or failed');
                            throw _context2.t0;

                        case 18:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[4, 14]]);
        })).drop(),

        signup: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee3() {
            var setupProperties, notifications;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            setupProperties = ['name', 'email', 'password', 'token'];
                            notifications = this.get('notifications');


                            this.set('flowErrors', '');
                            this.get('hasValidated').addObjects(setupProperties);

                            _context3.prev = 4;
                            _context3.next = 7;
                            return this.validate();

                        case 7:
                            _context3.next = 9;
                            return this._completeInvitation();

                        case 9:
                            _context3.prev = 9;
                            _context3.next = 12;
                            return this._authenticateWithPassword();

                        case 12:
                            _context3.next = 14;
                            return this._sendImage();

                        case 14:
                            _context3.next = 19;
                            break;

                        case 16:
                            _context3.prev = 16;
                            _context3.t0 = _context3['catch'](9);

                            notifications.showAPIError(_context3.t0, { key: 'signup.complete' });

                        case 19:
                            _context3.next = 25;
                            break;

                        case 21:
                            _context3.prev = 21;
                            _context3.t1 = _context3['catch'](4);

                            // ValidationEngine throws undefined
                            if (!_context3.t1) {
                                this.set('flowErrors', 'Please fill out the form to complete your sign-up');
                            }

                            if (_context3.t1 && _context3.t1.errors && (0, _utils.isEmberArray)(_context3.t1.errors)) {
                                if ((0, _ajax.isVersionMismatchError)(_context3.t1)) {
                                    notifications.showAPIError(_context3.t1);
                                }
                                this.set('flowErrors', _context3.t1.errors[0].message);
                            } else {
                                notifications.showAPIError(_context3.t1, { key: 'signup.complete' });
                            }

                        case 25:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this, [[4, 21], [9, 16]]);
        })),

        _completeInvitation: function _completeInvitation() {
            var authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
            var model = this.get('model');

            return this.get('ajax').post(authUrl, {
                dataType: 'json',
                data: {
                    invitation: [{
                        name: model.get('name'),
                        email: model.get('email'),
                        password: model.get('password'),
                        token: model.get('token')
                    }]
                }
            });
        },
        _authenticateWithPassword: function _authenticateWithPassword() {
            var email = this.get('model.email');
            var password = this.get('model.password');

            return this.get('session').authenticate('authenticator:oauth2', email, password);
        },
        _sendImage: function _sendImage() {
            var _this = this;

            var image = this.get('image');

            if (image) {
                return this.get('session.user').then(function (user) {
                    return new Promise(function (resolve, reject) {
                        image.formData = {};
                        return image.submit().done(function (response) {
                            var usersUrl = _this.get('ghostPaths.url').api('users', user.id.toString());
                            user.image = response;
                            return _this.get('ajax').put(usersUrl, {
                                data: {
                                    users: [user]
                                }
                            }).then(resolve).catch(reject);
                        }).fail(reject);
                    });
                });
            }
        },


        actions: {
            signup: function signup() {
                this.get('signup').perform();
            },
            setImage: function setImage(image) {
                this.set('profileImage', image);
            }
        }
    });
});
define('ghost-admin/controllers/subscribers', ['exports', 'jquery', 'ember-controller', 'ghost-admin/mixins/pagination', 'ember-light-table', 'ember-computed', 'ghost-admin/utils/ghost-paths', 'ember-service/inject', 'ember-platform'], function (exports, _jquery, _emberController, _pagination, _emberLightTable, _emberComputed, _ghostPaths, _inject, _emberPlatform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend(_pagination.default, {

        queryParams: ['order', 'direction'],
        order: 'created_at',
        direction: 'desc',

        paginationModel: 'subscriber',

        total: 0,
        table: null,
        subscriberToDelete: null,

        session: (0, _inject.default)(),

        // paginationSettings is replaced by the pagination mixin so we need a
        // getter/setter CP here so that we don't lose the dynamic order param
        paginationSettings: (0, _emberComputed.default)('order', 'direction', {
            get: function get() {
                var order = this.get('order');
                var direction = this.get('direction');

                var currentSettings = this._paginationSettings || {
                    limit: 30
                };

                return (0, _emberPlatform.assign)({}, currentSettings, {
                    order: order + ' ' + direction
                });
            },
            set: function set(key, value) {
                this._paginationSettings = value;
                return value;
            }
        }),

        columns: (0, _emberComputed.default)('order', 'direction', function () {
            var order = this.get('order');
            var direction = this.get('direction');

            return [{
                label: 'Email address',
                valuePath: 'email',
                sorted: order === 'email',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-email-cell'],
                cellClassNames: ['gh-subscribers-table-email-cell']
            }, {
                label: 'Subscription Date',
                valuePath: 'createdAtUTC',
                format: function format(value) {
                    return value.format('MMMM DD, YYYY');
                },

                sorted: order === 'created_at',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-date-cell'],
                cellClassNames: ['gh-subscribers-table-date-cell']
            }, {
                label: 'Status',
                valuePath: 'status',
                sorted: order === 'status',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-status-cell'],
                cellClassNames: ['gh-subscribers-table-status-cell']
            }, {
                label: '',
                sortable: false,
                cellComponent: 'gh-subscribers-table-delete-cell',
                align: 'right',
                classNames: ['gh-subscribers-table-delete-cell'],
                cellClassNames: ['gh-subscribers-table-delete-cell']
            }];
        }),

        initializeTable: function initializeTable() {
            this.set('table', new _emberLightTable.default(this.get('columns'), this.get('subscribers')));
        },


        // capture the total from the server any time we fetch a new page
        didReceivePaginationMeta: function didReceivePaginationMeta(meta) {
            if (meta && meta.pagination) {
                this.set('total', meta.pagination.total);
            }
        },


        actions: {
            loadFirstPage: function loadFirstPage() {
                var table = this.get('table');

                return this._super.apply(this, arguments).then(function (results) {
                    table.addRows(results);
                    return results;
                });
            },
            loadNextPage: function loadNextPage() {
                var table = this.get('table');

                return this._super.apply(this, arguments).then(function (results) {
                    table.addRows(results);
                    return results;
                });
            },
            sortByColumn: function sortByColumn(column) {
                var table = this.get('table');

                if (column.sorted) {
                    this.setProperties({
                        order: column.get('valuePath').trim().replace(/UTC$/, '').underscore(),
                        direction: column.ascending ? 'asc' : 'desc'
                    });
                    table.setRows([]);
                    this.send('loadFirstPage');
                }
            },
            addSubscriber: function addSubscriber(subscriber) {
                this.get('table').insertRowAt(0, subscriber);
                this.incrementProperty('total');
            },
            deleteSubscriber: function deleteSubscriber(subscriber) {
                this.set('subscriberToDelete', subscriber);
            },
            confirmDeleteSubscriber: function confirmDeleteSubscriber() {
                var _this = this;

                var subscriber = this.get('subscriberToDelete');

                return subscriber.destroyRecord().then(function () {
                    _this.set('subscriberToDelete', null);
                    _this.get('table').removeRow(subscriber);
                    _this.decrementProperty('total');
                });
            },
            cancelDeleteSubscriber: function cancelDeleteSubscriber() {
                this.set('subscriberToDelete', null);
            },
            reset: function reset() {
                this.get('table').setRows([]);
                this.send('loadFirstPage');
            },
            exportData: function exportData() {
                var exportUrl = (0, _ghostPaths.default)().url.api('subscribers/csv');
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = exportUrl + '?access_token=' + accessToken;
                var iframe = (0, _jquery.default)('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery.default)('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            }
        }
    });
});
define('ghost-admin/controllers/team/index', ['exports', 'ember-controller', 'ember-service/inject', 'ember-computed'], function (exports, _emberController, _inject, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberController.default.extend({

        showInviteUserModal: false,

        activeUsers: null,
        suspendedUsers: null,
        invites: null,

        session: (0, _inject.default)(),

        inviteOrder: ['email'],
        sortedInvites: (0, _emberComputed.sort)('invites', 'inviteOrder'),

        userOrder: ['name', 'email'],

        sortedActiveUsers: (0, _emberComputed.sort)('activeUsers', 'userOrder'),
        sortedSuspendedUsers: (0, _emberComputed.sort)('suspendedUsers', 'userOrder'),

        actions: {
            toggleInviteUserModal: function toggleInviteUserModal() {
                this.toggleProperty('showInviteUserModal');
            }
        }
    });
});
define('ghost-admin/controllers/team/user', ['exports', 'ember-controller', 'ember', 'ghost-admin/utils/bound-one-way', 'ember-computed', 'ember-service/inject', 'ghost-admin/utils/isNumber', 'ember-runloop', 'ember-string', 'ember-array/utils', 'ember-concurrency'], function (exports, _emberController, _ember, _boundOneWay, _emberComputed, _inject, _isNumber, _emberRunloop, _emberString, _utils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var Handlebars = _ember.default.Handlebars;
    exports.default = _emberController.default.extend({
        showDeleteUserModal: false,
        showSuspendUserModal: false,
        showTransferOwnerModal: false,
        showUploadCoverModal: false,
        showUplaodImageModal: false,
        _scratchFacebook: null,
        _scratchTwitter: null,

        ajax: (0, _inject.default)(),
        config: (0, _inject.default)(),
        dropdown: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        slugGenerator: (0, _inject.default)(),

        user: (0, _emberComputed.alias)('model'),
        currentUser: (0, _emberComputed.alias)('session.user'),

        email: (0, _emberComputed.readOnly)('model.email'),
        slugValue: (0, _boundOneWay.default)('model.slug'),

        isNotOwnersProfile: (0, _emberComputed.not)('user.isOwner'),
        isAdminUserOnOwnerProfile: (0, _emberComputed.and)('currentUser.isAdmin', 'user.isOwner'),
        canAssignRoles: (0, _emberComputed.or)('currentUser.isAdmin', 'currentUser.isOwner'),
        canMakeOwner: (0, _emberComputed.and)('currentUser.isOwner', 'isNotOwnProfile', 'user.isAdmin'),
        rolesDropdownIsVisible: (0, _emberComputed.and)('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),
        userActionsAreVisible: (0, _emberComputed.or)('deleteUserActionIsVisible', 'canMakeOwner'),

        isOwnProfile: (0, _emberComputed.default)('user.id', 'currentUser.id', function () {
            return this.get('user.id') === this.get('currentUser.id');
        }),
        isNotOwnProfile: (0, _emberComputed.not)('isOwnProfile'),
        showMyGhostLink: (0, _emberComputed.and)('config.ghostOAuth', 'isOwnProfile'),

        canChangeEmail: (0, _emberComputed.default)('config.ghostOAuth', 'isAdminUserOnOwnerProfile', function () {
            var ghostOAuth = this.get('config.ghostOAuth');
            var isAdminUserOnOwnerProfile = this.get('isAdminUserOnOwnerProfile');

            return !ghostOAuth && !isAdminUserOnOwnerProfile;
        }),

        deleteUserActionIsVisible: (0, _emberComputed.default)('currentUser', 'canAssignRoles', 'user', function () {
            if (this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('user.isOwner') || this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') || this.get('user.isAuthor'))) {
                return true;
            }
        }),

        canChangePassword: (0, _emberComputed.default)('config.ghostOAuth', 'isAdminUserOnOwnerProfile', function () {
            return !this.get('config.ghostOAuth') && !this.get('isAdminUserOnOwnerProfile');
        }),

        // duplicated in gh-user-active -- find a better home and consolidate?
        userDefault: (0, _emberComputed.default)('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-image-65d227a8129d14e33028afcad784158f.png';
        }),

        userImageBackground: (0, _emberComputed.default)('user.profileImage', 'userDefault', function () {
            var url = this.get('user.profileImage') || this.get('userDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),
        // end duplicated

        coverDefault: (0, _emberComputed.default)('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-cover-d1638613da797d1bf42a73829b0db30e.png';
        }),

        coverImageBackground: (0, _emberComputed.default)('user.coverImage', 'coverDefault', function () {
            var url = this.get('user.coverImage') || this.get('coverDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        coverTitle: (0, _emberComputed.default)('user.name', function () {
            return this.get('user.name') + '\'s Cover Image';
        }),

        roles: (0, _emberComputed.default)(function () {
            return this.store.query('role', { permissions: 'assign' });
        }),

        _deleteUser: function _deleteUser() {
            if (this.get('deleteUserActionIsVisible')) {
                var user = this.get('user');
                return user.destroyRecord();
            }
        },
        _deleteUserSuccess: function _deleteUserSuccess() {
            this.get('notifications').closeAlerts('user.delete');
            this.store.unloadAll('post');
            this.transitionToRoute('team');
        },
        _deleteUserFailure: function _deleteUserFailure() {
            this.get('notifications').showAlert('The user could not be deleted. Please try again.', { type: 'error', key: 'user.delete.failed' });
        },


        saveHandlers: (0, _emberConcurrency.taskGroup)().enqueue(),

        updateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee(newSlug) {
            var slug, serverSlug, slugTokens, check;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            slug = this.get('model.slug');


                            newSlug = newSlug || slug;
                            newSlug = newSlug.trim();

                            // Ignore unchanged slugs or candidate slugs that are empty

                            if (!(!newSlug || slug === newSlug)) {
                                _context.next = 6;
                                break;
                            }

                            this.set('slugValue', slug);

                            return _context.abrupt('return');

                        case 6:
                            _context.next = 8;
                            return this.get('slugGenerator').generateSlug('user', newSlug);

                        case 8:
                            serverSlug = _context.sent;

                            if (!(serverSlug === slug)) {
                                _context.next = 11;
                                break;
                            }

                            return _context.abrupt('return');

                        case 11:

                            // Because the server transforms the candidate slug by stripping
                            // certain characters and appending a number onto the end of slugs
                            // to enforce uniqueness, there are cases where we can get back a
                            // candidate slug that is a duplicate of the original except for
                            // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

                            // get the last token out of the slug candidate and see if it's a number
                            slugTokens = serverSlug.split('-');
                            check = Number(slugTokens.pop());

                            // if the candidate slug is the same as the existing slug except
                            // for the incrementor then the existing slug should be used

                            if (!((0, _isNumber.default)(check) && check > 0)) {
                                _context.next = 17;
                                break;
                            }

                            if (!(slug === slugTokens.join('-') && serverSlug !== newSlug)) {
                                _context.next = 17;
                                break;
                            }

                            this.set('slugValue', slug);

                            return _context.abrupt('return');

                        case 17:

                            this.set('slugValue', serverSlug);

                        case 18:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).group('saveHandlers'),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            var user, slugValue, slugChanged, model, currentPath, newPath;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            user = this.get('user');
                            slugValue = this.get('slugValue');
                            slugChanged = void 0;


                            if (user.get('slug') !== slugValue) {
                                slugChanged = true;
                                user.set('slug', slugValue);
                            }

                            _context2.prev = 4;
                            _context2.next = 7;
                            return user.save({ format: false });

                        case 7:
                            model = _context2.sent;
                            currentPath = void 0, newPath = void 0;

                            // If the user's slug has changed, change the URL and replace
                            // the history so refresh and back button still work

                            if (slugChanged) {
                                currentPath = window.location.hash;

                                newPath = currentPath.split('/');
                                newPath[newPath.length - 1] = model.get('slug');
                                newPath = newPath.join('/');

                                window.history.replaceState({ path: newPath }, '', newPath);
                            }

                            this.get('notifications').closeAlerts('user.update');

                            return _context2.abrupt('return', model);

                        case 14:
                            _context2.prev = 14;
                            _context2.t0 = _context2['catch'](4);

                            // validation engine returns undefined so we have to check
                            // before treating the failure as an API error
                            if (_context2.t0) {
                                this.get('notifications').showAPIError(_context2.t0, { key: 'user.update' });
                            }

                        case 17:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[4, 14]]);
        })).group('saveHandlers'),

        actions: {
            changeRole: function changeRole(newRole) {
                this.set('model.role', newRole);
            },
            deleteUser: function deleteUser() {
                var _this = this;

                return this._deleteUser().then(function () {
                    _this._deleteUserSuccess();
                }, function () {
                    _this._deleteUserFailure();
                });
            },
            toggleDeleteUserModal: function toggleDeleteUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showDeleteUserModal');
                }
            },
            suspendUser: function suspendUser() {
                this.get('model').set('status', 'inactive');
                return this.get('save').perform();
            },
            toggleSuspendUserModal: function toggleSuspendUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showSuspendUserModal');
                }
            },
            unsuspendUser: function unsuspendUser() {
                this.get('model').set('status', 'active');
                return this.get('save').perform();
            },
            toggleUnsuspendUserModal: function toggleUnsuspendUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showUnsuspendUserModal');
                }
            },
            validateFacebookUrl: function validateFacebookUrl() {
                var _this2 = this;

                var newUrl = this.get('_scratchFacebook');
                var oldUrl = this.get('user.facebook');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('user.facebook', '');
                    this.get('user.errors').remove('facebook');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('user.errors').remove('facebook');
                    return;
                }

                // TODO: put the validation here into a validator
                if (newUrl.match(/(?:facebook\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:facebook\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:facebook\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/(?:https\:\/\/|http\:\/\/)?(?:www\.)?(?:\w+\.\w+\/+)?(\S+)/mi);

                        var _newUrl$match4 = _slicedToArray(_newUrl$match3, 2);

                        username = _newUrl$match4[1];
                    }

                    // check if we have a /page/username or without
                    if (username.match(/^(?:\/)?(pages?\/\S+)/mi)) {
                        var _username$match = username.match(/^(?:\/)?(pages?\/\S+)/mi);
                        // we got a page url, now save the username without the / in the beginning

                        var _username$match2 = _slicedToArray(_username$match, 2);

                        username = _username$match2[1];
                    } else if (username.match(/^(http|www)|(\/)/) || !username.match(/^([a-z\d\.]{1,50})$/mi)) {
                        errMessage = !username.match(/^([a-z\d\.]{1,50})$/mi) ? 'Your Username is not a valid Facebook Username' : 'The URL must be in a format like https://www.facebook.com/yourUsername';

                        this.get('user.errors').add('facebook', errMessage);
                        this.get('user.hasValidated').pushObject('facebook');
                        return;
                    }

                    newUrl = 'https://www.facebook.com/' + username;
                    this.set('user.facebook', newUrl);

                    this.get('user.errors').remove('facebook');
                    this.get('user.hasValidated').pushObject('facebook');

                    // User input is validated
                    this.get('save').perform().then(function () {
                        // necessary to update the value in the input field
                        _this2.set('user.facebook', '');
                        _emberRunloop.default.schedule('afterRender', _this2, function () {
                            this.set('user.facebook', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourUsername';
                    this.get('user.errors').add('facebook', errMessage);
                    this.get('user.hasValidated').pushObject('facebook');
                    return;
                }
            },
            validateTwitterUrl: function validateTwitterUrl() {
                var _this3 = this;

                var newUrl = this.get('_scratchTwitter');
                var oldUrl = this.get('user.twitter');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('user.twitter', '');
                    this.get('user.errors').remove('twitter');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('user.errors').remove('twitter');
                    return;
                }

                // TODO: put the validation here into a validator
                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match5 = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match6 = _slicedToArray(_newUrl$match5, 2);

                        username = _newUrl$match6[1];
                    } else {
                        var _newUrl$match7 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match8 = _slicedToArray(_newUrl$match7, 1);

                        username = _newUrl$match8[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d\.\_]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d\.\_]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('user.errors').add('twitter', errMessage);
                        this.get('user.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = 'https://twitter.com/' + username;
                    this.set('user.twitter', newUrl);

                    this.get('user.errors').remove('twitter');
                    this.get('user.hasValidated').pushObject('twitter');

                    // User input is validated
                    this.get('save').perform().then(function () {
                        // necessary to update the value in the input field
                        _this3.set('user.twitter', '');
                        _emberRunloop.default.schedule('afterRender', _this3, function () {
                            this.set('user.twitter', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('user.errors').add('twitter', errMessage);
                    this.get('user.hasValidated').pushObject('twitter');
                    return;
                }
            },
            transferOwnership: function transferOwnership() {
                var _this4 = this;

                var user = this.get('user');
                var url = this.get('ghostPaths.url').api('users', 'owner');

                this.get('dropdown').closeDropdowns();

                return this.get('ajax').put(url, {
                    data: {
                        owner: [{
                            id: user.get('id')
                        }]
                    }
                }).then(function (response) {
                    // manually update the roles for the users that just changed roles
                    // because store.pushPayload is not working with embedded relations
                    if (response && (0, _utils.isEmberArray)(response.users)) {
                        response.users.forEach(function (userJSON) {
                            var user = _this4.store.peekRecord('user', userJSON.id);
                            var role = _this4.store.peekRecord('role', userJSON.roles[0].id);

                            user.set('role', role);
                        });
                    }

                    _this4.get('notifications').showAlert('Ownership successfully transferred to ' + user.get('name'), { type: 'success', key: 'owner.transfer.success' });
                }).catch(function (error) {
                    _this4.get('notifications').showAPIError(error, { key: 'owner.transfer' });
                });
            },
            toggleTransferOwnerModal: function toggleTransferOwnerModal() {
                if (this.get('canMakeOwner')) {
                    this.toggleProperty('showTransferOwnerModal');
                }
            },
            toggleUploadCoverModal: function toggleUploadCoverModal() {
                this.toggleProperty('showUploadCoverModal');
            },
            toggleUploadImageModal: function toggleUploadImageModal() {
                this.toggleProperty('showUploadImageModal');
            },


            // TODO: remove those mutation actions once we have better
            // inline validations that auto-clear errors on input
            updatePassword: function updatePassword(password) {
                this.set('user.password', password);
                this.get('user.hasValidated').removeObject('password');
                this.get('user.errors').remove('password');
            },
            updateNewPassword: function updateNewPassword(password) {
                this.set('user.newPassword', password);
                this.get('user.hasValidated').removeObject('newPassword');
                this.get('user.errors').remove('newPassword');
            },
            updateNe2Password: function updateNe2Password(password) {
                this.set('user.ne2Password', password);
                this.get('user.hasValidated').removeObject('ne2Password');
                this.get('user.errors').remove('ne2Password');
            }
        }
    });
});
define('ghost-admin/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _and) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_and.andHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_and.andHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/app-version', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _ember, _environment, _regexp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.appVersion = appVersion;
  var version = _environment.default.APP.version;
  function appVersion(_) {
    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (hash.hideSha) {
      return version.match(_regexp.versionRegExp)[0];
    }

    if (hash.hideVersion) {
      return version.match(_regexp.shaRegExp)[0];
    }

    return version;
  }

  exports.default = _ember.default.Helper.helper(appVersion);
});
define('ghost-admin/helpers/append', ['exports', 'ember-composable-helpers/helpers/append'], function (exports, _append) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _append.default;
    }
  });
  Object.defineProperty(exports, 'append', {
    enumerable: true,
    get: function () {
      return _append.append;
    }
  });
});
define('ghost-admin/helpers/array', ['exports', 'ember-composable-helpers/helpers/array'], function (exports, _array) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _array.default;
    }
  });
  Object.defineProperty(exports, 'array', {
    enumerable: true,
    get: function () {
      return _array.array;
    }
  });
});
define('ghost-admin/helpers/assign', ['exports', 'ember-assign-helper/helpers/assign'], function (exports, _assign) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _assign.default;
    }
  });
  Object.defineProperty(exports, 'assign', {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
});
define('ghost-admin/helpers/camelize', ['exports', 'ember-cli-string-helpers/helpers/camelize'], function (exports, _camelize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _camelize.default;
    }
  });
  Object.defineProperty(exports, 'camelize', {
    enumerable: true,
    get: function () {
      return _camelize.camelize;
    }
  });
});
define('ghost-admin/helpers/cancel-all', ['exports', 'ember', 'ember-concurrency/-helpers'], function (exports, _ember, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cancelHelper = cancelHelper;


  var CANCEL_REASON = "the 'cancel-all' template helper was invoked";

  function cancelHelper(args) {
    var cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      _ember.default.assert('The first argument passed to the `cancel-all` helper should be a Task or TaskGroup (without quotes); you passed ' + cancelable, false);
    }

    return (0, _helpers.taskHelperClosure)('cancelAll', [cancelable, CANCEL_REASON]);
  }

  exports.default = _ember.default.Helper.helper(cancelHelper);
});
define('ghost-admin/helpers/capitalize', ['exports', 'ember-cli-string-helpers/helpers/capitalize'], function (exports, _capitalize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _capitalize.default;
    }
  });
  Object.defineProperty(exports, 'capitalize', {
    enumerable: true,
    get: function () {
      return _capitalize.capitalize;
    }
  });
});
define('ghost-admin/helpers/chunk', ['exports', 'ember-composable-helpers/helpers/chunk'], function (exports, _chunk) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _chunk.default;
    }
  });
  Object.defineProperty(exports, 'chunk', {
    enumerable: true,
    get: function () {
      return _chunk.chunk;
    }
  });
});
define('ghost-admin/helpers/classify', ['exports', 'ember-cli-string-helpers/helpers/classify'], function (exports, _classify) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _classify.default;
    }
  });
  Object.defineProperty(exports, 'classify', {
    enumerable: true,
    get: function () {
      return _classify.classify;
    }
  });
});
define('ghost-admin/helpers/compact', ['exports', 'ember-composable-helpers/helpers/compact'], function (exports, _compact) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compact.default;
    }
  });
  Object.defineProperty(exports, 'compact', {
    enumerable: true,
    get: function () {
      return _compact.compact;
    }
  });
});
define('ghost-admin/helpers/compute', ['exports', 'ember-composable-helpers/helpers/compute'], function (exports, _compute) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compute.default;
    }
  });
  Object.defineProperty(exports, 'compute', {
    enumerable: true,
    get: function () {
      return _compute.compute;
    }
  });
});
define('ghost-admin/helpers/contains', ['exports', 'ember-composable-helpers/helpers/contains'], function (exports, _contains) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
define('ghost-admin/helpers/dasherize', ['exports', 'ember-cli-string-helpers/helpers/dasherize'], function (exports, _dasherize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dasherize.default;
    }
  });
  Object.defineProperty(exports, 'dasherize', {
    enumerable: true,
    get: function () {
      return _dasherize.dasherize;
    }
  });
});
define('ghost-admin/helpers/dec', ['exports', 'ember-composable-helpers/helpers/dec'], function (exports, _dec) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dec.default;
    }
  });
  Object.defineProperty(exports, 'dec', {
    enumerable: true,
    get: function () {
      return _dec.dec;
    }
  });
});
define('ghost-admin/helpers/drop', ['exports', 'ember-composable-helpers/helpers/drop'], function (exports, _drop) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _drop.default;
    }
  });
  Object.defineProperty(exports, 'drop', {
    enumerable: true,
    get: function () {
      return _drop.drop;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-group', ['exports', 'ember-power-select/helpers/ember-power-select-is-group'], function (exports, _emberPowerSelectIsGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsGroup', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectIsSelected) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-true-string-if-present', ['exports', 'ember-power-select/helpers/ember-power-select-true-string-if-present'], function (exports, _emberPowerSelectTrueStringIfPresent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectTrueStringIfPresent', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.emberPowerSelectTrueStringIfPresent;
    }
  });
});
define('ghost-admin/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _equal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_equal.equalHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_equal.equalHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/filter-by', ['exports', 'ember-composable-helpers/helpers/filter-by'], function (exports, _filterBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filterBy.default;
    }
  });
  Object.defineProperty(exports, 'filterBy', {
    enumerable: true,
    get: function () {
      return _filterBy.filterBy;
    }
  });
});
define('ghost-admin/helpers/filter', ['exports', 'ember-composable-helpers/helpers/filter'], function (exports, _filter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filter.default;
    }
  });
  Object.defineProperty(exports, 'filter', {
    enumerable: true,
    get: function () {
      return _filter.filter;
    }
  });
});
define('ghost-admin/helpers/find-by', ['exports', 'ember-composable-helpers/helpers/find-by'], function (exports, _findBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _findBy.default;
    }
  });
  Object.defineProperty(exports, 'findBy', {
    enumerable: true,
    get: function () {
      return _findBy.findBy;
    }
  });
});
define('ghost-admin/helpers/flatten', ['exports', 'ember-composable-helpers/helpers/flatten'], function (exports, _flatten) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flatten.default;
    }
  });
  Object.defineProperty(exports, 'flatten', {
    enumerable: true,
    get: function () {
      return _flatten.flatten;
    }
  });
});
define('ghost-admin/helpers/gh-count-characters', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.countCharacters = countCharacters;
    function countCharacters(params) {
        if (!params || !params.length) {
            return;
        }

        var el = document.createElement('span');
        var content = params[0] || '';

        // convert to array so that we get accurate symbol counts for multibyte chars
        // this will still count emoji+modifer as two chars

        var _Array$from = Array.from(content),
            length = _Array$from.length;

        el.className = 'word-count';

        if (length > 180) {
            el.style.color = '#f05230';
        } else {
            el.style.color = '#738a94';
        }

        el.innerHTML = 200 - length;

        return (0, _emberString.htmlSafe)(el.outerHTML);
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return countCharacters(params);
    });
});
define('ghost-admin/helpers/gh-count-down-characters', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.countDownCharacters = countDownCharacters;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function countDownCharacters(params) {
        if (!params || params.length < 2) {
            return;
        }

        var el = document.createElement('span');

        var _params = _slicedToArray(params, 2),
            content = _params[0],
            maxCharacters = _params[1];

        var _Array$from = Array.from(content || ''),
            length = _Array$from.length;

        el.className = 'word-count';

        if (length > maxCharacters) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9FBB58';
        }

        el.innerHTML = length;

        return (0, _emberString.htmlSafe)(el.outerHTML);
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return countDownCharacters(params);
    });
});
define('ghost-admin/helpers/gh-count-words', ['exports', 'ghost-admin/utils/word-count', 'ember-helper'], function (exports, _wordCount, _emberHelper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = (0, _emberHelper.helper)(function (params) {
        if (!params || !params.length) {
            return;
        }

        var markdown = params[0] || '';

        if (/^\s*$/.test(markdown)) {
            return '0 words';
        }

        var count = (0, _wordCount.default)(markdown);

        return count + (count === 1 ? ' word' : ' words');
    });
});
define('ghost-admin/helpers/gh-format-html', ['exports', 'ghost-admin/utils/caja-sanitizers', 'ember-helper', 'ember-string'], function (exports, _cajaSanitizers, _emberHelper, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = (0, _emberHelper.helper)(function (params) {
        if (!params || !params.length) {
            return;
        }

        var escapedhtml = params[0] || '';

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize HTML
        /* eslint-disable camelcase */
        escapedhtml = html_sanitize(escapedhtml, _cajaSanitizers.default.url, _cajaSanitizers.default.id);
        /* eslint-enable camelcase */

        return (0, _emberString.htmlSafe)(escapedhtml);
    });
});
define('ghost-admin/helpers/gh-format-timeago', ['exports', 'moment', 'ember-helper'], function (exports, _moment, _emberHelper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.timeAgo = timeAgo;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function timeAgo(params) {
        if (!params || !params.length) {
            return;
        }

        var _params = _slicedToArray(params, 1),
            timeago = _params[0];

        return (0, _moment.default)(timeago).from(_moment.default.utc());
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return timeAgo(params);
        // stefanpenner says cool for small number of timeagos.
        // For large numbers moment sucks => single Ember.Object based clock better
        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524
    });
});
define('ghost-admin/helpers/gh-path', ['exports', 'ghost-admin/utils/ghost-paths', 'ember-helper', 'ember-string'], function (exports, _ghostPaths, _emberHelper, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = (0, _emberHelper.helper)(function (params) {
        var paths = (0, _ghostPaths.default)();

        var _params = _slicedToArray(params, 2),
            path = _params[0],
            url = _params[1];

        var base = void 0;

        if (!path) {
            path = 'blog';
        }

        if (!/^(blog|admin|asset|api)$/.test(path)) {
            url = path;
            path = 'blog';
        }

        switch (path.toString()) {
            case 'blog':
                base = paths.blogRoot;
                break;
            case 'admin':
                base = paths.adminRoot;
                break;
            case 'asset':
                base = paths.assetRoot;
                break;
            case 'api':
                base = paths.apiRoot;
                break;
            default:
                base = paths.blogRoot;
                break;
        }

        // handle leading and trailing slashes

        base = base[base.length - 1] !== '/' ? base + '/' : base;

        if (url && url.length > 0) {
            if (url[0] === '/') {
                url = url.substr(1);
            }

            base = base + url;
        }

        return (0, _emberString.htmlSafe)(base);
    });
});
define('ghost-admin/helpers/gh-user-can-admin', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ghUserCanAdmin = ghUserCanAdmin;


    // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
    // Usage: call helper as with aparameter of session.user
    // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
    // @param session.user

    function ghUserCanAdmin(params) {
        return !!(params[0].get('isOwner') || params[0].get('isAdmin'));
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return ghUserCanAdmin(params);
    });
});
define('ghost-admin/helpers/group-by', ['exports', 'ember-composable-helpers/helpers/group-by'], function (exports, _groupBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _groupBy.default;
    }
  });
  Object.defineProperty(exports, 'groupBy', {
    enumerable: true,
    get: function () {
      return _groupBy.groupBy;
    }
  });
});
define('ghost-admin/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _gt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_gt.gtHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_gt.gtHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _gte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_gte.gteHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_gte.gteHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/has-next', ['exports', 'ember-composable-helpers/helpers/has-next'], function (exports, _hasNext) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasNext.default;
    }
  });
  Object.defineProperty(exports, 'hasNext', {
    enumerable: true,
    get: function () {
      return _hasNext.hasNext;
    }
  });
});
define('ghost-admin/helpers/has-previous', ['exports', 'ember-composable-helpers/helpers/has-previous'], function (exports, _hasPrevious) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasPrevious.default;
    }
  });
  Object.defineProperty(exports, 'hasPrevious', {
    enumerable: true,
    get: function () {
      return _hasPrevious.hasPrevious;
    }
  });
});
define('ghost-admin/helpers/highlighted-text', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.highlightedText = highlightedText;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function highlightedText(_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            text = _ref2[0],
            termToHighlight = _ref2[1];

        return (0, _emberString.htmlSafe)(text.replace(new RegExp(termToHighlight, 'ig'), '<span class="highlight">$&</span>'));
    }

    exports.default = (0, _emberHelper.helper)(highlightedText);
});
define('ghost-admin/helpers/html-safe', ['exports', 'ember-cli-string-helpers/helpers/html-safe'], function (exports, _htmlSafe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _htmlSafe.default;
    }
  });
  Object.defineProperty(exports, 'htmlSafe', {
    enumerable: true,
    get: function () {
      return _htmlSafe.htmlSafe;
    }
  });
});
define('ghost-admin/helpers/inc', ['exports', 'ember-composable-helpers/helpers/inc'], function (exports, _inc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inc.default;
    }
  });
  Object.defineProperty(exports, 'inc', {
    enumerable: true,
    get: function () {
      return _inc.inc;
    }
  });
});
define('ghost-admin/helpers/inline-svg', ['exports', 'ember-inline-svg/helpers/inline-svg', 'ghost-admin/svgs'], function (exports, _inlineSvg, _svgs) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var helper = void 0;
  if (Ember.Helper && Ember.Helper.helper) {
    helper = Ember.Helper.helper(function (_ref, options) {
      var _ref2 = _slicedToArray(_ref, 1),
          path = _ref2[0];

      return (0, _inlineSvg.inlineSvg)(_svgs.default, path, options);
    });
  } else {
    helper = Ember.Handlebars.makeBoundHelper(function (path, options) {
      return (0, _inlineSvg.inlineSvg)(_svgs.default, path, options.hash || {});
    });
  }

  exports.default = helper;
});
define('ghost-admin/helpers/intersect', ['exports', 'ember-composable-helpers/helpers/intersect'], function (exports, _intersect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _intersect.default;
    }
  });
  Object.defineProperty(exports, 'intersect', {
    enumerable: true,
    get: function () {
      return _intersect.intersect;
    }
  });
});
define('ghost-admin/helpers/invoke', ['exports', 'ember-composable-helpers/helpers/invoke'], function (exports, _invoke) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _invoke.default;
    }
  });
  Object.defineProperty(exports, 'invoke', {
    enumerable: true,
    get: function () {
      return _invoke.invoke;
    }
  });
});
define('ghost-admin/helpers/is-after', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-after'], function (exports, _ember, _environment, _isAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isAfter.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _isArray) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_isArray.isArrayHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_isArray.isArrayHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/is-before', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-before'], function (exports, _ember, _environment, _isBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isBefore.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/is-between', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-between'], function (exports, _ember, _environment, _isBetween) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isBetween.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/is-equal', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isEqual = isEqual;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function isEqual(params) {
        var _params = _slicedToArray(params, 2),
            lhs = _params[0],
            rhs = _params[1];

        return lhs === rhs;
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return isEqual(params);
    });
});
define('ghost-admin/helpers/is-not', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isNot = isNot;
    function isNot(params) {
        return !params;
    }

    exports.default = (0, _emberHelper.helper)(function (params) {
        return isNot(params);
    });
});
define('ghost-admin/helpers/is-same-or-after', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-same-or-after'], function (exports, _ember, _environment, _isSameOrAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isSameOrAfter.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/is-same-or-before', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-same-or-before'], function (exports, _ember, _environment, _isSameOrBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isSameOrBefore.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/is-same', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/is-same'], function (exports, _ember, _environment, _isSame) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _isSame.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/join', ['exports', 'ember-composable-helpers/helpers/join'], function (exports, _join) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _join.default;
    }
  });
  Object.defineProperty(exports, 'join', {
    enumerable: true,
    get: function () {
      return _join.join;
    }
  });
});
define('ghost-admin/helpers/lf-lock-model', ['exports', 'liquid-fire/helpers/lf-lock-model'], function (exports, _lfLockModel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfLockModel.default;
    }
  });
  Object.defineProperty(exports, 'lfLockModel', {
    enumerable: true,
    get: function () {
      return _lfLockModel.lfLockModel;
    }
  });
});
define('ghost-admin/helpers/lf-or', ['exports', 'liquid-fire/helpers/lf-or'], function (exports, _lfOr) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfOr.default;
    }
  });
  Object.defineProperty(exports, 'lfOr', {
    enumerable: true,
    get: function () {
      return _lfOr.lfOr;
    }
  });
});
define('ghost-admin/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _lt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_lt.ltHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_lt.ltHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _lte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_lte.lteHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_lte.lteHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/map-by', ['exports', 'ember-composable-helpers/helpers/map-by'], function (exports, _mapBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _mapBy.default;
    }
  });
  Object.defineProperty(exports, 'mapBy', {
    enumerable: true,
    get: function () {
      return _mapBy.mapBy;
    }
  });
});
define('ghost-admin/helpers/map', ['exports', 'ember-composable-helpers/helpers/map'], function (exports, _map) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _map.default;
    }
  });
  Object.defineProperty(exports, 'map', {
    enumerable: true,
    get: function () {
      return _map.map;
    }
  });
});
define('ghost-admin/helpers/moment-add', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-add'], function (exports, _ember, _environment, _momentAdd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentAdd.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-calendar', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-calendar'], function (exports, _ember, _environment, _momentCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentCalendar.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _momentDuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentDuration.default;
    }
  });
});
define('ghost-admin/helpers/moment-format', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _environment, _momentFormat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentFormat.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-from-now', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _environment, _momentFromNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentFromNow.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-from', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-from'], function (exports, _ember, _environment, _momentFrom) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentFrom.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-subtract', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-subtract'], function (exports, _ember, _environment, _momentSubtract) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentSubtract.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-to-date', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-to-date'], function (exports, _ember, _environment, _momentToDate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentToDate.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-to-now', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _environment, _momentToNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentToNow.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-to', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/helpers/moment-to'], function (exports, _ember, _environment, _momentTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _momentTo.default.extend({
    globalAllowEmpty: !!_ember.default.get(_environment.default, 'moment.allowEmpty')
  });
});
define('ghost-admin/helpers/moment-unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
  Object.defineProperty(exports, 'unix', {
    enumerable: true,
    get: function () {
      return _unix.unix;
    }
  });
});
define('ghost-admin/helpers/moment', ['exports', 'ember-moment/helpers/moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moment.default;
    }
  });
});
define('ghost-admin/helpers/next', ['exports', 'ember-composable-helpers/helpers/next'], function (exports, _next) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _next.default;
    }
  });
  Object.defineProperty(exports, 'next', {
    enumerable: true,
    get: function () {
      return _next.next;
    }
  });
});
define('ghost-admin/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _notEqual) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_notEqual.notEqualHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_notEqual.notEqualHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _not) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_not.notHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_not.notHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/now', ['exports', 'ember-moment/helpers/now'], function (exports, _now) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _now.default;
    }
  });
});
define('ghost-admin/helpers/object-at', ['exports', 'ember-composable-helpers/helpers/object-at'], function (exports, _objectAt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _objectAt.default;
    }
  });
  Object.defineProperty(exports, 'objectAt', {
    enumerable: true,
    get: function () {
      return _objectAt.objectAt;
    }
  });
});
define('ghost-admin/helpers/one-way-select/contains', ['exports', 'ember-one-way-controls/helpers/one-way-select/contains'], function (exports, _contains) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
define('ghost-admin/helpers/optional', ['exports', 'ember-composable-helpers/helpers/optional'], function (exports, _optional) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(exports, 'optional', {
    enumerable: true,
    get: function () {
      return _optional.optional;
    }
  });
});
define('ghost-admin/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _or) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_or.orHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_or.orHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/helpers/perform', ['exports', 'ember', 'ember-concurrency/-helpers'], function (exports, _ember, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.performHelper = performHelper;
  function performHelper(args, hash) {
    return (0, _helpers.taskHelperClosure)('perform', args, hash);
  }

  exports.default = _ember.default.Helper.helper(performHelper);
});
define('ghost-admin/helpers/pipe-action', ['exports', 'ember-composable-helpers/helpers/pipe-action'], function (exports, _pipeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipeAction.default;
    }
  });
});
define('ghost-admin/helpers/pipe', ['exports', 'ember-composable-helpers/helpers/pipe'], function (exports, _pipe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipe.default;
    }
  });
  Object.defineProperty(exports, 'pipe', {
    enumerable: true,
    get: function () {
      return _pipe.pipe;
    }
  });
});
define('ghost-admin/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pluralize.default;
});
define('ghost-admin/helpers/previous', ['exports', 'ember-composable-helpers/helpers/previous'], function (exports, _previous) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _previous.default;
    }
  });
  Object.defineProperty(exports, 'previous', {
    enumerable: true,
    get: function () {
      return _previous.previous;
    }
  });
});
define('ghost-admin/helpers/queue', ['exports', 'ember-composable-helpers/helpers/queue'], function (exports, _queue) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _queue.default;
    }
  });
  Object.defineProperty(exports, 'queue', {
    enumerable: true,
    get: function () {
      return _queue.queue;
    }
  });
});
define('ghost-admin/helpers/range', ['exports', 'ember-composable-helpers/helpers/range'], function (exports, _range) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _range.default;
    }
  });
  Object.defineProperty(exports, 'range', {
    enumerable: true,
    get: function () {
      return _range.range;
    }
  });
});
define('ghost-admin/helpers/reduce', ['exports', 'ember-composable-helpers/helpers/reduce'], function (exports, _reduce) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reduce.default;
    }
  });
  Object.defineProperty(exports, 'reduce', {
    enumerable: true,
    get: function () {
      return _reduce.reduce;
    }
  });
});
define('ghost-admin/helpers/reject-by', ['exports', 'ember-composable-helpers/helpers/reject-by'], function (exports, _rejectBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rejectBy.default;
    }
  });
  Object.defineProperty(exports, 'rejectBy', {
    enumerable: true,
    get: function () {
      return _rejectBy.rejectBy;
    }
  });
});
define('ghost-admin/helpers/repeat', ['exports', 'ember-composable-helpers/helpers/repeat'], function (exports, _repeat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _repeat.default;
    }
  });
  Object.defineProperty(exports, 'repeat', {
    enumerable: true,
    get: function () {
      return _repeat.repeat;
    }
  });
});
define('ghost-admin/helpers/reverse', ['exports', 'ember-composable-helpers/helpers/reverse'], function (exports, _reverse) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reverse.default;
    }
  });
  Object.defineProperty(exports, 'reverse', {
    enumerable: true,
    get: function () {
      return _reverse.reverse;
    }
  });
});
define('ghost-admin/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _routeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _routeAction.default;
    }
  });
});
define('ghost-admin/helpers/shuffle', ['exports', 'ember-composable-helpers/helpers/shuffle'], function (exports, _shuffle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _shuffle.default;
    }
  });
  Object.defineProperty(exports, 'shuffle', {
    enumerable: true,
    get: function () {
      return _shuffle.shuffle;
    }
  });
});
define('ghost-admin/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _singularize.default;
});
define('ghost-admin/helpers/slice', ['exports', 'ember-composable-helpers/helpers/slice'], function (exports, _slice) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _slice.default;
    }
  });
  Object.defineProperty(exports, 'slice', {
    enumerable: true,
    get: function () {
      return _slice.slice;
    }
  });
});
define('ghost-admin/helpers/sort-by', ['exports', 'ember-composable-helpers/helpers/sort-by'], function (exports, _sortBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sortBy.default;
    }
  });
  Object.defineProperty(exports, 'sortBy', {
    enumerable: true,
    get: function () {
      return _sortBy.sortBy;
    }
  });
});
define('ghost-admin/helpers/take', ['exports', 'ember-composable-helpers/helpers/take'], function (exports, _take) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _take.default;
    }
  });
  Object.defineProperty(exports, 'take', {
    enumerable: true,
    get: function () {
      return _take.take;
    }
  });
});
define('ghost-admin/helpers/task', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _toArray(arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  }

  function taskHelper(_ref) {
    var _ref2 = _toArray(_ref),
        task = _ref2[0],
        args = _ref2.slice(1);

    return task._curry.apply(task, _toConsumableArray(args));
  }

  exports.default = _ember.default.Helper.helper(taskHelper);
});
define('ghost-admin/helpers/titleize', ['exports', 'ember-cli-string-helpers/helpers/titleize'], function (exports, _titleize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
  Object.defineProperty(exports, 'titleize', {
    enumerable: true,
    get: function () {
      return _titleize.titleize;
    }
  });
});
define('ghost-admin/helpers/toggle-action', ['exports', 'ember-composable-helpers/helpers/toggle-action'], function (exports, _toggleAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggleAction.default;
    }
  });
});
define('ghost-admin/helpers/toggle', ['exports', 'ember-composable-helpers/helpers/toggle'], function (exports, _toggle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(exports, 'toggle', {
    enumerable: true,
    get: function () {
      return _toggle.toggle;
    }
  });
});
define('ghost-admin/helpers/truncate', ['exports', 'ember-cli-string-helpers/helpers/truncate'], function (exports, _truncate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _truncate.default;
    }
  });
  Object.defineProperty(exports, 'truncate', {
    enumerable: true,
    get: function () {
      return _truncate.truncate;
    }
  });
});
define('ghost-admin/helpers/underscore', ['exports', 'ember-cli-string-helpers/helpers/underscore'], function (exports, _underscore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _underscore.default;
    }
  });
  Object.defineProperty(exports, 'underscore', {
    enumerable: true,
    get: function () {
      return _underscore.underscore;
    }
  });
});
define('ghost-admin/helpers/union', ['exports', 'ember-composable-helpers/helpers/union'], function (exports, _union) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _union.default;
    }
  });
  Object.defineProperty(exports, 'union', {
    enumerable: true,
    get: function () {
      return _union.union;
    }
  });
});
define('ghost-admin/helpers/unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
  Object.defineProperty(exports, 'unix', {
    enumerable: true,
    get: function () {
      return _unix.unix;
    }
  });
});
define('ghost-admin/helpers/w', ['exports', 'ember-cli-string-helpers/helpers/w'], function (exports, _w) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _w.default;
    }
  });
  Object.defineProperty(exports, 'w', {
    enumerable: true,
    get: function () {
      return _w.w;
    }
  });
});
define('ghost-admin/helpers/without', ['exports', 'ember-composable-helpers/helpers/without'], function (exports, _without) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _without.default;
    }
  });
  Object.defineProperty(exports, 'without', {
    enumerable: true,
    get: function () {
      return _without.without;
    }
  });
});
define('ghost-admin/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _xor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var forExport = null;

  if (_ember.default.Helper) {
    forExport = _ember.default.Helper.helper(_xor.xorHelper);
  } else if (_ember.default.HTMLBars.makeBoundHelper) {
    forExport = _ember.default.HTMLBars.makeBoundHelper(_xor.xorHelper);
  }

  exports.default = forExport;
});
define('ghost-admin/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ghost-admin/config/environment'], function (exports, _initializerFactory, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _config$APP = _environment.default.APP,
      name = _config$APP.name,
      version = _config$APP.version;
  exports.default = {
    name: 'App Version',
    initialize: (0, _initializerFactory.default)(name, version)
  };
});
define('ghost-admin/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _containerDebugAdapter.default);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ghost-admin/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/debug', ['exports', 'vertical-collection/-debug'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'vertical-collection-debug',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'ghost-admin/config/environment', 'ghost-admin/mirage/config', 'ember-cli-mirage/server', 'lodash/assign'], function (exports, _readModules, _environment, _config, _server, _assign2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startMirage = startMirage;
  exports.default = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }

      if (_shouldUseMirage(_environment.default.environment, _environment.default['ember-cli-mirage'])) {
        startMirage(_environment.default);
      }
    }
  };
  function startMirage() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _environment.default;

    var environment = env.environment;
    var modules = (0, _readModules.default)(env.modulePrefix);
    var options = (0, _assign2.default)(modules, { environment: environment, baseConfig: _config.default, testConfig: _config.testConfig });

    return new _server.default(options);
  }

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('ghost-admin/initializers/ember-concurrency', ['exports', 'ember-concurrency'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-concurrency',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/index'], function (exports, _setupContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-data',
    initialize: _setupContainer.default
  };
});
define('ghost-admin/initializers/ember-simple-auth', ['exports', 'ember-simple-auth/configuration', 'ghost-admin/config/environment', 'ghost-admin/utils/ghost-paths', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _configuration, _environment, _ghostPaths, _setupSession, _setupSessionService) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        name: 'ember-simple-auth',
        initialize: function initialize(registry) {
            var config = _environment.default['ember-simple-auth'] || {};
            config.baseURL = (0, _ghostPaths.default)().adminRoot;
            _configuration.default.load(config);

            (0, _setupSession.default)(registry);
            (0, _setupSessionService.default)(registry);
        }
    };
});
define('ghost-admin/initializers/event-dispatcher', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.initialize = initialize;
    var EventDispatcher = _ember.default.EventDispatcher;


    var myEventDispatcher = EventDispatcher.extend({
        canDispatchToEventManager: false
    });

    function initialize(application) {
        application.register('event_dispatcher:main', myEventDispatcher);
    }

    exports.default = {
        name: 'event-dispatcher',
        initialize: initialize
    };
});
define('ghost-admin/initializers/export-application-global', ['exports', 'ember', 'ghost-admin/config/environment'], function (exports, _ember, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_environment.default.exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _environment.default.exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember.default.String.classify(_environment.default.modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports.default = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ghost-admin/initializers/hide-loading-screen', ['exports', 'ghost-admin/instance-initializers/hide-loading-screen', 'ember'], function (exports, _hideLoadingScreen, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  var EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:\-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:\-([A-Za-z0-9\.\-]+))?(?:\+([A-Za-z0-9\.\-]+))?$/;

  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   */
  var VERSION_INFO = EMBER_VERSION_REGEX.exec(_ember.default.VERSION);
  var isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      var registry = arguments[0];
      var application = arguments[1];
      _hideLoadingScreen.default.initialize(registry, application);
    }
  }

  exports.default = {
    name: 'hide-loading-screen',
    initialize: initialize
  };
});
define('ghost-admin/initializers/initialize-torii-callback', ['exports', 'torii/redirect-handler'], function (exports, _redirectHandler) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'torii-callback',
    before: 'torii',
    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      application.deferReadiness();
      _redirectHandler.default.handle(window).catch(function () {
        application.advanceReadiness();
      });
    }
  };
});
define('ghost-admin/initializers/initialize-torii-session', ['exports', 'torii/bootstrap/session', 'torii/configuration'], function (exports, _session, _configuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'torii-session',
    after: 'torii',

    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      var configuration = (0, _configuration.getConfiguration)();
      if (!configuration.sessionServiceName) {
        return;
      }

      (0, _session.default)(application, configuration.sessionServiceName);

      var sessionFactoryName = 'service:' + configuration.sessionServiceName;
      application.inject('adapter', configuration.sessionServiceName, sessionFactoryName);
    }
  };
});
define('ghost-admin/initializers/initialize-torii', ['exports', 'torii/bootstrap/torii', 'torii/configuration', 'ghost-admin/config/environment'], function (exports, _torii, _configuration, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var initializer = {
    name: 'torii',
    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      (0, _configuration.configure)(_environment.default.torii || {});
      (0, _torii.default)(application);
      application.inject('route', 'torii', 'service:torii');
    }
  };

  exports.default = initializer;
});
define('ghost-admin/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define("ghost-admin/initializers/liquid-fire", ["exports", "liquid-fire/ember-internals"], function (exports, _emberInternals) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  (0, _emberInternals.initialize)();

  exports.default = {
    name: 'liquid-fire',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/store', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/trailing-hash', ['exports', 'ember-locations/hash'], function (exports, _hash) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var trailingHash = _hash.default.extend({
        formatURL: function formatURL() {
            var url = this._super.apply(this, arguments);

            if (url.indexOf('?') > 0) {
                return url.replace(/([^\/])\?/, '$1/?');
            } else {
                return url.replace(/\/?$/, '/');
            }
        }
    });

    exports.default = {
        name: 'registerTrailingHashLocation',

        initialize: function initialize(application) {
            application.register('location:trailing-hash', trailingHash);
        }
    };
});
define('ghost-admin/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _registerHelper, _and, _or, _equal, _not, _isArray, _notEqual, _gt, _gte, _lt, _lte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember.default.Helper) {
      return;
    }

    (0, _registerHelper.registerHelper)('and', _and.andHelper);
    (0, _registerHelper.registerHelper)('or', _or.orHelper);
    (0, _registerHelper.registerHelper)('eq', _equal.equalHelper);
    (0, _registerHelper.registerHelper)('not', _not.notHelper);
    (0, _registerHelper.registerHelper)('is-array', _isArray.isArrayHelper);
    (0, _registerHelper.registerHelper)('not-eq', _notEqual.notEqualHelper);
    (0, _registerHelper.registerHelper)('gt', _gt.gtHelper);
    (0, _registerHelper.registerHelper)('gte', _gte.gteHelper);
    (0, _registerHelper.registerHelper)('lt', _lt.ltHelper);
    (0, _registerHelper.registerHelper)('lte', _lte.lteHelper);
  }

  exports.default = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('ghost-admin/initializers/upgrade-status', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.initialize = initialize;
    function initialize(application) {
        application.inject('route', 'upgradeStatus', 'service:upgrade-status');
    }

    exports.default = {
        name: 'upgrade-status',
        initialize: initialize
    };
});
define('ghost-admin/initializers/viewport-config', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-in-viewport/utils/can-use-dom'], function (exports, _ember, _environment, _canUseDom) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  var defaultConfig = {
    viewportEnabled: true,
    viewportSpy: false,
    viewportScrollSensitivity: 1,
    viewportRefreshRate: 100,
    viewportListeners: [{ context: window, event: 'scroll.scrollable' }, { context: window, event: 'resize.resizable' }],
    viewportTolerance: {
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    }
  };

  if (_canUseDom.default) {
    defaultConfig.viewportListeners.push({
      context: document,
      event: 'touchmove.scrollable'
    });
  }

  var assign = _ember.default.assign || _ember.default.merge;

  function initialize() {
    var application = arguments[1] || arguments[0];
    var _config$viewportConfi = _environment.default.viewportConfig,
        viewportConfig = _config$viewportConfi === undefined ? {} : _config$viewportConfi;

    var mergedConfig = assign({}, defaultConfig, viewportConfig);

    application.register('config:in-viewport', mergedConfig, { instantiate: false });
  }

  exports.default = {
    name: 'viewport-config',
    initialize: initialize
  };
});
define("ghost-admin/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _initializeStoreService) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "ember-data",
    initialize: _initializeStoreService.default
  };
});
define('ghost-admin/instance-initializers/ember-simple-auth', ['exports', 'ember-simple-auth/instance-initializers/setup-session-restoration'], function (exports, _setupSessionRestoration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-simple-auth',

    initialize: function initialize(instance) {
      (0, _setupSessionRestoration.default)(instance);
    }
  };
});
define('ghost-admin/instance-initializers/hide-loading-screen', ['exports', 'ghost-admin/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  var userConfig = _environment.default['ember-load'] || {};

  function initialize() {
    var instance = arguments[1] || arguments[0];
    var container = !!arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      var ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');

      ApplicationView = ApplicationView.reopen({
        didInsertElement: function didInsertElement() {
          this._super.apply(this, arguments);

          var loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';

          Ember.$('.' + loadingIndicatorClass).remove();
        }
      });
    }
  }

  exports.default = {
    name: 'hide-loading-screen-instance',
    initialize: initialize
  };
});
define('ghost-admin/instance-initializers/jquery-ajax-oauth-prefilter', ['exports', 'jquery', 'ember-platform'], function (exports, _jquery, _emberPlatform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        name: 'jquery-ajax-oauth-prefilter',
        after: 'ember-simple-auth',

        initialize: function initialize(application) {
            var session = application.lookup('service:session');

            _jquery.default.ajaxPrefilter(function (options) {
                session.authorize('authorizer:oauth2', function (headerName, headerValue) {
                    var headerObject = {};

                    headerObject[headerName] = headerValue;
                    options.headers = (0, _emberPlatform.assign)(options.headers || {}, headerObject);
                });
            });
        }
    };
});
define('ghost-admin/instance-initializers/setup-routes', ['exports', 'torii/bootstrap/routing', 'torii/configuration', 'torii/router-dsl-ext'], function (exports, _routing, _configuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'torii-setup-routes',
    initialize: function initialize(applicationInstance, registry) {
      var configuration = (0, _configuration.getConfiguration)();

      if (!configuration.sessionServiceName) {
        return;
      }

      var router = applicationInstance.get('router');
      var setupRoutes = function setupRoutes() {
        var authenticatedRoutes = router.router.authenticatedRoutes;
        var hasAuthenticatedRoutes = !Ember.isEmpty(authenticatedRoutes);
        if (hasAuthenticatedRoutes) {
          (0, _routing.default)(applicationInstance, authenticatedRoutes);
        }
        router.off('willTransition', setupRoutes);
      };
      router.on('willTransition', setupRoutes);
    }
  };
});
define('ghost-admin/instance-initializers/walk-providers', ['exports', 'torii/lib/container-utils', 'torii/configuration'], function (exports, _containerUtils, _configuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'torii-walk-providers',
    initialize: function initialize(applicationInstance) {
      var configuration = (0, _configuration.getConfiguration)();
      // Walk all configured providers and eagerly instantiate
      // them. This gives providers with initialization side effects
      // like facebook-connect a chance to load up assets.
      for (var key in configuration.providers) {
        if (configuration.providers.hasOwnProperty(key)) {
          (0, _containerUtils.lookup)(applicationInstance, 'torii-provider:' + key);
        }
      }
    }
  };
});
define('ghost-admin/mirage/config', ['exports', 'ghost-admin/mirage/config/authentication', 'ghost-admin/mirage/config/configuration', 'ghost-admin/mirage/config/invites', 'ghost-admin/mirage/config/posts', 'ghost-admin/mirage/config/roles', 'ghost-admin/mirage/config/settings', 'ghost-admin/mirage/config/slugs', 'ghost-admin/mirage/config/subscribers', 'ghost-admin/mirage/config/tags', 'ghost-admin/mirage/config/themes', 'ghost-admin/mirage/config/uploads', 'ghost-admin/mirage/config/users'], function (exports, _authentication, _configuration, _invites, _posts, _roles, _settings, _slugs, _subscribers, _tags, _themes, _uploads, _users) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        this.timing = 400; // delay for each request, automatically set to 0 during testing

        // Mock endpoints here to override real API requests during development, eg...
        // this.put('/posts/:id/', versionMismatchResponse);
        // mockTags(this);
        // this.loadFixtures('settings');

        // keep this line, it allows all other API requests to hit the real server
        this.passthrough();

        // add any external domains to make sure those get passed through too
        this.passthrough('https://count.ghost.org/');
        this.passthrough('http://www.gravatar.com/**');
    };

    exports.testConfig = testConfig;


    // Mock all endpoints here as there is no real API during testing
    function testConfig() {
        this.passthrough('/write-coverage'); // For code coverage
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        // this.timing = 400;      // delay for each request, automatically set to 0 during testing
        // this.logging = true;

        (0, _authentication.default)(this);
        (0, _configuration.default)(this);
        (0, _invites.default)(this);
        (0, _posts.default)(this);
        (0, _roles.default)(this);
        (0, _settings.default)(this);
        (0, _slugs.default)(this);
        (0, _subscribers.default)(this);
        (0, _tags.default)(this);
        (0, _themes.default)(this);
        (0, _uploads.default)(this);
        (0, _users.default)(this);

        /* Notifications -------------------------------------------------------- */

        this.get('/notifications/');

        /* Apps - Slack Test Notification --------------------------------------- */

        this.post('/slack/test', function () {
            return {};
        });

        /* External sites ------------------------------------------------------- */

        var downloadCount = 0;
        this.get('https://count.ghost.org/', function () {
            downloadCount++;
            return {
                count: downloadCount
            };
        });

        this.get('http://www.gravatar.com/avatar/:md5', function () {
            return '';
        }, 200);
    }

    // import {versionMismatchResponse} from 'utils';
});
define('ghost-admin/mirage/config/authentication', ['exports', 'jquery', 'ember-cli-mirage', 'ember-utils'], function (exports, _jquery, _emberCliMirage, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockAuthentication;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function mockAuthentication(server) {
        server.post('/authentication/token', function (_ref, _ref2) {
            var roles = _ref.roles,
                users = _ref.users;
            var requestBody = _ref2.requestBody;

            var params = _jquery.default.deparam(requestBody);

            if (params.grant_type === 'authorization_code') {
                // OAuth sign-in
                if (!users.all().models.length) {
                    var role = roles.findBy({ name: 'Owner' });
                    server.create('user', { email: 'oauthtest@example.com', roles: [role] });
                }

                return {
                    access_token: 'MirageAccessToken',
                    expires_in: 172800,
                    refresh_token: 'MirageRefreshToken'
                };
            } else {
                // Password sign-in
                return {
                    access_token: 'MirageAccessToken',
                    expires_in: 172800,
                    refresh_token: 'MirageRefreshToken',
                    token_type: 'Bearer'
                };
            }
        });

        server.post('/authentication/passwordreset', function (schema, request) {
            var _JSON$parse = JSON.parse(request.requestBody),
                passwordreset = _JSON$parse.passwordreset;

            // eslint-disable-next-line ember-suave/prefer-destructuring
            var email = passwordreset[0].email;

            if (email === 'unknown@example.com') {
                return new _emberCliMirage.Response(404, {}, {
                    errors: [{
                        message: 'There is no user with that email address.',
                        errorType: 'NotFoundError'
                    }]
                });
            } else {
                return {
                    passwordreset: [{ message: 'Check your email for further instructions.' }]
                };
            }
        });

        server.get('/authentication/invitation/', function (schema, request) {
            var email = request.queryParams.email;

            var invite = schema.invites.findBy({ email: email });
            var user = schema.users.find(invite.createdBy);
            var valid = !!invite;
            var invitedBy = user && user.name;

            return {
                invitation: [{
                    valid: valid,
                    invitedBy: invitedBy
                }]
            };
        });

        /* Setup ---------------------------------------------------------------- */

        server.post('/authentication/setup', function (_ref3, request) {
            var roles = _ref3.roles,
                users = _ref3.users;

            var _JSON$parse$setup = _slicedToArray(JSON.parse(request.requestBody).setup, 1),
                attrs = _JSON$parse$setup[0];

            var role = roles.findBy({ name: 'Owner' });

            // create owner role unless already exists
            if (!role) {
                role = roles.create({ name: 'Owner' });
            }
            attrs.roles = [role];

            if (!(0, _emberUtils.isBlank)(attrs.email)) {
                attrs.slug = attrs.email.split('@')[0].dasherize();
            }

            // NOTE: server does not use the user factory to fill in blank fields
            return users.create(attrs);
        });

        server.get('/authentication/setup/', function () {
            return {
                setup: [{ status: true }]
            };
        });
    }
});
define('ghost-admin/mirage/config/configuration', ['exports', 'ember-utils'], function (exports, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockConfiguration;
    function mockConfiguration(server) {
        server.get('/configuration/', function (_ref) {
            var db = _ref.db;

            if ((0, _emberUtils.isEmpty)(db.configurations)) {
                server.loadFixtures('configurations');
            }

            return {
                configuration: [db.configurations.find(1)]
            };
        });

        server.get('/configuration/timezones/', function (_ref2) {
            var db = _ref2.db;

            if ((0, _emberUtils.isEmpty)(db.timezones)) {
                server.loadFixtures('timezones');
            }

            return {
                configuration: [{
                    timezones: db.timezones
                }]
            };
        });
    }
});
define('ghost-admin/mirage/config/invites', ['exports', 'moment', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _moment, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockInvites;
    function mockInvites(server) {
        server.get('/invites/', (0, _utils.paginatedResponse)('invites'));

        server.get('/invites/:id', function (schema, request) {
            var id = request.params.id;

            var invite = schema.invites.find(id);

            return invite || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Invite not found.'
                }]
            });
        });

        server.post('/invites/', function (_ref) {
            var invites = _ref.invites;

            var attrs = this.normalizedRequestAttrs();
            var oldInvite = invites.findBy({ email: attrs.email });

            if (oldInvite) {
                oldInvite.destroy();
            }

            /* eslint-disable camelcase */
            attrs.token = invites.all().models.length + '-token';
            attrs.expires = _moment.default.utc().add(1, 'day').valueOf();
            attrs.created_at = _moment.default.utc().format();
            attrs.created_by = 1;
            attrs.updated_at = _moment.default.utc().format();
            attrs.updated_by = 1;
            attrs.status = 'sent';
            /* eslint-enable camelcase */

            return invites.create(attrs);
        });

        server.del('/invites/:id/');
    }
});
define('ghost-admin/mirage/config/posts', ['exports', 'ember-cli-mirage', 'ember-string', 'ember-utils', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _emberString, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockPosts;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function mockPosts(server) {
        server.post('/posts', function (_ref) {
            var posts = _ref.posts;

            var attrs = this.normalizedRequestAttrs();

            // mirage expects `author` to be a reference but we only have an ID
            attrs.authorId = attrs.author;
            delete attrs.author;

            if ((0, _emberUtils.isBlank)(attrs.slug) && !(0, _emberUtils.isBlank)(attrs.title)) {
                attrs.slug = (0, _emberString.dasherize)(attrs.title);
            }

            return posts.create(attrs);
        });

        // TODO: handle author filter
        server.get('/posts/', function (_ref2, _ref3) {
            var posts = _ref2.posts;
            var queryParams = _ref3.queryParams;

            var page = +queryParams.page || 1;
            var limit = +queryParams.limit || 15;
            var status = queryParams.status,
                staticPages = queryParams.staticPages;

            var query = {};
            var models = void 0;

            if (status && status !== 'all') {
                query.status = status;
            }

            if (staticPages === 'false') {
                query.page = false;
            }

            if (staticPages === 'true') {
                query.page = true;
            }

            models = posts.where(query).models;

            return (0, _utils.paginateModelArray)('posts', models, page, limit);
        });

        server.get('/posts/:id/', function (_ref4, _ref5) {
            var posts = _ref4.posts;
            var params = _ref5.params;
            var id = params.id;

            var post = posts.find(id);

            return post || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Post not found.'
                }]
            });
        });

        // Handle embedded author in post
        server.put('/posts/:id/', function (_ref6, request) {
            var posts = _ref6.posts;

            var _JSON$parse = JSON.parse(request.requestBody),
                _JSON$parse$posts = _slicedToArray(_JSON$parse.posts, 1),
                post = _JSON$parse$posts[0];

            var author = post.author;

            delete post.author;

            var savedPost = posts.find(request.params.id).update(post);
            savedPost.authorId = author;
            savedPost.save();

            return savedPost;
        });

        server.del('/posts/:id/');
    }
});
define('ghost-admin/mirage/config/roles', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockRoles;
    function mockRoles(server) {
        server.get('/roles/', function (_ref, _ref2) {
            var roles = _ref.roles;
            var queryParams = _ref2.queryParams;

            if (queryParams.permissions === 'assign') {
                return roles.find([1, 2, 3]);
            }

            return roles.all();
        });
    }
});
define('ghost-admin/mirage/config/settings', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSettings;
    function mockSettings(server) {
        // These endpoints use the raw database & fixtures without going
        // through the ORM at all (meaning no setting model). This is due
        // to https://github.com/samselikoff/ember-cli-mirage/issues/943
        // as far as can be determined.
        // potential TODO: update once the above issue is fixed? We don't really
        // gain anything from using the ORM for settings so it may not be a good idea
        server.get('/settings/', function (_ref, _ref2) {
            var db = _ref.db;
            var queryParams = _ref2.queryParams;
            var type = queryParams.type;

            var filters = type.split(',');
            var settings = [];

            if (!db.settings) {
                server.loadFixtures('settings');
            }

            filters.forEach(function (type) {
                settings.pushObjects(db.settings.where({ type: type }));
            });

            return {
                settings: settings,
                meta: { filters: { type: type } }
            };
        });

        server.put('/settings/', function (_ref3, _ref4) {
            var db = _ref3.db;
            var requestBody = _ref4.requestBody;

            var newSettings = JSON.parse(requestBody).settings;

            newSettings.forEach(function (newSetting) {
                var key = newSetting.key;

                db.settings.update({ key: key }, newSetting);
            });

            return {
                meta: {},
                settings: db.settings
            };
        });
    }
});
define('ghost-admin/mirage/config/slugs', ['exports', 'ember-string'], function (exports, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSlugs;
    function mockSlugs(server) {
        server.get('/slugs/post/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: (0, _emberString.dasherize)(decodeURIComponent(request.params.slug)) }]
            };
        });

        server.get('/slugs/user/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: (0, _emberString.dasherize)(decodeURIComponent(request.params.slug)) }]
            };
        });
    }
});
define('ghost-admin/mirage/config/subscribers', ['exports', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSubscribers;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function mockSubscribers(server) {
        server.get('/subscribers/', (0, _utils.paginatedResponse)('subscribers'));

        server.post('/subscribers/', function (_ref, request) {
            var subscribers = _ref.subscribers;

            var _JSON$parse$subscribe = _slicedToArray(JSON.parse(request.requestBody).subscribers, 1),
                attrs = _JSON$parse$subscribe[0];

            var subscriber = subscribers.findBy({ email: attrs.email });

            if (subscriber) {
                return new _emberCliMirage.Response(422, {}, {
                    errors: [{
                        errorType: 'ValidationError',
                        message: 'Email already exists.',
                        property: 'email'
                    }]
                });
            } else {
                attrs.created_at = new Date();
                attrs.created_by = 0;

                return subscribers.create(attrs);
            }
        });

        server.put('/subscribers/:id/');

        server.post('/subscribers/csv/', function () {
            // NB: we get a raw FormData object with no way to inspect it in Chrome
            // until version 50 adds the additional read methods
            // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility

            server.createList('subscriber', 50);

            return {
                meta: {
                    stats: {
                        imported: 50,
                        duplicates: 3,
                        invalid: 2
                    }
                }
            };
        });

        server.del('/subscribers/:id/');
    }
});
define('ghost-admin/mirage/config/tags', ['exports', 'ember-string', 'ember-utils', 'ghost-admin/mirage/utils'], function (exports, _emberString, _emberUtils, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockTags;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function mockTags(server) {
        server.post('/tags/', function (_ref, _ref2) {
            var tags = _ref.tags;
            var requestBody = _ref2.requestBody;

            var _JSON$parse$tags = _slicedToArray(JSON.parse(requestBody).tags, 1),
                attrs = _JSON$parse$tags[0];

            if ((0, _emberUtils.isBlank)(attrs.slug) && !(0, _emberUtils.isBlank)(attrs.name)) {
                attrs.slug = (0, _emberString.dasherize)(attrs.name);
            }

            // NOTE: this does not use the tag factory to fill in blank fields
            return tags.create(attrs);
        });

        server.get('/tags/', (0, _utils.paginatedResponse)('tags'));

        server.get('/tags/slug/:slug/', function (_ref3, _ref4) {
            var tags = _ref3.tags;
            var slug = _ref4.params.slug;

            // TODO: remove post_count unless requested?
            return tags.findBy({ slug: slug });
        });

        server.put('/tags/:id/');

        server.del('/tags/:id/');
    }
});
define('ghost-admin/mirage/config/themes', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockThemes;


    var themeCount = 1;

    function mockThemes(server) {
        server.get('/themes');

        server.post('/themes/upload/', function (_ref) {
            var themes = _ref.themes;

            // pretender/mirage doesn't currently process FormData so we can't use
            // any info passed in through the request
            var theme = {
                name: 'test-' + themeCount,
                package: {
                    name: 'Test ' + themeCount,
                    version: '0.1'
                }
            };

            themeCount++;

            theme = themes.create(theme);

            return { themes: [theme] };
        });

        server.del('/themes/:theme/', function (_ref2, _ref3) {
            var themes = _ref2.themes;
            var params = _ref3.params;

            themes.findBy({ name: params.theme }).destroy();

            return new _emberCliMirage.Response(204, {}, null);
        });

        server.put('/themes/:theme/activate/', function (_ref4, _ref5) {
            var themes = _ref4.themes;
            var params = _ref5.params;

            themes.all().update('active', false);
            var theme = themes.findBy({ name: params.theme }).update({ active: true });

            return { themes: [theme] };
        });
    }
});
define('ghost-admin/mirage/config/uploads', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockUploads;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var fileUploadResponse = function fileUploadResponse(db, _ref) {
        var requestBody = _ref.requestBody;

        var _requestBody$getAll = requestBody.getAll('uploadimage'),
            _requestBody$getAll2 = _slicedToArray(_requestBody$getAll, 1),
            file = _requestBody$getAll2[0];

        var now = new Date();
        var year = now.getFullYear();
        var month = '' + now.getMonth();

        if (month.length === 1) {
            month = '0' + month;
        }

        return '"/content/images/' + year + '/' + month + '/' + file.name + '"';
    };

    function mockUploads(server) {
        server.post('/uploads/', fileUploadResponse, 200, { timing: 100 });
        server.post('/uploads/icon/', fileUploadResponse, 200, { timing: 100 });
    }
});
define('ghost-admin/mirage/config/users', ['exports', 'ghost-admin/mirage/utils'], function (exports, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockUsers;
    function mockUsers(server) {
        // /users/me = Always return the user with ID=1
        server.get('/users/me/', function (_ref) {
            var users = _ref.users;

            return users.find(1);
        });

        server.get('/users/', function (_ref2, _ref3) {
            var users = _ref2.users;
            var queryParams = _ref3.queryParams;

            var page = +queryParams.page || 1;

            // NOTE: this is naive and only set up to work with queries that are
            // actually used - if you use a different filter in the app, add it here!

            var _users$where = users.where(function (user) {
                var statusMatch = true;

                if (queryParams.filter === 'status:-inactive') {
                    statusMatch = user.status !== 'inactive';
                } else if (queryParams.filter === 'status:inactive') {
                    statusMatch = user.status === 'inactive';
                } else if (queryParams.status && queryParams.status !== 'all') {
                    statusMatch = user.status === queryParams.status;
                }

                return statusMatch;
            }),
                models = _users$where.models;

            return (0, _utils.paginateModelArray)('users', models, page, queryParams.limit);
        });

        server.get('/users/slug/:slug/', function (_ref4, _ref5) {
            var users = _ref4.users;
            var params = _ref5.params,
                queryParams = _ref5.queryParams;

            var user = users.findBy({ slug: params.slug });
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.get('/users/:id', function (_ref6, _ref7) {
            var users = _ref6.users;
            var params = _ref7.params,
                queryParams = _ref7.queryParams;

            var user = users.find(params.id);
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.put('/users/:id/', function (_ref8, _ref9) {
            var users = _ref8.users;
            var params = _ref9.params;
            var id = params.id;


            if (id === 'password') {
                return {
                    password: [{ message: 'Password changed successfully.' }]
                };
            } else {
                var attrs = this.normalizedRequestAttrs();

                // TODO: why is our custom serializer causing .update to throw
                // children.update is not a function?
                // https://github.com/samselikoff/ember-cli-mirage/issues/964
                delete attrs.roles;

                return users.find(id).update(attrs);
            }
        });

        server.del('/users/:id/');
    }
});
define('ghost-admin/mirage/factories/invite', ['exports', 'moment', 'ember-cli-mirage'], function (exports, _moment, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        token: function token(i) {
            return i + '-token';
        },
        email: function email(i) {
            return 'invited-user-' + i + '@example.com';
        },
        expires: function expires() {
            return _moment.default.utc().add(1, 'day').valueOf();
        },
        createdAt: function createdAt() {
            return _moment.default.utc().format();
        },
        createdBy: function createdBy() {
            return 1;
        },
        updatedAt: function updatedAt() {
            return _moment.default.utc().format();
        },
        updatedBy: function updatedBy() {
            return 1;
        },
        status: function status() {
            return 'sent';
        },
        roleId: function roleId() {
            return 1;
        }
    });
});
define('ghost-admin/mirage/factories/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        dismissible: true,
        message: 'This is an alert',
        status: 'alert',
        type: 'error'
    });
});
define('ghost-admin/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        uuid: function uuid(i) {
            return 'post-' + i;
        },
        title: function title(i) {
            return 'Post ' + i;
        },
        description: function description(i) {
            return 'Title for post ' + i + '.';
        },
        slug: function slug(i) {
            return 'post-' + i;
        },
        html: function html(i) {
            return '<p>HTML for post ' + i + '.</p>';
        },
        plaintext: function plaintext(i) {
            return 'Plaintext for post ' + i + '.';
        },
        featureImage: function featureImage(i) {
            return '/content/images/2015/10/post-' + i + '.jpg';
        },

        featured: false,
        page: false,
        status: function status(i) {
            return _emberCliMirage.faker.list.cycle('draft', 'published', 'scheduled')(i);
        },
        metaDescription: function metaDescription(i) {
            return 'Meta description for post ' + i + '.';
        },
        metaTitle: function metaTitle(i) {
            return 'Meta Title for post ' + i;
        },

        authorId: 1,
        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        publishedAt: '2015-12-19T16:25:07.000Z',
        publishedBy: 1,
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        tags: []
    });
});
define('ghost-admin/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        createdAt: '2013-11-25T14:48:11.000Z',
        createdBy: 1,
        description: function description(i) {
            return 'Role ' + i;
        },

        name: '',
        updatedAt: '2013-11-25T14:48:11.000Z',
        updatedBy: 1
    });
});
define('ghost-admin/mirage/factories/subscriber', ['exports', 'moment', 'ember-cli-mirage'], function (exports, _moment, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var randomDate = function randomDate() {
        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment.default)().subtract(30, 'days').toDate();
        var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();

        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    };

    var statuses = ['pending', 'subscribed'];

    exports.default = _emberCliMirage.Factory.extend({
        name: function name() {
            return _emberCliMirage.faker.name.firstName() + ' ' + _emberCliMirage.faker.name.lastName();
        },

        email: _emberCliMirage.faker.internet.email,
        status: function status() {
            return statuses[Math.floor(Math.random() * statuses.length)];
        },
        createdAt: function createdAt() {
            return randomDate();
        },

        updatedAt: null,
        createdBy: 0,
        updatedBy: null,
        unsubscribedAt: null
    });
});
define('ghost-admin/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        description: function description(i) {
            return 'Description for tag ' + i + '.';
        },

        visibility: 'public',
        featureImage: function featureImage(i) {
            return '/content/images/2015/10/tag-' + i + '.jpg';
        },
        metaDescription: function metaDescription(i) {
            return 'Meta description for tag ' + i + '.';
        },
        metaTitle: function metaTitle(i) {
            return 'Meta Title for tag ' + i;
        },
        name: function name(i) {
            return 'Tag ' + i;
        },

        parent: null,
        slug: function slug(i) {
            return 'tag-' + i;
        },

        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        count: function count() {
            return {
                posts: 1
            };
        }
    });
});
define('ghost-admin/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        accessibility: null,
        bio: null,
        coverImage: null,
        createdAt: '2015-09-02T13:41:50.000Z',
        createdBy: null,
        email: function email(i) {
            return 'user-' + i + '@example.com';
        },

        profileImage: '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x',
        lastLogin: '2015-11-02T16:12:05.000Z',
        location: null,
        metaDescription: null,
        metaTitle: null,
        name: function name(i) {
            return 'User ' + i;
        },
        slug: function slug(i) {
            return 'user-' + i;
        },

        status: 'active',
        tour: null,
        updatedAt: '2015-11-02T16:12:05.000Z',
        updatedBy: '2015-09-02T13:41:50.000Z',
        website: 'http://example.com',
        roles: []
    });
});
define('ghost-admin/mirage/fixtures/configurations', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        blogTitle: 'Test Blog',
        blogUrl: window.location.origin + '/',
        clientId: 'ghost-admin',
        clientSecret: '1234ClientSecret',
        fileStorage: 'true',
        // these are valid attrs but we want password auth by default in tests
        // ghostAuthId: '1234GhostAuthId',
        // ghostAuthUrl: 'http://devauth.ghost.org:8080',
        internalTags: 'false',
        publicAPI: 'false',
        routeKeywords: {
            tag: 'tag',
            author: 'author',
            page: 'page',
            preview: 'p',
            private: 'private'
        },
        useGravatar: 'true'
    }];
});
define('ghost-admin/mirage/fixtures/roles', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        id: 1,
        name: 'Administrator',
        description: 'Administrators',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 2,
        name: 'Editor',
        description: 'Editors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 3,
        name: 'Author',
        description: 'Authors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 4,
        name: 'Owner',
        description: 'Blog Owner',
        created_at: '2015-11-13T16:01:29.132Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.132Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/settings', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        id: 1,
        created_at: '2015-09-11T09:44:30.805Z',
        created_by: 1,
        key: 'title',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.195Z',
        updated_by: 1,
        value: 'Test Blog'
    }, {
        id: 2,
        created_at: '2015-09-11T09:44:30.806Z',
        created_by: 1,
        key: 'description',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.198Z',
        updated_by: 1,
        value: 'Thoughts, stories and ideas.'
    }, {
        id: 3,
        key: 'logo',
        value: '/content/images/2013/Nov/logo.png',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.273Z',
        updated_by: 1
    }, {
        id: 4,
        key: 'cover_image',
        value: '/content/images/2014/Feb/cover.jpg',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }, {
        id: 5,
        key: 'default_lang',
        value: 'en_US',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.278Z',
        updated_by: 1
    }, {
        id: 7,
        key: 'force_i18n',
        value: 'true',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.280Z',
        updated_by: 1
    }, {
        id: 9,
        key: 'permalinks',
        value: '/:slug/',
        type: 'blog',
        created_at: '2014-01-14T12:01:51.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.282Z',
        updated_by: 1
    }, {
        id: 10,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_head',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 11,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_foot',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 12,
        key: 'labs',
        value: '{"subscribers":true}',
        type: 'blog',
        created_at: '2015-01-12T18:29:01.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.288Z',
        updated_by: 1
    }, {
        id: 13,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'navigation',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: JSON.stringify([{ label: 'Home', url: '/' }, { label: 'About', url: '/about' }])
    }, {
        id: 14,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'is_private',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: false
    }, {
        id: 15,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'password',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: ''
    }, {
        id: 16,
        created_at: '2016-05-05T15:04:03.115Z',
        created_by: 1,
        key: 'slack',
        type: 'blog',
        updated_at: '2016-05-05T18:33:09.168Z',
        updated_by: 1,
        value: '[{"url":""}]'
    }, {
        id: 17,
        created_at: '2016-05-05T15:40:12.133Z',
        created_by: 1,
        key: 'facebook',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.953Z',
        updated_by: 1,
        value: 'test'
    }, {
        id: 18,
        created_at: '2016-05-05T15:40:12.134Z',
        created_by: 1,
        key: 'twitter',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.954Z',
        updated_by: 1,
        value: '@test'
    }, {
        id: 19,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'active_timezone',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: 'Etc/UTC'
    }, {
        id: 21,
        created_at: '2017-01-09T08:40:59.000Z',
        created_by: 1,
        key: 'amp',
        type: 'blog',
        updated_at: '2017-01-09T08:49:42.991Z',
        updated_by: 1,
        value: 'true'
    }, {
        id: 22,
        key: 'icon',
        value: '/content/images/2014/Feb/favicon.ico',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/themes', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        name: 'casper',
        package: {
            name: 'Blog',
            version: '1.0'
        },
        active: true
    }, {
        name: 'foo',
        package: {
            name: 'Foo',
            version: '0.1'
        }
    }, {
        name: 'bar'
    }];
});
define('ghost-admin/mirage/fixtures/timezones', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        name: 'Pacific/Pago_Pago',
        label: '(GMT -11:00) Midway Island, Samoa'
    }, {
        name: 'Pacific/Honolulu',
        label: '(GMT -10:00) Hawaii'
    }, {
        name: 'America/Anchorage',
        label: '(GMT -9:00) Alaska'
    }, {
        name: 'America/Tijuana',
        label: '(GMT -8:00) Chihuahua, La Paz, Mazatlan'
    }, {
        name: 'America/Los_Angeles',
        label: '(GMT -8:00) Pacific Time (US & Canada); Tijuana'
    }, {
        name: 'America/Phoenix',
        label: '(GMT -7:00) Arizona'
    }, {
        name: 'America/Denver',
        label: '(GMT -7:00) Mountain Time (US & Canada)'
    }, {
        name: 'America/Costa_Rica',
        label: '(GMT -6:00) Central America'
    }, {
        name: 'America/Chicago',
        label: '(GMT -6:00) Central Time (US & Canada)'
    }, {
        name: 'America/Mexico_City',
        label: '(GMT -6:00) Guadalajara, Mexico City, Monterrey'
    }, {
        name: 'America/Regina',
        label: '(GMT -6:00) Saskatchewan'
    }, {
        name: 'America/Bogota',
        label: '(GMT -5:00) Bogota, Lima, Quito'
    }, {
        name: 'America/New_York',
        label: '(GMT -5:00) Eastern Time (US & Canada)'
    }, {
        name: 'America/Fort_Wayne',
        label: '(GMT -5:00) Indiana (East)'
    }, {
        name: 'America/Caracas',
        label: '(GMT -4:00) Caracas, La Paz'
    }, {
        name: 'America/Halifax',
        label: '(GMT -4:00) Atlantic Time (Canada); Brasilia, Greenland'
    }, {
        name: 'America/Santiago',
        label: '(GMT -4:00) Santiago'
    }, {
        name: 'America/St_Johns',
        label: '(GMT -3:30) Newfoundland'
    }, {
        name: 'America/Argentina/Buenos_Aires',
        label: '(GMT -3:00) Buenos Aires, Georgetown'
    }, {
        name: 'America/Noronha',
        label: '(GMT -2:00) Fernando de Noronha'
    }, {
        name: 'Atlantic/Azores',
        label: '(GMT -1:00) Azores'
    }, {
        name: 'Atlantic/Cape_Verde',
        label: '(GMT -1:00) Cape Verde Is.'
    }, {
        name: 'Etc/UTC',
        label: '(GMT) UTC'
    }, {
        name: 'Africa/Casablanca',
        label: '(GMT +0:00) Casablanca, Monrovia'
    }, {
        name: 'Europe/Dublin',
        label: '(GMT +0:00) Dublin, Edinburgh, London'
    }, {
        name: 'Europe/Amsterdam',
        label: '(GMT +1:00) Amsterdam, Berlin, Rome, Stockholm, Vienna'
    }, {
        name: 'Europe/Prague',
        label: '(GMT +1:00) Belgrade, Bratislava, Budapest, Prague'
    }, {
        name: 'Europe/Paris',
        label: '(GMT +1:00) Brussels, Copenhagen, Madrid, Paris'
    }, {
        name: 'Europe/Warsaw',
        label: '(GMT +1:00) Sarajevo, Skopje, Warsaw, Zagreb'
    }, {
        name: 'Africa/Lagos',
        label: '(GMT +1:00) West Central Africa'
    }, {
        name: 'Europe/Istanbul',
        label: '(GMT +2:00) Athens, Beirut, Bucharest, Istanbul'
    }, {
        name: 'Africa/Cairo',
        label: '(GMT +2:00) Cairo, Egypt'
    }, {
        name: 'Africa/Maputo',
        label: '(GMT +2:00) Harare'
    }, {
        name: 'Europe/Kiev',
        label: '(GMT +2:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'
    }, {
        name: 'Asia/Jerusalem',
        label: '(GMT +2:00) Jerusalem'
    }, {
        name: 'Africa/Johannesburg',
        label: '(GMT +2:00) Pretoria'
    }, {
        name: 'Asia/Baghdad',
        label: '(GMT +3:00) Baghdad'
    }, {
        name: 'Asia/Riyadh',
        label: '(GMT +3:00) Kuwait, Nairobi, Riyadh'
    }, {
        name: 'Europe/Moscow',
        label: '(GMT +3:00) Moscow, St. Petersburg, Volgograd'
    }, {
        name: 'Asia/Tehran',
        label: '(GMT +3:30) Tehran'
    }, {
        name: 'Asia/Dubai',
        label: '(GMT +4:00) Abu Dhabi, Muscat'
    }, {
        name: 'Asia/Baku',
        label: '(GMT +4:00) Baku, Tbilisi, Yerevan'
    }, {
        name: 'Asia/Kabul',
        label: '(GMT +4:30) Kabul'
    }, {
        name: 'Asia/Karachi',
        label: '(GMT +5:00) Islamabad, Karachi, Tashkent'
    }, {
        name: 'Asia/Yekaterinburg',
        label: '(GMT +5:00) Yekaterinburg'
    }, {
        name: 'Asia/Kolkata',
        label: '(GMT +5:30) Chennai, Calcutta, Mumbai, New Delhi'
    }, {
        name: 'Asia/Kathmandu',
        label: '(GMT +5:45) Katmandu'
    }, {
        name: 'Asia/Almaty',
        label: '(GMT +6:00) Almaty, Novosibirsk'
    }, {
        name: 'Asia/Dhaka',
        label: '(GMT +6:00) Astana, Dhaka, Sri Jayawardenepura'
    }, {
        name: 'Asia/Rangoon',
        label: '(GMT +6:30) Rangoon'
    }, {
        name: 'Asia/Bangkok',
        label: '(GMT +7:00) Bangkok, Hanoi, Jakarta'
    }, {
        name: 'Asia/Krasnoyarsk',
        label: '(GMT +7:00) Krasnoyarsk'
    }, {
        name: 'Asia/Hong_Kong',
        label: '(GMT +8:00) Beijing, Chongqing, Hong Kong, Urumqi'
    }, {
        name: 'Asia/Irkutsk',
        label: '(GMT +8:00) Irkutsk, Ulaan Bataar'
    }, {
        name: 'Asia/Singapore',
        label: '(GMT +8:00) Kuala Lumpur, Perth, Singapore, Taipei'
    }, {
        name: 'Asia/Tokyo',
        label: '(GMT +9:00) Osaka, Sapporo, Tokyo'
    }, {
        name: 'Asia/Seoul',
        label: '(GMT +9:00) Seoul'
    }, {
        name: 'Asia/Yakutsk',
        label: '(GMT +9:00) Yakutsk'
    }, {
        name: 'Australia/Adelaide',
        label: '(GMT +9:30) Adelaide'
    }, {
        name: 'Australia/Darwin',
        label: '(GMT +9:30) Darwin'
    }, {
        name: 'Australia/Brisbane',
        label: '(GMT +10:00) Brisbane, Guam, Port Moresby'
    }, {
        name: 'Australia/Sydney',
        label: '(GMT +10:00) Canberra, Hobart, Melbourne, Sydney, Vladivostok'
    }, {
        name: 'Asia/Magadan',
        label: '(GMT +11:00) Magadan, Soloman Is., New Caledonia'
    }, {
        name: 'Pacific/Auckland',
        label: '(GMT +12:00) Auckland, Wellington'
    }, {
        name: 'Pacific/Fiji',
        label: '(GMT +12:00) Fiji, Kamchatka, Marshall Is.'
    }, {
        name: 'Pacific/Kwajalein',
        label: '(GMT +12:00) International Date Line West'
    }];
});
define('ghost-admin/mirage/models/invite', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        author: (0, _emberCliMirage.belongsTo)('user')
    });
});
define('ghost-admin/mirage/models/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/subscriber', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/theme', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        // used by the serializer to determine whether
        // or not to include the post count
        postCount: false,

        roles: (0, _emberCliMirage.hasMany)(),
        posts: (0, _emberCliMirage.hasMany)('post', { inverse: 'author' })
    });
});
define('ghost-admin/mirage/scenarios/default', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (server) {
        // Seed your development database using your factories. This
        // data will not be loaded in your tests.

        // server.createList('contact', 10);

        server.createList('subscriber', 125);
        server.createList('tag', 100);
    };
});
define('ghost-admin/mirage/serializers/application', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector', 'ember-string'], function (exports, _emberCliMirage, _inflector, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _emberCliMirage.RestSerializer.extend({
        keyForAttribute: function keyForAttribute(attr) {
            return (0, _emberString.underscore)(attr);
        },
        serialize: function serialize(object, request) {
            // Ember expects pluralized responses for the post, user, and invite models,
            // and this shortcut will ensure that those models are pluralized
            if (this.isModel(object) && ['post', 'user', 'invite'].includes(object.modelName)) {
                object = new _emberCliMirage.Collection(object.modelName, [object]);
            }

            var json = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

            if (this.isCollection(object) && object.meta) {
                json.meta = object.meta;
            }

            return json;
        },


        // POST and PUT request send data in pluralized attributes for all models,
        // so we extract it here - this allows #normalizedRequestAttrs to work
        // in route functions
        normalize: function normalize(body, modelName) {
            // sometimes mirage doesn't include a modelName, so we extrapolate it from
            // the first element of Object.keys
            modelName = (0, _inflector.pluralize)(modelName) || Object.keys(body)[0];

            var _ref = body[modelName] || [{}],
                _ref2 = _slicedToArray(_ref, 1),
                attributes = _ref2[0];

            return { data: { attributes: attributes } };
        }
    });
});
define('ghost-admin/mirage/serializers/user', ['exports', 'ghost-admin/mirage/serializers/application', 'ember-cli-mirage'], function (exports, _application, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _application.default.extend({
        serialize: function serialize(object, request) {
            if (this.isCollection(object)) {
                return _application.default.prototype.serialize.apply(this, arguments);
            }

            var _RestSerializer$proto = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request),
                user = _RestSerializer$proto.user;

            if (object.postCount) {
                var posts = object.posts.models.length;

                user.count = { posts: posts };
            }

            var roles = _application.default.prototype.serialize.call(this, object.roles, request);

            var _roles$roles = _slicedToArray(roles.roles, 1),
                role = _roles$roles[0];

            if (role) {
                user.roles = [role];
            }

            return { users: [user] };
        }
    });
});
define('ghost-admin/mirage/utils', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.paginatedResponse = paginatedResponse;
    exports.paginateModelArray = paginateModelArray;
    exports.maintenanceResponse = maintenanceResponse;
    exports.versionMismatchResponse = versionMismatchResponse;

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    function paginatedResponse(modelName) {
        return function (schema, request) {
            var page = +request.queryParams.page || 1;
            var limit = +request.queryParams.limit || 15;
            var allModels = this.serialize(schema[modelName].all())[modelName];

            return paginateModelArray(modelName, allModels, page, limit);
        };
    }

    function paginateModelArray(modelName, allModels, page, limit) {
        var pages = void 0,
            next = void 0,
            prev = void 0,
            models = void 0;

        if (limit === 'all') {
            pages = 1;
        } else {
            limit = +limit;

            var start = (page - 1) * limit;
            var end = start + limit;

            pages = Math.ceil(allModels.length / limit);
            models = allModels.slice(start, end);

            if (start > 0) {
                prev = page - 1;
            }

            if (end < allModels.length) {
                next = page + 1;
            }
        }

        return _defineProperty({
            meta: {
                pagination: {
                    page: page,
                    limit: limit,
                    pages: pages,
                    total: allModels.length,
                    next: next || null,
                    prev: prev || null
                }
            }
        }, modelName, models || allModels);
    }

    function maintenanceResponse() {
        return new _emberCliMirage.Response(503, {}, {
            errors: [{
                errorType: 'Maintenance'
            }]
        });
    }

    function versionMismatchResponse() {
        return new _emberCliMirage.Response(400, {}, {
            errors: [{
                errorType: 'VersionMismatchError'
            }]
        });
    }
});
define('ghost-admin/mixins/active-link', ['exports', 'ember-cli-active-link-wrapper/mixins/active-link'], function (exports, _activeLink) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _activeLink.default;
});
define('ghost-admin/mixins/body-event-listener', ['exports', 'jquery', 'ember-metal/mixin', 'ember-runloop'], function (exports, _jquery, _mixin, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    function K() {
        return this;
    }

    // Code modified from Addepar/ember-widgets
    // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39

    exports.default = _mixin.default.create({
        bodyElementSelector: 'html',
        bodyClick: K,

        init: function init() {
            this._super.apply(this, arguments);

            return _emberRunloop.default.next(this, this._setupDocumentHandlers);
        },
        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);

            return this._removeDocumentHandlers();
        },
        _setupDocumentHandlers: function _setupDocumentHandlers() {
            var _this = this;

            if (this._clickHandler) {
                return;
            }

            this._clickHandler = function (event) {
                return _this.bodyClick(event);
            };

            return (0, _jquery.default)(this.get('bodyElementSelector')).on('click', this._clickHandler);
        },
        _removeDocumentHandlers: function _removeDocumentHandlers() {
            (0, _jquery.default)(this.get('bodyElementSelector')).off('click', this._clickHandler);
            this._clickHandler = null;
        },


        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
        click: function click(event) {
            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/current-user-settings', ['exports', 'ember-metal/mixin'], function (exports, _mixin) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        transitionAuthor: function transitionAuthor() {
            var _this = this;

            return function (user) {
                if (user.get('isAuthor')) {
                    return _this.transitionTo('team.user', user);
                }

                return user;
            };
        },
        transitionEditor: function transitionEditor() {
            var _this2 = this;

            return function (user) {
                if (user.get('isEditor')) {
                    return _this2.transitionTo('team');
                }

                return user;
            };
        }
    });
});
define('ghost-admin/mixins/dropdown-mixin', ['exports', 'ember-evented', 'ember-metal/mixin'], function (exports, _emberEvented, _mixin) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create(_emberEvented.default, {
        classNameBindings: ['isOpen:open:closed'],
        isOpen: false,

        click: function click(event) {
            this._super(event);

            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/editor-base-controller', ['exports', 'ember', 'ember-metal/mixin', 'ghost-admin/models/post', 'ghost-admin/utils/bound-one-way', 'ember-computed', 'ghost-admin/utils/ghost-paths', 'ember-controller/inject', 'ember-service/inject', 'ghost-admin/utils/isNumber', 'moment', 'ember-string', 'ember-utils', 'ember-array/utils', 'ember-ajax/errors', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _ember, _mixin, _post, _boundOneWay, _emberComputed, _ghostPaths, _inject, _inject2, _isNumber, _moment, _emberString, _emberUtils, _utils, _errors, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;


    // this array will hold properties we need to watch
    // to know if the model has been changed (`controller.hasDirtyAttributes`)
    var watchedProps = ['model.scratch', 'model.titleScratch', 'model.hasDirtyAttributes', 'model.tags.[]'];

    var DEFAULT_TITLE = '(Untitled)';

    // time in ms to save after last content edit
    var AUTOSAVE_TIMEOUT = 3000;
    // time in ms to force a save if the user is continuously typing
    var TIMEDSAVE_TIMEOUT = 60000;

    _post.default.eachAttribute(function (name) {
        watchedProps.push('model.' + name);
    });

    exports.default = _mixin.default.create({

        showLeaveEditorModal: false,
        showReAuthenticateModal: false,
        showDeletePostModal: false,
        shouldFocusEditor: true,

        application: (0, _inject.default)(),
        notifications: (0, _inject2.default)(),
        clock: (0, _inject2.default)(),
        slugGenerator: (0, _inject2.default)(),

        wordcount: 0,
        cards: [], // for apps
        atoms: [], // for apps
        toolbar: [], // for apps
        apiRoot: (0, _ghostPaths.default)().apiRoot,
        assetPath: (0, _ghostPaths.default)().assetRoot,
        editor: null,
        editorMenuIsOpen: false,

        navIsClosed: (0, _emberComputed.reads)('application.autoNav'),

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            window.onbeforeunload = function () {
                return _this.get('hasDirtyAttributes') ? _this.unloadDirtyMessage() : null;
            };
        },


        _canAutosave: (0, _emberComputed.default)('model.isDraft', function () {
            return !testing && this.get('model.isDraft');
        }),

        // save 3 seconds after the last edit
        _autosave: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!(this.get('_canAutosave') && this.get('model.isNew'))) {
                                _context.next = 2;
                                break;
                            }

                            return _context.abrupt('return', this.get('autosave').perform());

                        case 2:
                            _context.next = 4;
                            return (0, _emberConcurrency.timeout)(AUTOSAVE_TIMEOUT);

                        case 4:

                            if (this.get('_canAutosave')) {
                                this.get('autosave').perform();
                            }

                        case 5:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        })).restartable(),

        // save at 60 seconds even if the user doesn't stop typing
        _timedSave: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee2() {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!(!testing && true)) {
                                _context2.next = 6;
                                break;
                            }

                            _context2.next = 3;
                            return (0, _emberConcurrency.timeout)(TIMEDSAVE_TIMEOUT);

                        case 3:

                            if (this.get('_canAutosave')) {
                                this.get('autosave').perform();
                            }
                            _context2.next = 0;
                            break;

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        })).drop(),

        // separate task for autosave so that it doesn't override a manual save
        autosave: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee3() {
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (this.get('save.isRunning')) {
                                _context3.next = 4;
                                break;
                            }

                            _context3.next = 3;
                            return this.get('save').perform({
                                silent: true,
                                backgroundSave: true
                            });

                        case 3:
                            return _context3.abrupt('return', _context3.sent);

                        case 4:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        })).drop(),

        _autosaveRunning: (0, _emberComputed.default)('_autosave.isRunning', '_timedSave.isRunning', function () {
            var autosave = this.get('_autosave.isRunning');
            var timedsave = this.get('_timedSave.isRunning');

            return autosave || timedsave;
        }),

        // updateSlug and save should always be enqueued so that we don't run into
        // problems with concurrency, for example when Cmd-S is pressed whilst the
        // cursor is in the slug field - that would previously trigger a simultaneous
        // slug update and save resulting in ember data errors and inconsistent save
        // results
        saveTasks: (0, _emberConcurrency.taskGroup)().enqueue(),

        // save tasks cancels autosave before running, although this cancels the
        // _xSave tasks  that will also cancel the autosave task
        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee4() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var prevStatus, isNew, status, model, errorOrMessages;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            prevStatus = this.get('model.status');
                            isNew = this.get('model.isNew');
                            status = void 0;


                            this.send('cancelAutosave');

                            if (!(options.backgroundSave && !this.get('hasDirtyAttributes'))) {
                                _context4.next = 6;
                                break;
                            }

                            return _context4.abrupt('return');

                        case 6:

                            if (options.backgroundSave) {
                                // do not allow a post's status to be set to published by a background save
                                status = 'draft';
                            } else {
                                if (this.get('post.pastScheduledTime')) {
                                    status = !this.get('willSchedule') && !this.get('willPublish') ? 'draft' : 'published';
                                } else {
                                    if (this.get('willPublish') && !this.get('model.isScheduled') && !this.get('statusFreeze')) {
                                        status = 'published';
                                    } else if (this.get('willSchedule') && !this.get('model.isPublished') && !this.get('statusFreeze')) {
                                        status = 'scheduled';
                                    } else {
                                        status = 'draft';
                                    }
                                }
                            }

                            // Set the properties that are indirected
                            // set mobiledoc equal to what's in the editor, minus the image markers.
                            this.set('model.mobiledoc', this.get('model.scratch'));
                            this.set('model.status', status);

                            // Set a default title
                            if (!this.get('model.titleScratch').trim()) {
                                this.set('model.titleScratch', DEFAULT_TITLE);
                            }

                            this.set('model.title', this.get('model.titleScratch'));
                            this.set('model.metaTitle', this.get('model.metaTitleScratch'));
                            this.set('model.metaDescription', this.get('model.metaDescriptionScratch'));

                            if (this.get('model.slug')) {
                                _context4.next = 17;
                                break;
                            }

                            this.get('saveTitle').cancelAll();

                            _context4.next = 17;
                            return this.get('generateSlug').perform();

                        case 17:
                            _context4.prev = 17;
                            _context4.next = 20;
                            return this.get('model').save(options);

                        case 20:
                            model = _context4.sent;


                            if (!options.silent) {
                                this.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);
                            }

                            this.get('model').set('statusScratch', null);

                            // redirect to edit route if saving a new record

                            if (!(isNew && model.get('id'))) {
                                _context4.next = 26;
                                break;
                            }

                            if (!this.get('leaveEditorTransition')) {
                                this.replaceRoute('editor.edit', model);
                            }
                            return _context4.abrupt('return', true);

                        case 26:
                            return _context4.abrupt('return', model);

                        case 29:
                            _context4.prev = 29;
                            _context4.t0 = _context4['catch'](17);

                            if (!(_context4.t0 && !(0, _errors.isInvalidError)(_context4.t0))) {
                                _context4.next = 34;
                                break;
                            }

                            this.send('error', _context4.t0);
                            return _context4.abrupt('return');

                        case 34:

                            this.set('model.status', prevStatus);

                            if (options.silent) {
                                _context4.next = 39;
                                break;
                            }

                            errorOrMessages = _context4.t0 || this.get('model.errors.messages');

                            this.showErrorAlert(prevStatus, this.get('model.status'), errorOrMessages);
                            // simulate a validation error for upstream tasks
                            throw undefined;

                        case 39:
                            return _context4.abrupt('return', this.get('model'));

                        case 40:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this, [[17, 29]]);
        })).group('saveTasks'),

        /*
         * triggered by a user manually changing slug
         */
        updateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee5(_newSlug) {
            var slug, newSlug, serverSlug, slugTokens, check;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            slug = this.get('model.slug');
                            newSlug = void 0, serverSlug = void 0;


                            newSlug = _newSlug || slug;
                            newSlug = newSlug && newSlug.trim();

                            // Ignore unchanged slugs or candidate slugs that are empty

                            if (!(!newSlug || slug === newSlug)) {
                                _context5.next = 7;
                                break;
                            }

                            // reset the input to its previous state
                            this.set('slugValue', slug);
                            return _context5.abrupt('return');

                        case 7:
                            _context5.next = 9;
                            return this.get('slugGenerator').generateSlug('post', newSlug);

                        case 9:
                            serverSlug = _context5.sent;

                            if (!(serverSlug === slug)) {
                                _context5.next = 12;
                                break;
                            }

                            return _context5.abrupt('return');

                        case 12:

                            // Because the server transforms the candidate slug by stripping
                            // certain characters and appending a number onto the end of slugs
                            // to enforce uniqueness, there are cases where we can get back a
                            // candidate slug that is a duplicate of the original except for
                            // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

                            // get the last token out of the slug candidate and see if it's a number
                            slugTokens = serverSlug.split('-');
                            check = Number(slugTokens.pop());

                            // if the candidate slug is the same as the existing slug except
                            // for the incrementor then the existing slug should be used

                            if (!((0, _isNumber.default)(check) && check > 0)) {
                                _context5.next = 18;
                                break;
                            }

                            if (!(slug === slugTokens.join('-') && serverSlug !== newSlug)) {
                                _context5.next = 18;
                                break;
                            }

                            this.set('slugValue', slug);

                            return _context5.abrupt('return');

                        case 18:

                            this.set('model.slug', serverSlug);

                            // If this is a new post.  Don't save the model.  Defer the save
                            // to the user pressing the save button

                            if (!this.get('model.isNew')) {
                                _context5.next = 21;
                                break;
                            }

                            return _context5.abrupt('return');

                        case 21:
                            _context5.next = 23;
                            return this.get('model').save();

                        case 23:
                            return _context5.abrupt('return', _context5.sent);

                        case 24:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        })).group('saveTasks'),

        /**
         * By default, a post will not change its publish state.
         * Only with a user-set value (via setSaveType action)
         * can the post's status change.
         */
        willPublish: (0, _boundOneWay.default)('model.isPublished'),
        willSchedule: (0, _boundOneWay.default)('model.isScheduled'),

        // set by the editor route and `hasDirtyAttributes`. useful when checking
        // whether the number of tags has changed for `hasDirtyAttributes`.
        previousTagNames: null,

        tagNames: (0, _emberComputed.mapBy)('model.tags', 'name'),

        postOrPage: (0, _emberComputed.default)('model.page', function () {
            return this.get('model.page') ? 'Page' : 'Post';
        }),

        // countdown timer to show the time left until publish time for a scheduled post
        // starts 15 minutes before scheduled time
        scheduleCountdown: (0, _emberComputed.default)('model.{publishedAtUTC,isScheduled}', 'clock.second', function () {
            var isScheduled = this.get('model.isScheduled');
            var publishTime = this.get('model.publishedAtUTC') || _moment.default.utc();
            var timeUntilPublished = publishTime.diff(_moment.default.utc(), 'minutes', true);
            var isPublishedSoon = timeUntilPublished > 0 && timeUntilPublished < 15;

            // force a recompute
            this.get('clock.second');

            if (isScheduled && isPublishedSoon) {
                return (0, _moment.default)(publishTime).fromNow();
            } else {
                return false;
            }
        }),

        // compares previousTagNames to tagNames
        tagNamesEqual: function tagNamesEqual() {
            var tagNames = this.get('tagNames') || [];
            var previousTagNames = this.get('previousTagNames') || [];
            var hashCurrent = void 0,
                hashPrevious = void 0;

            // beware! even if they have the same length,
            // that doesn't mean they're the same.
            if (tagNames.length !== previousTagNames.length) {
                return false;
            }

            // instead of comparing with slow, nested for loops,
            // perform join on each array and compare the strings
            hashCurrent = tagNames.join('');
            hashPrevious = previousTagNames.join('');

            return hashCurrent === hashPrevious;
        },


        // a hook created in editor-base-route's setupController
        modelSaved: function modelSaved() {
            var model = this.get('model');

            // safer to updateTags on save in one place
            // rather than in all other places save is called
            model.updateTags();

            // set previousTagNames to current tagNames for hasDirtyAttributes check
            this.set('previousTagNames', this.get('tagNames'));

            // `updateTags` triggers `hasDirtyAttributes => true`.
            // for a saved model it would otherwise be false.

            // if the two "scratch" properties (title and content) match the model, then
            // it's ok to set hasDirtyAttributes to false
            if (model.get('titleScratch') === model.get('title') && JSON.stringify(model.get('scratch')) === JSON.stringify(model.get('mobiledoc'))) {
                this.set('hasDirtyAttributes', false);
            }
        },


        // an ugly hack, but necessary to watch all the model's properties
        // and more, without having to be explicit and do it manually
        hasDirtyAttributes: _emberComputed.default.apply(_ember.default, watchedProps.concat({
            get: function get() {
                var model = this.get('model');

                if (!model) {
                    return false;
                }

                var mobiledoc = JSON.stringify(model.get('mobiledoc'));
                var scratch = JSON.stringify(model.get('scratch'));
                var title = model.get('title');
                var titleScratch = model.get('titleScratch');
                var changedAttributes = void 0;

                if (!this.tagNamesEqual()) {
                    return true;
                }

                if (titleScratch !== title) {
                    return true;
                }

                // since `scratch` is not model property, we need to check
                // it explicitly against the model's mobiledoc attribute
                if (mobiledoc !== scratch) {
                    return true;
                }

                // if the Adapter failed to save the model isError will be true
                // and we should consider the model still dirty.
                if (model.get('isError')) {
                    return true;
                }

                // models created on the client always return `hasDirtyAttributes: true`,
                // so we need to see which properties have actually changed.
                if (model.get('isNew')) {
                    changedAttributes = Object.keys(model.changedAttributes());

                    if (changedAttributes.length) {
                        return true;
                    }

                    return false;
                }

                // even though we use the `scratch` prop to show edits,
                // which does *not* change the model's `hasDirtyAttributes` property,
                // `hasDirtyAttributes` will tell us if the other props have changed,
                // as long as the model is not new (model.isNew === false).
                return model.get('hasDirtyAttributes');
            },
            set: function set(key, value) {
                return value;
            }
        })),

        // used on window.onbeforeunload
        unloadDirtyMessage: function unloadDirtyMessage() {
            return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
        },


        // TODO: This has to be moved to the I18n localization file.
        // This structure is supposed to be close to the i18n-localization which will be used soon.
        messageMap: {
            errors: {
                post: {
                    published: {
                        published: 'Update failed',
                        draft: 'Saving failed',
                        scheduled: 'Scheduling failed'
                    },
                    draft: {
                        published: 'Publish failed',
                        draft: 'Saving failed',
                        scheduled: 'Scheduling failed'
                    },
                    scheduled: {
                        scheduled: 'Updated failed',
                        draft: 'Unscheduling failed',
                        published: 'Publish failed'
                    }

                }
            },

            success: {
                post: {
                    published: {
                        published: 'Updated.',
                        draft: 'Saved.',
                        scheduled: 'Scheduled.'
                    },
                    draft: {
                        published: 'Published!',
                        draft: 'Saved.',
                        scheduled: 'Scheduled.'
                    },
                    scheduled: {
                        scheduled: 'Updated.',
                        draft: 'Unscheduled.',
                        published: 'Published!'
                    }
                }
            }
        },

        // TODO: Update for new notification click-action API
        showSaveNotification: function showSaveNotification(prevStatus, status, delay) {
            var message = this.messageMap.success.post[prevStatus][status];
            var notifications = this.get('notifications');
            var type = void 0,
                path = void 0;

            if (status === 'published') {
                type = this.get('postOrPage');
                path = this.get('model.absoluteUrl');
            } else {
                type = 'Preview';
                path = this.get('model.previewUrl');
            }

            message += '&nbsp;<a href="' + path + '" target="_blank">View ' + type + '</a>';

            notifications.showNotification(message.htmlSafe(), { delayed: delay });
        },
        showErrorAlert: function showErrorAlert(prevStatus, status, error, delay) {
            var message = this.messageMap.errors.post[prevStatus][status];
            var notifications = this.get('notifications');
            var errorMessage = void 0;

            function isString(str) {
                /* global toString */
                return toString.call(str) === '[object String]';
            }

            if (error && isString(error)) {
                errorMessage = error;
            } else if (error && (0, _utils.isEmberArray)(error)) {
                // This is here because validation errors are returned as an array
                // TODO: remove this once validations are fixed
                errorMessage = error[0];
            } else if (error && error.errors && error.errors[0].message) {
                errorMessage = error.errors[0].message;
            } else {
                errorMessage = 'Unknown Error';
            }

            message += ': ' + errorMessage;
            message = (0, _emberString.htmlSafe)(message);

            notifications.showAlert(message, { type: 'error', delayed: delay, key: 'post.save' });
        },


        saveTitle: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee6() {
            var model, currentTitle, newTitle;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            model = this.get('model');
                            currentTitle = model.get('title');
                            newTitle = model.get('titleScratch').trim();

                            if (!(currentTitle && newTitle && newTitle === currentTitle)) {
                                _context6.next = 5;
                                break;
                            }

                            return _context6.abrupt('return');

                        case 5:

                            // this is necessary to force a save when the title is blank
                            this.set('hasDirtyAttributes', true);

                            // generate a slug if a post is new and doesn't have a title yet or
                            // if the title is still '(Untitled)'

                            if (!(model.get('isNew') && !currentTitle || currentTitle === DEFAULT_TITLE)) {
                                _context6.next = 9;
                                break;
                            }

                            _context6.next = 9;
                            return this.get('generateSlug').perform();

                        case 9:
                            if (!this.get('model.isDraft')) {
                                _context6.next = 12;
                                break;
                            }

                            _context6.next = 12;
                            return this.get('autosave').perform();

                        case 12:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, this);
        })),

        generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee7() {
            var title, slug;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            title = this.get('model.titleScratch');

                            // Only set an "untitled" slug once per post

                            if (!(title === DEFAULT_TITLE && this.get('model.slug'))) {
                                _context7.next = 3;
                                break;
                            }

                            return _context7.abrupt('return');

                        case 3:
                            _context7.prev = 3;
                            _context7.next = 6;
                            return this.get('slugGenerator').generateSlug('post', title);

                        case 6:
                            slug = _context7.sent;


                            if (!(0, _emberUtils.isBlank)(slug)) {
                                this.set('model.slug', slug);
                            }
                            _context7.next = 13;
                            break;

                        case 10:
                            _context7.prev = 10;
                            _context7.t0 = _context7['catch'](3);

                            // Nothing to do (would be nice to log this somewhere though),
                            // but a rejected promise needs to be handled here so that a resolved
                            // promise is returned.
                            if ((0, _ajax.isVersionMismatchError)(_context7.t0)) {
                                this.get('notifications').showAPIError(_context7.t0);
                            }

                        case 13:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this, [[3, 10]]);
        })).enqueue(),

        actions: {
            updateScratch: function updateScratch(value) {
                this.set('model.scratch', value);

                // save 3 seconds after last edit
                this.get('_autosave').perform();
                // force save at 60 seconds
                this.get('_timedSave').perform();
            },
            cancelAutosave: function cancelAutosave() {
                this.get('_autosave').cancelAll();
                this.get('_timedSave').cancelAll();
            },
            save: function save(options) {
                return this.get('save').perform(options);
            },
            setSaveType: function setSaveType(newType) {
                if (newType === 'publish') {
                    this.set('willPublish', true);
                    this.set('willSchedule', false);
                } else if (newType === 'draft') {
                    this.set('willPublish', false);
                    this.set('willSchedule', false);
                } else if (newType === 'schedule') {
                    this.set('willSchedule', true);
                    this.set('willPublish', false);
                }
            },
            closeNavMenu: function closeNavMenu() {
                this.get('application').send('closeAutoNav');
            },
            closeMenus: function closeMenus() {
                this.get('application').send('closeMenus');
            },
            toggleLeaveEditorModal: function toggleLeaveEditorModal(transition) {
                var leaveTransition = this.get('leaveEditorTransition');

                if (!transition && this.get('showLeaveEditorModal')) {
                    this.set('showLeaveEditorModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveEditorTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('saveTasks.isRunning')) {
                        return this.get('saveTasks.last').then(function () {
                            transition.retry();
                        });
                    }

                    // if an autosave is scheduled, cancel it, save then transition
                    if (this.get('_autosaveRunning')) {
                        this.send('cancelAutosave');
                        this.get('autosave').cancelAll();

                        return this.get('autosave').perform().then(function () {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveEditorModal', true);
                }
            },
            leaveEditor: function leaveEditor() {
                var transition = this.get('leaveEditorTransition');
                var model = this.get('model');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // definitely want to clear the data store and post of any unsaved, client-generated tags
                model.updateTags();

                if (model.get('isNew')) {
                    // the user doesn't want to save the new, unsaved post, so delete it.
                    model.deleteRecord();
                } else {
                    // roll back changes on model props
                    model.rollbackAttributes();
                }

                // setting hasDirtyAttributes to false here allows willTransition on the editor route to succeed
                this.set('hasDirtyAttributes', false);

                // since the transition is now certain to complete, we can unset window.onbeforeunload here
                window.onbeforeunload = null;

                return transition.retry();
            },
            updateTitle: function updateTitle(newTitle) {
                this.set('model.titleScratch', newTitle);
            },
            toggleDeletePostModal: function toggleDeletePostModal() {
                if (!this.get('model.isNew')) {
                    this.toggleProperty('showDeletePostModal');
                }
            },
            toggleReAuthenticateModal: function toggleReAuthenticateModal() {
                this.toggleProperty('showReAuthenticateModal');
            },
            setWordcount: function setWordcount(wordcount) {
                this.set('wordcount', wordcount);
            },
            toggleAutoNav: function toggleAutoNav() {
                this.get('application').send('toggleAutoNav');
            }
        }
    });
});
define('ghost-admin/mixins/editor-base-route', ['exports', 'jquery', 'ember-metal/mixin', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/utils/ctrl-or-cmd', 'ember-runloop', 'ghost-admin/mixins/style-body'], function (exports, _jquery, _mixin, _shortcutsRoute, _ctrlOrCmd, _emberRunloop, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var generalShortcuts = {};
    generalShortcuts[_ctrlOrCmd.default + '+alt+p'] = 'publish';

    exports.default = _mixin.default.create(_styleBody.default, _shortcutsRoute.default, {
        classNames: ['editor'],

        shortcuts: generalShortcuts,

        actions: {
            save: function save() {
                var selectedElement = (0, _jquery.default)(document.activeElement);

                if (selectedElement.is('input[type="text"]')) {
                    selectedElement.trigger('focusout');
                }

                _emberRunloop.default.scheduleOnce('actions', this, function () {
                    this.get('controller').send('save');
                });
            },
            publish: function publish() {
                var controller = this.get('controller');

                controller.send('setSaveType', 'publish');
                controller.send('save');
            },
            willTransition: function willTransition(transition) {
                var controller = this.get('controller');
                var scratch = controller.get('model.scratch');
                var controllerIsDirty = controller.get('hasDirtyAttributes');
                var model = controller.get('model');
                var state = model.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');
                var deletedWithoutChanges = void 0,
                    fromNewToEdit = void 0;

                if (this.get('upgradeStatus.isRequired')) {
                    return this._super.apply(this, arguments);
                }

                fromNewToEdit = this.get('routeName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === model.get('id');

                deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes);

                if (!fromNewToEdit && !deletedWithoutChanges && controllerIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveEditorModal', transition);
                    return;
                }

                // The controller may hold model state that will be lost in the
                // new->edit transition, so we need to apply it now.
                if (fromNewToEdit && controllerIsDirty) {
                    if (scratch !== model.get('mobiledoc')) {
                        model.set('mobiledoc', scratch);
                    }
                }

                // make sure the save tasks aren't still running in the background
                // after leaving the edit route
                // TODO: the edit screen should really be a component so that we get
                // automatic state cleanup and task cancellation
                controller.send('cancelAutosave');

                if (state.isNew) {
                    model.deleteRecord();
                }

                // since the transition is now certain to complete..
                window.onbeforeunload = null;

                // remove model-related listeners created in editor-base-route
                this.detachModelHooks(controller, model);
            }
        },

        attachModelHooks: function attachModelHooks(controller, model) {
            // this will allow us to track when the model is saved and update the controller
            // so that we can be sure controller.hasDirtyAttributes is correct, without having to update the
            // controller on each instance of `model.save()`.
            //
            // another reason we can't do this on `model.save().then()` is because the post-settings-menu
            // also saves the model, and passing messages is difficult because we have two
            // types of editor controllers, and the PSM also exists on the posts.post route.
            //
            // The reason we can't just keep this functionality in the editor controller is
            // because we need to remove these handlers on `willTransition` in the editor route.
            model.on('didCreate', controller, controller.get('modelSaved'));
            model.on('didUpdate', controller, controller.get('modelSaved'));
        },
        detachModelHooks: function detachModelHooks(controller, model) {
            model.off('didCreate', controller, controller.get('modelSaved'));
            model.off('didUpdate', controller, controller.get('modelSaved'));
        },
        setupController: function setupController(controller, model) {
            var tags = model.get('tags');

            model.set('scratch', model.get('mobiledoc'));
            model.set('titleScratch', model.get('title'));

            // reset the leave editor transition so new->edit will still work
            controller.set('leaveEditorTransition', null);

            this._super.apply(this, arguments);

            if (tags) {
                // used to check if anything has changed in the editor
                controller.set('previousTagNames', tags.mapBy('name'));
            } else {
                controller.set('previousTagNames', []);
            }

            // trigger an immediate autosave timeout if model has changed between
            // new->edit (typical as first save will only contain the first char)
            // so that leaving the route waits for save instead of showing the
            // "Are you sure you want to leave?" modal unexpectedly
            if (!model.get('isNew') && model.get('hasDirtyAttributes')) {
                controller.get('_autosave').perform();
            }

            // reset save-on-first-change (gh-koenig specific)
            // controller._hasChanged = false;

            // attach model-related listeners created in editor-base-route
            this.attachModelHooks(controller, model);
        }
    });
});
define('ghost-admin/mixins/infinite-scroll', ['exports', 'ember-metal/mixin', 'ember-runloop'], function (exports, _mixin, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        isLoading: false,
        triggerPoint: 100,

        /**
         * Determines if we are past a scroll point where we need to fetch the next page
         */
        _checkScroll: function _checkScroll() {
            var element = this.get('element');
            var triggerPoint = this.get('triggerPoint');
            var isLoading = this.get('isLoading');

            // If we haven't passed our threshold or we are already fetching content, exit
            if (isLoading || element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight) {
                return;
            }

            this.sendAction('fetch');
        },
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            var el = this.get('element');

            el.onscroll = _emberRunloop.default.bind(this, this._checkScroll);

            // run on load, on the offchance that the initial load
            // did not fill the view.
            this._checkScroll();
        },
        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            // turn off the scroll handler
            this.get('element').onscroll = null;
        }
    });
});
define('ghost-admin/mixins/pagination', ['exports', 'ember-metal/mixin', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-platform'], function (exports, _mixin, _rsvp, _emberComputed, _inject, _emberPlatform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var defaultPaginationSettings = {
        page: 1,
        limit: 15
    };

    exports.default = _mixin.default.create({
        notifications: (0, _inject.default)(),

        paginationModel: null,
        paginationSettings: null,

        // add a hook so that routes/controllers can do something with the meta data
        paginationMeta: (0, _emberComputed.default)({
            get: function get() {
                return this._paginationMeta;
            },
            set: function set(key, value) {
                if (this.didReceivePaginationMeta) {
                    this.didReceivePaginationMeta(value);
                }
                this._paginationMeta = value;
                return value;
            }
        }),

        init: function init() {
            // don't merge defaults if paginationSettings is a CP
            if (!this.paginationSettings.isDescriptor) {
                var paginationSettings = this.get('paginationSettings');
                var settings = (0, _emberPlatform.assign)({}, defaultPaginationSettings, paginationSettings);

                this.set('paginationSettings', settings);
            }

            this.set('paginationMeta', {});

            this._super.apply(this, arguments);
        },
        reportLoadError: function reportLoadError(error) {
            this.get('notifications').showAPIError(error, { key: 'pagination.load.failed' });
        },
        loadFirstPage: function loadFirstPage(transition) {
            var _this = this;

            var paginationSettings = this.get('paginationSettings');
            var modelName = this.get('paginationModel');

            this.set('paginationSettings.page', 1);

            this.set('isLoading', true);

            return this.get('store').query(modelName, paginationSettings).then(function (results) {
                _this.set('paginationMeta', results.meta);
                return results;
            }).catch(function (error) {
                // if we have a transition we're executing in a route hook so we
                // want to throw in order to trigger the global error handler
                if (transition) {
                    throw error;
                } else {
                    _this.reportLoadError(error);
                }
            }).finally(function () {
                _this.set('isLoading', false);
            });
        },


        actions: {
            loadFirstPage: function loadFirstPage() {
                return this.loadFirstPage();
            },


            /**
             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.
             * @return
             */
            loadNextPage: function loadNextPage() {
                var _this2 = this;

                var store = this.get('store');
                var modelName = this.get('paginationModel');
                var metadata = this.get('paginationMeta');
                var nextPage = metadata.pagination && metadata.pagination.next;
                var paginationSettings = this.get('paginationSettings');

                if (nextPage && !this.get('isLoading')) {
                    this.set('isLoading', true);
                    this.set('paginationSettings.page', nextPage);

                    return store.query(modelName, paginationSettings).then(function (results) {
                        _this2.set('paginationMeta', results.meta);
                        return results;
                    }).catch(function (error) {
                        _this2.reportLoadError(error);
                    }).finally(function () {
                        _this2.set('isLoading', false);
                    });
                } else {
                    return _rsvp.default.resolve([]);
                }
            },
            resetPagination: function resetPagination() {
                this.set('paginationSettings.page', 1);
            }
        }
    });
});
define('ghost-admin/mixins/settings-menu-component', ['exports', 'ember-metal/mixin', 'ember-computed'], function (exports, _mixin, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        showSettingsMenu: false,

        isViewingSubview: (0, _emberComputed.default)('showSettingsMenu', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                // Not viewing a subview if we can't even see the PSM
                if (!this.get('showSettingsMenu')) {
                    return false;
                }
                return value;
            }
        }),

        actions: {
            showSubview: function showSubview() {
                this.set('isViewingSubview', true);
            },
            closeSubview: function closeSubview() {
                this.set('isViewingSubview', false);
            }
        }
    });
});
define('ghost-admin/mixins/shortcuts-route', ['exports', 'ember-metal/mixin', 'ghost-admin/mixins/shortcuts'], function (exports, _mixin, _shortcuts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create(_shortcuts.default, {
        activate: function activate() {
            this._super.apply(this, arguments);
            this.registerShortcuts();
        },
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.removeShortcuts();
        }
    });
});
define('ghost-admin/mixins/shortcuts', ['exports', 'ember-metal/mixin', 'ember-runloop', 'ember-utils'], function (exports, _mixin, _emberRunloop, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    // Configure KeyMaster to respond to all shortcuts,
    // even inside of
    // input, textarea, and select.
    key.filter = function () {
        return true;
    }; /* global key */


    key.setScope('default');
    /**
     * Only routes can implement shortcuts.
     * If you need to trigger actions on the controller,
     * simply call them with `this.get('controller').send('action')`.
     *
     * To implement shortcuts, add this mixin to your `extend()`,
     * and implement a `shortcuts` hash.
     * In this hash, keys are shortcut combinations and values are route action names.
     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
     *
     * ```javascript
     * shortcuts: {
     *     'ctrl+s, command+s': 'save'
     * }
     * ```
     * For more complex actions, shortcuts can instead have their value
     * be an object like {action, options}
     * ```javascript
     * shortcuts: {
     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
     * }
     * ```
     * You can set the scope of your shortcut by passing a scope property.
     * ```javascript
     * shortcuts : {
     *   'enter': {action : 'confirmModal', scope: 'modal'}
     * }
     * ```
     * If you don't specify a scope, we use a default scope called "default".
     * To have all your shortcut work in all scopes, give it the scope "all".
     * Find out more at the keymaster docs
     */
    exports.default = _mixin.default.create({
        registerShortcuts: function registerShortcuts() {
            var _this = this;

            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                var action = shortcuts[shortcut];
                var options = void 0;

                if ((0, _emberUtils.typeOf)(action) !== 'string') {
                    options = action.options;
                    action = action.action;
                }

                key(shortcut, scope, function (event) {
                    // stop things like ctrl+s from actually opening a save dialogue
                    event.preventDefault();
                    (0, _emberRunloop.default)(_this, function () {
                        this.send(action, options);
                    });
                });
            });
        },
        removeShortcuts: function removeShortcuts() {
            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                key.unbind(shortcut, scope);
            });
        }
    });
});
define('ghost-admin/mixins/slug-url', ['exports', 'ember-metal/mixin', 'ember-utils'], function (exports, _mixin, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        buildURL: function buildURL(_modelName, _id, _snapshot, _requestType, query) {
            var url = this._super.apply(this, arguments);

            if (query && !(0, _emberUtils.isBlank)(query.slug)) {
                url += 'slug/' + query.slug + '/';
                delete query.slug;
            }

            return url;
        }
    });
});
define('ghost-admin/mixins/style-body', ['exports', 'jquery', 'ember-metal/mixin', 'ember-runloop'], function (exports, _jquery, _mixin, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        activate: function activate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            if (cssClasses) {
                _emberRunloop.default.schedule('afterRender', null, function () {
                    cssClasses.forEach(function (curClass) {
                        (0, _jquery.default)('body').addClass(curClass);
                    });
                });
            }
        },
        deactivate: function deactivate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            _emberRunloop.default.schedule('afterRender', null, function () {
                cssClasses.forEach(function (curClass) {
                    (0, _jquery.default)('body').removeClass(curClass);
                });
            });
        }
    });
});
define('ghost-admin/mixins/text-input', ['exports', 'ember-metal/mixin', 'ember-computed'], function (exports, _mixin, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({
        attributeBindings: ['autofocus'],

        selectOnClick: false,
        shouldFocus: false,
        stopEnterKeyDownPropagation: false,

        autofocus: (0, _emberComputed.default)(function () {
            if (this.get('shouldFocus')) {
                return device.ios() ? false : 'autofocus';
            }

            return false;
        }),

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._focus();
        },
        click: function click(event) {
            if (this.get('selectOnClick')) {
                event.currentTarget.select();
            }
        },
        keyDown: function keyDown(event) {
            // stop event propagation when pressing "enter"
            // most useful in the case when undesired (global) keyboard shortcuts
            // are getting triggered while interacting with this particular input element.
            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {
                event.stopPropagation();

                return true;
            }

            // prevent default TAB behaviour if we have a keyEvent for it
            if (event.keyCode === 9 && typeof this.get('keyEvents.9') === 'function') {
                event.preventDefault();
            }

            this._super.apply(this, arguments);
        },
        keyPress: function keyPress(event) {
            // prevent default ENTER behaviour if we have a keyEvent for it
            if (event.keyCode === 13 && typeof this.get('keyEvents.13') === 'function') {
                event.preventDefault();
            }

            this._super.apply(this, arguments);
        },
        _focus: function _focus() {
            // Until mobile safari has better support
            // for focusing, we just ignore it
            if (this.get('shouldFocus') && !device.ios()) {
                this.element.focus();
            }
        }
    });
});
define('ghost-admin/mixins/unauthenticated-route-mixin', ['exports', 'ember-metal/mixin', 'ember-service/inject'], function (exports, _mixin, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _mixin.default.create({

        ajax: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        session: (0, _inject.default)(),

        routeIfAlreadyAuthenticated: 'posts',

        beforeModel: function beforeModel() {
            var _this = this,
                _arguments = arguments;

            var authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

            // check the state of the setup process via the API
            return this.get('ajax').request(authUrl).then(function (result) {
                var _result$setup = _slicedToArray(result.setup, 1),
                    setup = _result$setup[0];

                if (setup.status !== true) {
                    _this.transitionTo('setup');
                } else {
                    // NOTE: this is the same as ESA's UnauthenticatedRouteMixin,
                    // adding that mixin to this and calling _super wasn't calling
                    // the ESA mixin's beforeModel method
                    if (_this.get('session').get('isAuthenticated')) {
                        var routeIfAlreadyAuthenticated = _this.get('routeIfAlreadyAuthenticated');

                        return _this.transitionTo(routeIfAlreadyAuthenticated);
                    } else {
                        return _this._super.apply(_this, _arguments);
                    }
                }
            });
        }
    });
});
define('ghost-admin/mixins/validation-engine', ['exports', 'ember-data', 'ghost-admin/validators/invite-user', 'ember-metal/mixin', 'ember-data/model', 'ghost-admin/validators/nav-item', 'ghost-admin/validators/post', 'rsvp', 'ghost-admin/validators/reset', 'ghost-admin/validators/setting', 'ghost-admin/validators/setup', 'ghost-admin/validators/signin', 'ghost-admin/validators/signup', 'ghost-admin/validators/slack-integration', 'ghost-admin/validators/subscriber', 'ghost-admin/validators/tag-settings', 'ghost-admin/validators/user', 'ghost-admin/utils/validator-extensions', 'ember-array/utils'], function (exports, _emberData, _inviteUser, _mixin, _model, _navItem, _post, _rsvp, _reset, _setting, _setup, _signin, _signup, _slackIntegration, _subscriber, _tagSettings, _user, _validatorExtensions, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Errors = _emberData.default.Errors;


    // our extensions to the validator library
    _validatorExtensions.default.init();

    /**
    * The class that gets this mixin will receive these properties and functions.
    * It will be able to validate any properties on itself (or the model it passes to validate())
    * with the use of a declared validator.
    */
    exports.default = _mixin.default.create({
        // these validators can be passed a model to validate when the class that
        // mixes in the ValidationEngine declares a validationType equal to a key on this object.
        // the model is either passed in via `this.validate({ model: object })`
        // or by calling `this.validate()` without the model property.
        // in that case the model will be the class that the ValidationEngine
        // was mixed into, i.e. the controller or Ember Data model.
        validators: {
            inviteUser: _inviteUser.default,
            navItem: _navItem.default,
            post: _post.default,
            reset: _reset.default,
            setting: _setting.default,
            setup: _setup.default,
            signin: _signin.default,
            signup: _signup.default,
            slackIntegration: _slackIntegration.default,
            subscriber: _subscriber.default,
            tag: _tagSettings.default,
            user: _user.default
        },

        // This adds the Errors object to the validation engine, and shouldn't affect
        // ember-data models because they essentially use the same thing
        errors: null,

        // Store whether a property has been validated yet, so that we know whether or not
        // to show error / success validation for a field
        hasValidated: null,

        init: function init() {
            this._super.apply(this, arguments);
            this.set('errors', Errors.create());
            this.set('hasValidated', (0, _utils.A)());
        },


        /**
        * Passes the model to the validator specified by validationType.
        * Returns a promise that will resolve if validation succeeds, and reject if not.
        * Some options can be specified:
        *
        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
        *                   the class that mixes in this mixin.
        *
        * `property: String` - you can specify a specific property to validate. If
        * 					   no property is specified, the entire model will be
        * 					   validated
        */
        validate: function validate(opts) {
            var model = this;
            var hasValidated = void 0,
                type = void 0,
                validator = void 0;

            opts = opts || {};

            if (opts.model) {
                model = opts.model;
            } else if (this instanceof _model.default) {
                model = this;
            } else if (this.get('model')) {
                model = this.get('model');
            }

            type = this.get('validationType') || model.get('validationType');
            validator = this.get('validators.' + type) || model.get('validators.' + type);
            hasValidated = this.get('hasValidated');

            opts.validationType = type;

            return new _rsvp.default.Promise(function (resolve, reject) {
                var passed = void 0;

                if (!type || !validator) {
                    return reject(['The validator specified, "' + type + '", did not exist!']);
                }

                if (opts.property) {
                    // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
                    hasValidated.addObject(opts.property);
                    model.get('errors').remove(opts.property);
                } else {
                    model.get('errors').clear();
                }

                passed = validator.check(model, opts.property);

                return passed ? resolve() : reject();
            });
        },


        /**
        * The primary goal of this method is to override the `save` method on Ember Data models.
        * This allows us to run validation before actually trying to save the model to the server.
        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
        */
        save: function save(options) {
            var _this = this;

            var _super = this._super;


            options = options || {};
            options.wasSave = true;

            // model.destroyRecord() calls model.save() behind the scenes.
            // in that case, we don't need validation checks or error propagation,
            // because the model itself is being destroyed.
            if (this.get('isDeleted')) {
                return this._super.apply(this, arguments);
            }

            // If validation fails, reject with validation errors.
            // If save to the server fails, reject with server response.
            return this.validate(options).then(function () {
                if (typeof _this.beforeSave === 'function') {
                    _this.beforeSave();
                }
                return _super.call(_this, options);
            }).catch(function (result) {
                // server save failed or validator type doesn't exist
                if (result && !(0, _utils.isEmberArray)(result)) {
                    throw result;
                }

                return _rsvp.default.reject(result);
            });
        },


        actions: {
            validate: function validate(property) {
                this.validate({ property: property });
            }
        }
    });
});
define('ghost-admin/mixins/validation-state', ['exports', 'ember-metal/mixin', 'ember-metal/observer', 'ember-runloop', 'ember-array/utils', 'ember-utils'], function (exports, _mixin, _observer, _emberRunloop, _utils, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _mixin.default.create({

        errors: null,
        property: '',
        hasValidated: (0, _utils.A)(),

        hasError: false,

        setHasError: function setHasError() {
            var property = this.get('property');
            var errors = this.get('errors');
            var hasValidated = this.get('hasValidated');

            // if we aren't looking at a specific property we always want an error class
            if (!property && errors && !errors.get('isEmpty')) {
                this.set('hasError', true);
                return;
            }

            // If we haven't yet validated this field, there is no validation class needed
            if (!hasValidated || !hasValidated.includes(property)) {
                this.set('hasError', false);
                return;
            }

            if (errors && !(0, _emberUtils.isEmpty)(errors.errorsFor(property))) {
                this.set('hasError', true);
                return;
            }

            this.set('hasError', false);
        },


        hasErrorObserver: (0, _observer.default)('errors.[]', 'property', 'hasValidated.[]', function () {
            _emberRunloop.default.once(this, 'setHasError');
            // this.setHasError();
        }).on('init')

    });
});
define('ghost-admin/models/invite', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-service/inject', 'ember-data/relationships'], function (exports, _model, _attr, _inject, _relationships) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        token: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        expires: (0, _attr.default)('number'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)('number'),
        status: (0, _attr.default)('string'),
        role: (0, _relationships.belongsTo)('role', { async: false }),

        ajax: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        resend: function resend() {
            var fullInviteData = this.toJSON();

            var inviteData = {
                email: fullInviteData.email,
                role_id: fullInviteData.role
            };

            var inviteUrl = this.get('ghostPaths.url').api('invites');

            return this.get('ajax').post(inviteUrl, {
                data: JSON.stringify({ invites: [inviteData] }),
                contentType: 'application/json'
            });
        }
    });
});
define('ghost-admin/models/navigation-item', ['exports', 'ember-object', 'ghost-admin/mixins/validation-engine', 'ember-computed', 'ember-utils'], function (exports, _emberObject, _validationEngine, _emberComputed, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberObject.default.extend(_validationEngine.default, {
        label: '',
        url: '',
        isNew: false,

        validationType: 'navItem',

        isComplete: (0, _emberComputed.default)('label', 'url', function () {
            var _getProperties = this.getProperties('label', 'url'),
                label = _getProperties.label,
                url = _getProperties.url;

            return !(0, _emberUtils.isBlank)(label) && !(0, _emberUtils.isBlank)(url);
        }),

        isBlank: (0, _emberComputed.default)('label', 'url', function () {
            var _getProperties2 = this.getProperties('label', 'url'),
                label = _getProperties2.label,
                url = _getProperties2.url;

            return (0, _emberUtils.isBlank)(label) && (0, _emberUtils.isBlank)(url);
        })
    });
});
define('ghost-admin/models/notification', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _model, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        dismissible: (0, _attr.default)('boolean'),
        status: (0, _attr.default)('string'),
        type: (0, _attr.default)('string'),
        message: (0, _attr.default)('string'),
        key: (0, _attr.default)('string')
    });
});
define('ghost-admin/models/post', ['exports', 'ember', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ghost-admin/utils/bound-one-way', 'ember-computed', 'ember-service/inject', 'moment', 'ember-metal/observer', 'ghost-admin/components/gh-markdown-editor', 'ember-data/relationships', 'ember-utils'], function (exports, _ember, _model, _validationEngine, _attr, _boundOneWay, _emberComputed, _inject, _moment, _observer, _ghMarkdownEditor, _relationships, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Comparable = _ember.default.Comparable,
        _compare = _ember.default.compare;


    function statusCompare(postA, postB) {
        var status1 = postA.get('status');
        var status2 = postB.get('status');

        // if any of those is empty
        if (!status1 && !status2) {
            return 0;
        }

        if (!status1 && status2) {
            return -1;
        }

        if (!status2 && status1) {
            return 1;
        }

        // We have to make sure, that scheduled posts will be listed first
        // after that, draft and published will be sorted alphabetically and don't need
        // any manual comparison.

        if (status1 === 'scheduled' && (status2 === 'draft' || status2 === 'published')) {
            return -1;
        }

        if (status2 === 'scheduled' && (status1 === 'draft' || status1 === 'published')) {
            return 1;
        }

        return _compare(status1.valueOf(), status2.valueOf());
    }

    function publishedAtCompare(postA, postB) {
        var published1 = postA.get('publishedAtUTC');
        var published2 = postB.get('publishedAtUTC');

        if (!published1 && !published2) {
            return 0;
        }

        if (!published1 && published2) {
            return -1;
        }

        if (!published2 && published1) {
            return 1;
        }

        return _compare(published1.valueOf(), published2.valueOf());
    }

    exports.default = _model.default.extend(Comparable, _validationEngine.default, {
        config: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),
        clock: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        validationType: 'post',

        uuid: (0, _attr.default)('string'),
        title: (0, _attr.default)('string', { defaultValue: '' }),
        slug: (0, _attr.default)('string'),
        mobiledoc: (0, _attr.default)('json-string', { defaultValue: function defaultValue() {
                return _ghMarkdownEditor.BLANK_DOC;
            } }),
        html: (0, _attr.default)('string'),
        featureImage: (0, _attr.default)('string'),
        featured: (0, _attr.default)('boolean', { defaultValue: false }),
        page: (0, _attr.default)('boolean', { defaultValue: false }),
        plaintext: (0, _attr.default)('string'),
        status: (0, _attr.default)('string', { defaultValue: 'draft' }),
        locale: (0, _attr.default)('string'),
        metaTitle: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        author: (0, _relationships.belongsTo)('user', { async: true }),
        authorId: (0, _attr.default)('string'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)(),
        publishedAtUTC: (0, _attr.default)('moment-utc'),
        publishedBy: (0, _relationships.belongsTo)('user', { async: true }),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)(),
        tags: (0, _relationships.hasMany)('tag', {
            embedded: 'always',
            async: false
        }),
        url: (0, _attr.default)('string'),

        scratch: null,
        titleScratch: null,

        // HACK: used for validation so that date/time can be validated based on
        // eventual status rather than current status
        statusScratch: null,

        // For use by date/time pickers - will be validated then converted to UTC
        // on save. Updated by an observer whenever publishedAtUTC changes.
        // Everything that revolves around publishedAtUTC only cares about the saved
        // value so this should be almost entirely internal
        publishedAtBlogDate: '',
        publishedAtBlogTime: '',

        metaTitleScratch: (0, _boundOneWay.default)('metaTitle'),
        metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription'),

        isPublished: (0, _emberComputed.equal)('status', 'published'),
        isDraft: (0, _emberComputed.equal)('status', 'draft'),
        internalTags: (0, _emberComputed.filterBy)('tags', 'isInternal', true),
        isScheduled: (0, _emberComputed.equal)('status', 'scheduled'),

        absoluteUrl: (0, _emberComputed.default)('url', 'ghostPaths.url', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var postUrl = this.get('url');
            return this.get('ghostPaths.url').join(blogUrl, postUrl);
        }),

        previewUrl: (0, _emberComputed.default)('uuid', 'ghostPaths.url', 'config.blogUrl', 'config.routeKeywords.preview', function () {
            var blogUrl = this.get('config.blogUrl');
            var uuid = this.get('uuid');
            var previewKeyword = this.get('config.routeKeywords.preview');
            // New posts don't have a preview
            if (!uuid) {
                return '';
            }
            return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
        }),

        // check every second to see if we're past the scheduled time
        // will only re-compute if this property is being observed elsewhere
        pastScheduledTime: (0, _emberComputed.default)('isScheduled', 'publishedAtUTC', 'clock.second', function () {
            if (this.get('isScheduled')) {
                var now = _moment.default.utc();
                var publishedAtUTC = this.get('publishedAtUTC') || now;
                var pastScheduledTime = publishedAtUTC.diff(now, 'hours', true) < 0;

                // force a recompute
                this.get('clock.second');

                return pastScheduledTime;
            } else {
                return false;
            }
        }),

        publishedAtBlogTZ: (0, _emberComputed.default)('publishedAtBlogDate', 'publishedAtBlogTime', 'settings.activeTimezone', {
            get: function get() {
                return this._getPublishedAtBlogTZ();
            },
            set: function set(key, value) {
                var momentValue = value ? (0, _moment.default)(value) : null;
                this._setPublishedAtBlogStrings(momentValue);
                return this._getPublishedAtBlogTZ();
            }
        }),

        _getPublishedAtBlogTZ: function _getPublishedAtBlogTZ() {
            var publishedAtUTC = this.get('publishedAtUTC');
            var publishedAtBlogDate = this.get('publishedAtBlogDate');
            var publishedAtBlogTime = this.get('publishedAtBlogTime');
            var blogTimezone = this.get('settings.activeTimezone');

            if (!publishedAtUTC && (0, _emberUtils.isBlank)(publishedAtBlogDate) && (0, _emberUtils.isBlank)(publishedAtBlogTime)) {
                return null;
            }

            if (publishedAtBlogDate && publishedAtBlogTime) {
                var publishedAtBlog = _moment.default.tz(publishedAtBlogDate + ' ' + publishedAtBlogTime, blogTimezone);

                /**
                 * Note:
                 * If you create a post and publish it, we send seconds to the database.
                 * If you edit the post afterwards, ember would send the date without seconds, because
                 * the `publishedAtUTC` is based on `publishedAtBlogTime`, which is only in seconds.
                 * The date time picker doesn't use seconds.
                 *
                 * This condition prevents the case:
                 *   - you edit a post, but you don't change the published_at time
                 *   - we keep the original date with seconds
                 *
                 * See https://github.com/TryGhost/Ghost/issues/8603#issuecomment-309538395.
                 */
                if (publishedAtUTC && publishedAtBlog.diff(publishedAtUTC.clone().startOf('minutes')) === 0) {
                    return publishedAtUTC;
                }

                return publishedAtBlog;
            } else {
                return _moment.default.tz(this.get('publishedAtUTC'), blogTimezone);
            }
        },


        _setPublishedAtBlogTZ: (0, _observer.default)('publishedAtUTC', 'settings.activeTimezone', function () {
            var publishedAtUTC = this.get('publishedAtUTC');
            this._setPublishedAtBlogStrings(publishedAtUTC);
        }).on('init'),

        _setPublishedAtBlogStrings: function _setPublishedAtBlogStrings(momentDate) {
            if (momentDate) {
                var blogTimezone = this.get('settings.activeTimezone');
                var publishedAtBlog = _moment.default.tz(momentDate, blogTimezone);

                this.set('publishedAtBlogDate', publishedAtBlog.format('YYYY-MM-DD'));
                this.set('publishedAtBlogTime', publishedAtBlog.format('HH:mm'));
            } else {
                this.set('publishedAtBlogDate', '');
                this.set('publishedAtBlogTime', '');
            }
        },


        // remove client-generated tags, which have `id: null`.
        // Ember Data won't recognize/update them automatically
        // when returned from the server with ids.
        // https://github.com/emberjs/data/issues/1829
        updateTags: function updateTags() {
            var tags = this.get('tags');
            var oldTags = tags.filterBy('id', null);

            tags.removeObjects(oldTags);
            oldTags.invoke('deleteRecord');
        },
        isAuthoredByUser: function isAuthoredByUser(user) {
            return user.get('id') === this.get('authorId');
        },


        // a custom sort function is needed in order to sort the posts list the same way the server would:
        //     status: scheduled, draft, published
        //     publishedAt: DESC
        //     updatedAt: DESC
        //     id: DESC
        compare: function compare(postA, postB) {
            var updated1 = postA.get('updatedAtUTC');
            var updated2 = postB.get('updatedAtUTC');
            var idResult = void 0,
                publishedAtResult = void 0,
                statusResult = void 0,
                updatedAtResult = void 0;

            // when `updatedAt` is undefined, the model is still
            // being written to with the results from the server
            if (postA.get('isNew') || !updated1) {
                return -1;
            }

            if (postB.get('isNew') || !updated2) {
                return 1;
            }

            // TODO: revisit the ID sorting because we no longer have auto-incrementing IDs
            idResult = _compare(postA.get('id'), postB.get('id'));
            statusResult = statusCompare(postA, postB);
            updatedAtResult = _compare(updated1.valueOf(), updated2.valueOf());
            publishedAtResult = publishedAtCompare(postA, postB);

            if (statusResult === 0) {
                if (publishedAtResult === 0) {
                    if (updatedAtResult === 0) {
                        // This should be DESC
                        return idResult * -1;
                    }
                    // This should be DESC
                    return updatedAtResult * -1;
                }
                // This should be DESC
                return publishedAtResult * -1;
            }

            return statusResult;
        },


        // this is a hook added by the ValidationEngine mixin and is called after
        // successful validation and before this.save()
        //
        // the publishedAtBlog{Date/Time} strings are set separately so they can be
        // validated, grab that time if it exists and set the publishedAtUTC
        beforeSave: function beforeSave() {
            var publishedAtBlogTZ = this.get('publishedAtBlogTZ');
            var publishedAtUTC = publishedAtBlogTZ ? publishedAtBlogTZ.utc() : null;
            this.set('publishedAtUTC', publishedAtUTC);
        }
    });
});
define('ghost-admin/models/role', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-computed'], function (exports, _model, _attr, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        name: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)(),
        updatedBy: (0, _attr.default)(),

        lowerCaseName: (0, _emberComputed.default)('name', function () {
            return this.get('name').toLocaleLowerCase();
        })
    });
});
define('ghost-admin/models/setting', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr'], function (exports, _model, _validationEngine, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'setting',

        title: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        logo: (0, _attr.default)('string'),
        coverImage: (0, _attr.default)('string'),
        icon: (0, _attr.default)('string'),
        defaultLocale: (0, _attr.default)('string'),
        forceI18n: (0, _attr.default)('boolean'),
        permalinks: (0, _attr.default)('string'),
        activeTimezone: (0, _attr.default)('string', { defaultValue: 'Etc/UTC' }),
        ghostHead: (0, _attr.default)('string'),
        ghostFoot: (0, _attr.default)('string'),
        facebook: (0, _attr.default)('facebook-url-user'),
        twitter: (0, _attr.default)('twitter-url-user'),
        labs: (0, _attr.default)('string'),
        navigation: (0, _attr.default)('navigation-settings'),
        isPrivate: (0, _attr.default)('boolean'),
        password: (0, _attr.default)('string'),
        slack: (0, _attr.default)('slack-settings'),
        amp: (0, _attr.default)('boolean')
    });
});
define('ghost-admin/models/slack-integration', ['exports', 'ember-object', 'ghost-admin/mixins/validation-engine', 'ember-computed', 'ember-utils'], function (exports, _emberObject, _validationEngine, _emberComputed, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberObject.default.extend(_validationEngine.default, {
        // values entered here will act as defaults
        url: '',

        validationType: 'slackIntegration',

        isActive: (0, _emberComputed.default)('url', function () {
            var url = this.get('url');
            return !(0, _emberUtils.isBlank)(url);
        })
    });
});
define('ghost-admin/models/subscriber', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ember-data/relationships'], function (exports, _model, _validationEngine, _attr, _relationships) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'subscriber',

        name: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        status: (0, _attr.default)('string'),
        subscribedUrl: (0, _attr.default)('string'),
        subscribedReferrer: (0, _attr.default)('string'),
        unsubscribedUrl: (0, _attr.default)('string'),
        unsubscribedAtUTC: (0, _attr.default)('moment-utc'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedBy: (0, _attr.default)('number'),

        post: (0, _relationships.belongsTo)('post')
    });
});
define('ghost-admin/models/tag', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ember-computed', 'ember-service/inject', 'ember-metal/observer', 'ember-metal/utils'], function (exports, _model, _validationEngine, _attr, _emberComputed, _inject, _observer, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'tag',

        name: (0, _attr.default)('string'),
        slug: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        parent: (0, _attr.default)(),
        metaTitle: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        featureImage: (0, _attr.default)('string'),
        visibility: (0, _attr.default)('string', { defaultValue: 'public' }),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)(),
        updatedBy: (0, _attr.default)(),
        count: (0, _attr.default)('raw'),

        isInternal: (0, _emberComputed.equal)('visibility', 'internal'),
        isPublic: (0, _emberComputed.equal)('visibility', 'public'),

        feature: (0, _inject.default)(),

        // HACK: ugly hack to main compatibility with selectize as used in the
        // PSM tags input
        // TODO: remove once we've switched over to EPS for the tags input
        uuid: (0, _emberComputed.default)(function () {
            return (0, _utils.guidFor)(this);
        }),

        setVisibility: function setVisibility() {
            var internalRegex = /^#.?/;
            this.set('visibility', internalRegex.test(this.get('name')) ? 'internal' : 'public');
        },
        save: function save() {
            if (this.get('changedAttributes.name') && !this.get('isDeleted')) {
                this.setVisibility();
            }
            return this._super.apply(this, arguments);
        },


        setVisibilityOnNew: (0, _observer.default)('isNew', 'isSaving', 'name', function () {
            if (this.get('isNew') && !this.get('isSaving')) {
                this.setVisibility();
            }
        })
    });
});
define('ghost-admin/models/theme', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _model, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        name: (0, _attr.default)('string'),
        package: (0, _attr.default)('raw'),
        active: (0, _attr.default)('boolean'),
        warnings: (0, _attr.default)('raw'),
        errors: (0, _attr.default)('raw'),

        activate: function activate() {
            var _this = this;

            var adapter = this.store.adapterFor(this.constructor.modelName);

            return adapter.activate(this).then(function () {
                // the server only gives us the newly active theme back so we need
                // to manually mark other themes as inactive in the store
                var activeThemes = _this.store.peekAll('theme').filterBy('active', true);

                activeThemes.forEach(function (theme) {
                    if (theme !== _this) {
                        // store.push is necessary to avoid dirty records that cause
                        // problems when we get new data back in subsequent requests
                        _this.store.push({ data: {
                                id: theme.id,
                                type: 'theme',
                                attributes: { active: false }
                            } });
                    }
                });

                return _this;
            });
        }
    });
});
define('ghost-admin/models/user', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ember-computed', 'ember-service/inject', 'ember-data/relationships', 'ember-concurrency'], function (exports, _model, _validationEngine, _attr, _emberComputed, _inject, _relationships, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'user',

        name: (0, _attr.default)('string'),
        slug: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        profileImage: (0, _attr.default)('string'),
        coverImage: (0, _attr.default)('string'),
        bio: (0, _attr.default)('string'),
        website: (0, _attr.default)('string'),
        location: (0, _attr.default)('string'),
        accessibility: (0, _attr.default)('string'),
        status: (0, _attr.default)('string'),
        locale: (0, _attr.default)('string'),
        metaTitle: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        lastLoginUTC: (0, _attr.default)('moment-utc'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)('number'),
        roles: (0, _relationships.hasMany)('role', {
            embedded: 'always',
            async: false
        }),
        count: (0, _attr.default)('raw'),
        facebook: (0, _attr.default)('facebook-url-user'),
        twitter: (0, _attr.default)('twitter-url-user'),
        tour: (0, _attr.default)('json-string'),

        ghostPaths: (0, _inject.default)(),
        ajax: (0, _inject.default)(),
        session: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        // TODO: Once client-side permissions are in place,
        // remove the hard role check.
        isAuthor: (0, _emberComputed.equal)('role.name', 'Author'),
        isEditor: (0, _emberComputed.equal)('role.name', 'Editor'),
        isAdmin: (0, _emberComputed.equal)('role.name', 'Administrator'),
        isOwner: (0, _emberComputed.equal)('role.name', 'Owner'),

        isLoggedIn: (0, _emberComputed.default)('id', 'session.user.id', function () {
            return this.get('id') === this.get('session.user.id');
        }),

        isActive: (0, _emberComputed.default)('status', function () {
            // TODO: review "locked" as an "active" status
            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;
        }),

        isSuspended: (0, _emberComputed.equal)('status', 'inactive'),
        isLocked: (0, _emberComputed.equal)('status', 'locked'),

        role: (0, _emberComputed.default)('roles', {
            get: function get() {
                return this.get('roles.firstObject');
            },
            set: function set(key, value) {
                // Only one role per user, so remove any old data.
                this.get('roles').clear();
                this.get('roles').pushObject(value);

                return value;
            }
        }),

        saveNewPassword: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function _callee() {
            var validation, url;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            validation = this.get('isLoggedIn') ? 'ownPasswordChange' : 'passwordChange';
                            _context.prev = 1;
                            _context.next = 4;
                            return this.validate({ property: validation });

                        case 4:
                            _context.next = 9;
                            break;

                        case 6:
                            _context.prev = 6;
                            _context.t0 = _context['catch'](1);
                            return _context.abrupt('return');

                        case 9:
                            _context.prev = 9;
                            url = this.get('ghostPaths.url').api('users', 'password');
                            _context.next = 13;
                            return this.get('ajax').put(url, {
                                data: {
                                    password: [{
                                        user_id: this.get('id'),
                                        oldPassword: this.get('password'),
                                        newPassword: this.get('newPassword'),
                                        ne2Password: this.get('ne2Password')
                                    }]
                                }
                            });

                        case 13:

                            this.setProperties({
                                password: '',
                                newPassword: '',
                                ne2Password: ''
                            });

                            this.get('notifications').showNotification('Password updated.', { type: 'success', key: 'user.change-password.success' });

                            // clear errors manually for ne2password because validation
                            // engine only clears the "validated proeprty"
                            // TODO: clean up once we have a better validations library
                            this.get('errors').remove('ne2Password');

                            return _context.abrupt('return', true);

                        case 19:
                            _context.prev = 19;
                            _context.t1 = _context['catch'](9);

                            this.get('notifications').showAPIError(_context.t1, { key: 'user.change-password' });

                        case 22:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[1, 6], [9, 19]]);
        })).drop()
    });
});
define('ghost-admin/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberResolver.default;
});
define('ghost-admin/router', ['exports', 'ember-router', 'ghost-admin/config/environment', 'ghost-admin/utils/document-title', 'ghost-admin/utils/ghost-paths', 'ember-service/inject', 'ember-evented/on'], function (exports, _emberRouter, _environment, _documentTitle, _ghostPaths, _inject, _on) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var GhostRouter = _emberRouter.default.extend({
        location: _environment.default.locationType, // use HTML5 History API instead of hash-tag based URLs
        rootURL: (0, _ghostPaths.default)().adminRoot, // admin interface lives under sub-directory /ghost

        notifications: (0, _inject.default)(),

        displayDelayedNotifications: (0, _on.default)('didTransition', function () {
            this.get('notifications').displayDelayed();
        })
    });

    (0, _documentTitle.default)();

    GhostRouter.map(function () {
        this.route('setup', function () {
            this.route('one');
            this.route('two');
            this.route('three');
        });

        this.route('signin');
        this.route('signout');
        this.route('signup', { path: '/signup/:token' });
        this.route('reset', { path: '/reset/:token' });
        this.route('about', { path: '/about' });

        this.route('posts', { path: '/' }, function () {});

        this.route('editor', function () {
            this.route('new', { path: '' });
            this.route('edit', { path: ':post_id' });
        });

        this.route('team', { path: '/team' }, function () {
            this.route('user', { path: ':user_slug' });
        });

        this.route('settings.general', { path: '/settings/general' });
        this.route('settings.tags', { path: '/settings/tags' }, function () {
            this.route('tag', { path: ':tag_slug' });
            this.route('new');
        });
        this.route('settings.labs', { path: '/settings/labs' });
        this.route('settings.code-injection', { path: '/settings/code-injection' });
        this.route('settings.design', { path: '/settings/design' }, function () {
            this.route('uploadtheme');
        });
        this.route('settings.apps', { path: '/settings/apps' }, function () {
            this.route('slack', { path: 'slack' });
            this.route('amp', { path: 'amp' });
        });

        this.route('subscribers', function () {
            this.route('new');
            this.route('import');
        });

        this.route('error404', { path: '/*path' });
    });

    exports.default = GhostRouter;
});
define('ghost-admin/routes/about', ['exports', 'ghost-admin/routes/authenticated', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _authenticated.default.extend(_styleBody.default, {
        titleToken: 'About',

        classNames: ['view-about'],

        ghostPaths: (0, _inject.default)(),
        ajax: (0, _inject.default)(),

        cachedConfig: false,

        model: function model() {
            var _this = this;

            var cachedConfig = this.get('cachedConfig');
            var configUrl = this.get('ghostPaths.url').api('configuration', 'about');

            if (cachedConfig) {
                return cachedConfig;
            }

            return this.get('ajax').request(configUrl).then(function (configurationResponse) {
                var _configurationRespons = _slicedToArray(configurationResponse.configuration, 1),
                    cachedConfig = _configurationRespons[0];

                _this.set('cachedConfig', cachedConfig);

                return cachedConfig;
            });
        }
    });
});
define('ghost-admin/routes/application', ['exports', 'jquery', 'ember-simple-auth/mixins/application-route-mixin', 'ember-simple-auth/configuration', 'rsvp', 'ember-route', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/utils/ctrl-or-cmd', 'ember-service/inject', 'moment', 'ember-metal/observer', 'ember-runloop', 'ghost-admin/utils/window-proxy', 'ember-string', 'ember-array/utils', 'ember-ajax/errors'], function (exports, _jquery, _applicationRouteMixin, _configuration, _rsvp, _emberRoute, _shortcutsRoute, _ctrlOrCmd, _inject, _moment, _observer, _emberRunloop, _windowProxy, _emberString, _utils, _errors) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    function K() {
        return this;
    }

    var shortcuts = {};

    shortcuts.esc = { action: 'closeMenus', scope: 'all' };
    shortcuts[_ctrlOrCmd.default + '+s'] = { action: 'save', scope: 'all' };

    exports.default = _emberRoute.default.extend(_applicationRouteMixin.default, _shortcutsRoute.default, {
        shortcuts: shortcuts,

        routeAfterAuthentication: 'posts',

        config: (0, _inject.default)(),
        feature: (0, _inject.default)(),
        dropdown: (0, _inject.default)(),
        lazyLoader: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        settings: (0, _inject.default)(),
        upgradeNotification: (0, _inject.default)(),
        tour: (0, _inject.default)(),

        beforeModel: function beforeModel() {
            return this.get('config').fetch();
        },
        afterModel: function afterModel(model, transition) {
            var _this = this;

            this._super.apply(this, arguments);

            if (this.get('session.isAuthenticated')) {
                this.set('appLoadTransition', transition);
                transition.send('loadServerNotifications');
                transition.send('checkForOutdatedDesktopApp');

                // trigger a background token refresh to enable "infinite" sessions
                // NOTE: we only do this if the last refresh was > 1 day ago to avoid
                // potential issues with multiple tabs and concurrent admin loads/refreshes.
                // see https://github.com/TryGhost/Ghost/issues/8616
                var session = this.get('session.session');
                var expiresIn = session.get('authenticated.expires_in') * 1000;
                var expiresAt = session.get('authenticated.expires_at');
                var lastRefresh = (0, _moment.default)(expiresAt - expiresIn);
                var oneDayAgo = (0, _moment.default)().subtract(1, 'day');

                if (lastRefresh.isBefore(oneDayAgo)) {
                    var authenticator = session._lookupAuthenticator(session.authenticator);
                    if (authenticator && authenticator.onOnline) {
                        authenticator.onOnline();
                    }
                }

                var featurePromise = this.get('feature').fetch().then(function () {
                    if (_this.get('feature.nightShift')) {
                        return _this._setAdminTheme();
                    }
                });

                var settingsPromise = this.get('settings').fetch();
                var tourPromise = this.get('tour').fetchViewed();

                // return the feature/settings load promises so that we block until
                // they are loaded to enable synchronous access everywhere
                return _rsvp.default.all([featurePromise, settingsPromise, tourPromise]);
            }
        },
        title: function title(tokens) {
            return tokens.join(' - ') + ' - ' + this.get('config.blogTitle');
        },
        sessionAuthenticated: function sessionAuthenticated() {
            var _this2 = this;

            if (this.get('session.skipAuthSuccessHandler')) {
                return;
            }

            // standard ESA post-sign-in redirect
            this._super.apply(this, arguments);

            // trigger post-sign-in background behaviour
            this.get('session.user').then(function (user) {
                _this2.send('signedIn', user);
            });
        },
        sessionInvalidated: function sessionInvalidated() {
            var transition = this.get('appLoadTransition');

            if (transition) {
                transition.send('authorizationFailed');
            } else {
                _emberRunloop.default.scheduleOnce('routerTransitions', this, function () {
                    this.send('authorizationFailed');
                });
            }
        },


        _nightShift: (0, _observer.default)('feature.nightShift', function () {
            this._setAdminTheme();
        }),

        _setAdminTheme: function _setAdminTheme() {
            var nightShift = this.get('feature.nightShift');

            return this.get('lazyLoader').loadStyle('dark', 'assets/ghost-dark-41d2d055f9a408d7e0ac5d43f04b9fb3.css', true).then(function () {
                (0, _jquery.default)('link[title=dark]').prop('disabled', !nightShift);
                (0, _jquery.default)('link[title=light]').prop('disabled', nightShift);
            });
        },


        actions: {
            openMobileMenu: function openMobileMenu() {
                this.controller.set('showMobileMenu', true);
            },
            openSettingsMenu: function openSettingsMenu() {
                this.controller.set('showSettingsMenu', true);
            },
            closeMenus: function closeMenus() {
                this.get('dropdown').closeDropdowns();
                this.controller.setProperties({
                    showSettingsMenu: false,
                    showMobileMenu: false
                });
            },
            didTransition: function didTransition() {
                this.set('appLoadTransition', null);
                this.send('closeMenus');
            },
            signedIn: function signedIn() {
                this.get('notifications').clearAll();
                this.send('loadServerNotifications', true);

                if (this.get('feature.nightShift')) {
                    this._setAdminTheme();
                }
            },
            invalidateSession: function invalidateSession() {
                var _this3 = this;

                this.get('session').invalidate().catch(function (error) {
                    _this3.get('notifications').showAlert(error.message, { type: 'error', key: 'session.invalidate.failed' });
                });
            },
            authorizationFailed: function authorizationFailed() {
                _windowProxy.default.replaceLocation(_configuration.default.baseURL);
            },
            loadServerNotifications: function loadServerNotifications(isDelayed) {
                var _this4 = this;

                if (this.get('session.isAuthenticated')) {
                    this.get('session.user').then(function (user) {
                        if (!user.get('isAuthor') && !user.get('isEditor')) {
                            _this4.store.findAll('notification', { reload: true }).then(function (serverNotifications) {
                                serverNotifications.forEach(function (notification) {
                                    if (notification.get('type') === 'upgrade') {
                                        _this4.get('upgradeNotification').set('content', notification.get('message'));
                                    } else {
                                        _this4.get('notifications').handleNotification(notification, isDelayed);
                                    }
                                });
                            });
                        }
                    });
                }
            },
            checkForOutdatedDesktopApp: function checkForOutdatedDesktopApp() {
                // Check if the user is running an older version of Ghost Desktop
                // that needs to be manually updated
                // (yes, the desktop team is deeply ashamed of these lines 😢)
                var ua = navigator && navigator.userAgent ? navigator.userAgent : null;

                if (ua && ua.includes && ua.includes('ghost-desktop')) {
                    var updateCheck = /ghost-desktop\/0\.((5\.0)|((4|2)\.0)|((3\.)(0|1)))/;
                    var link = '<a href="https://dev.ghost.org/ghost-desktop-manual-update" target="_blank">click here</a>';
                    var msg = 'Your version of Ghost Desktop needs to be manually updated. Please ' + link + ' to get started.';

                    if (updateCheck.test(ua)) {
                        this.get('notifications').showAlert((0, _emberString.htmlSafe)(msg), {
                            type: 'warn',
                            key: 'desktop.manual.upgrade'
                        });
                    }
                }
            },
            toggleMarkdownHelpModal: function toggleMarkdownHelpModal() {
                this.get('controller').toggleProperty('showMarkdownHelpModal');
            },


            // noop default for unhandled save (used from shortcuts)
            save: K,

            error: function error(_error, transition) {
                // unauthoirized errors are already handled in the ajax service
                if ((0, _errors.isUnauthorizedError)(_error)) {
                    return false;
                }

                if (_error && (0, _utils.isEmberArray)(_error.errors)) {
                    switch (_error.errors[0].errorType) {
                        case 'NotFoundError':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                var routeInfo = transition.handlerInfos[transition.handlerInfos.length - 1];
                                var router = this.get('router');
                                var params = [];

                                var _iteratorNormalCompletion = true;
                                var _didIteratorError = false;
                                var _iteratorError = undefined;

                                try {
                                    for (var _iterator = Object.keys(routeInfo.params)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                        var key = _step.value;

                                        params.push(routeInfo.params[key]);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return) {
                                            _iterator.return();
                                        }
                                    } finally {
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }

                                return this.transitionTo('error404', router.generate.apply(router, [routeInfo.name].concat(params)).replace('/ghost/', '').replace(/^\//g, ''));
                            }
                        case 'VersionMismatchError':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                this.get('upgradeStatus').requireUpgrade();
                                return false;
                            }
                        case 'Maintenance':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                this.get('upgradeStatus').maintenanceAlert();
                                return false;
                            }
                        default:
                            {
                                this.get('notifications').showAPIError(_error);
                                // don't show the 500 page if we weren't navigating
                                if (!transition) {
                                    return false;
                                }
                            }
                    }
                }

                // fallback to 500 error page
                return true;
            }
        }
    });
});
define('ghost-admin/routes/authenticated', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember-route'], function (exports, _authenticatedRouteMixin, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend(_authenticatedRouteMixin.default, {
        authenticationRoute: 'signin'
    });
});
define('ghost-admin/routes/editor/edit', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/editor-base-route'], function (exports, _authenticated, _editorBaseRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_editorBaseRoute.default, {
        titleToken: 'Editor',

        beforeModel: function beforeModel(transition) {
            this.set('_transitionedFromNew', transition.data.fromNew);

            this._super.apply(this, arguments);
        },
        model: function model(params) {
            var _this = this;

            /* eslint-disable camelcase */
            var query = {
                id: params.post_id,
                status: 'all',
                staticPages: 'all',
                formats: 'mobiledoc,plaintext'
            };
            /* eslint-enable camelcase */

            return this.store.query('post', query).then(function (records) {
                var post = records.get('firstObject');

                if (post) {
                    return post;
                }

                return _this.replaceWith('posts.index');
            });
        },
        afterModel: function afterModel(post) {
            var _this2 = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {
                    return _this2.replaceWith('posts.index');
                }
            });
        },
        setupController: function setupController(controller) {
            this._super.apply(this, arguments);
            controller.set('shouldFocusEditor', this.get('_transitionedFromNew'));
        },


        actions: {
            authorizationFailed: function authorizationFailed() {
                this.get('controller').send('toggleReAuthenticateModal');
            },
            redirectToContentScreen: function redirectToContentScreen() {
                this.transitionTo('posts');
            }
        }
    });
});
define('ghost-admin/routes/editor/index', ['exports', 'ember-route'], function (exports, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('editor.new');
        }
    });
});
define('ghost-admin/routes/editor/new', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/editor-base-route'], function (exports, _authenticated, _editorBaseRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_editorBaseRoute.default, {
        titleToken: 'Editor',

        model: function model() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                return _this.store.createRecord('post', {
                    author: user
                });
            });
        },
        renderTemplate: function renderTemplate(controller, model) {
            this.render('editor/edit', {
                controller: controller,
                model: model
            });
        },


        actions: {
            willTransition: function willTransition(transition) {
                // decorate the transition object so the editor.edit route
                // knows this was the previous active route
                transition.data.fromNew = true;

                this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost-admin/routes/error404', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Route = _ember.default.Route;
    exports.default = Route.extend({
        controllerName: 'error',
        templateName: 'error',
        titleToken: 'Error',

        model: function model() {
            return {
                status: 404
            };
        }
    });
});
define('ghost-admin/routes/posts', ['exports', 'jquery', 'ghost-admin/routes/authenticated', 'ember-infinity/mixins/route', 'ember-platform', 'ember-utils'], function (exports, _jquery, _authenticated, _route, _emberPlatform, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_route.default, {
        titleToken: 'Content',

        perPage: 30,
        perPageParam: 'limit',
        totalPagesParam: 'meta.pagination.pages',

        queryParams: {
            type: {
                refreshModel: true,
                replace: true
            },
            author: {
                refreshModel: true,
                replace: true
            },
            tag: {
                refreshModel: true,
                replace: true
            },
            order: {
                refreshModel: true,
                replace: true
            }
        },

        _type: null,

        model: function model(params) {
            var _this = this;

            return this.get('session.user').then(function (user) {
                var queryParams = _this._typeParams(params.type);
                var filterParams = { tag: params.tag };

                if (user.get('isAuthor')) {
                    // authors can only view their own posts
                    filterParams.author = user.get('slug');
                } else if (params.author) {
                    filterParams.author = params.author;
                }

                var filter = _this._filterString(filterParams);
                if (!(0, _emberUtils.isBlank)(filter)) {
                    queryParams.filter = filter;
                }

                if (!(0, _emberUtils.isBlank)(params.order)) {
                    queryParams.order = params.order;
                }

                queryParams.formats = 'mobiledoc,plaintext';

                var perPage = _this.get('perPage');
                var paginationSettings = (0, _emberPlatform.assign)({ perPage: perPage, startingPage: 1 }, queryParams);

                return _this.infinityModel('post', paginationSettings);
            });
        },
        _typeParams: function _typeParams(type) {
            var status = 'all';
            var staticPages = 'all';

            switch (type) {
                case 'draft':
                    status = 'draft';
                    staticPages = false;
                    break;
                case 'published':
                    status = 'published';
                    staticPages = false;
                    break;
                case 'scheduled':
                    status = 'scheduled';
                    staticPages = false;
                    break;
                case 'page':
                    staticPages = true;
                    break;
            }

            return {
                status: status,
                staticPages: staticPages
            };
        },
        _filterString: function _filterString(filter) {
            return Object.keys(filter).map(function (key) {
                var value = filter[key];

                if (!(0, _emberUtils.isBlank)(value)) {
                    return key + ':' + filter[key];
                }
            }).compact().join('+');
        },


        // trigger a background load of all tags and authors for use in the filter dropdowns
        setupController: function setupController(controller) {
            var _this2 = this;

            this._super.apply(this, arguments);

            if (!controller._hasLoadedTags) {
                this.get('store').query('tag', { limit: 'all' }).then(function () {
                    controller._hasLoadedTags = true;
                });
            }

            this.get('session.user').then(function (user) {
                if (!user.get('isAuthor') && !controller._hasLoadedAuthors) {
                    _this2.get('store').query('user', { limit: 'all' }).then(function () {
                        controller._hasLoadedAuthors = true;
                    });
                }
            });
        },


        actions: {
            willTransition: function willTransition() {
                if (this.get('controller')) {
                    this.resetController();
                }
            },
            queryParamsDidChange: function queryParamsDidChange() {
                // scroll back to the top
                (0, _jquery.default)('.content-list').scrollTop(0);

                this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost-admin/routes/reset', ['exports', 'ember-route', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _emberRoute, _unauthenticatedRouteMixin, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend(_styleBody.default, _unauthenticatedRouteMixin.default, {
        classNames: ['ghost-reset'],

        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),

        beforeModel: function beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You can\'t reset your password while you\'re signed in.', { type: 'warn', delayed: true, key: 'password.reset.signed-in' });
            }

            this._super.apply(this, arguments);
        },
        setupController: function setupController(controller, params) {
            controller.token = params.token;
        },


        // Clear out any sensitive information
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controller.clearData();
        }
    });
});
define('ghost-admin/routes/settings/apps', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: (0, _inject.default)(),

        titleToken: 'Settings - Apps',
        classNames: ['settings-view-apps'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },


        // we don't want to set the model property but we do want to ensure we have
        // up-to-date settings so pause via afterModel
        afterModel: function afterModel() {
            return this.get('settings').reload();
        }
    });
});
define('ghost-admin/routes/settings/apps/amp', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, {
        titleToken: 'Settings - Apps - AMP',

        classNames: ['settings-view-apps-amp'],

        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }

    });
});
define('ghost-admin/routes/settings/apps/slack', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, {
        titleToken: 'Settings - Apps - Slack',

        classNames: ['settings-view-apps-slack'],

        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
define('ghost-admin/routes/settings/code-injection', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        titleToken: 'Settings - Code injection',
        classNames: ['settings-view-code'],

        settings: (0, _inject.default)(),

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },
        model: function model() {
            return this.get('settings').reload();
        },


        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
define('ghost-admin/routes/settings/design', ['exports', 'jquery', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'rsvp', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _jquery, _authenticated, _currentUserSettings, _rsvp, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: (0, _inject.default)(),

        titleToken: 'Settings - Design',
        classNames: ['settings-view-design'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor());
        },
        model: function model() {
            return _rsvp.default.hash({
                settings: this.get('settings').reload(),
                themes: this.get('store').findAll('theme')
            });
        },
        setupController: function setupController(controller, models) {
            controller.set('model', models.settings);
            controller.set('themes', this.get('store').peekAll('theme'));
            this.get('controller').send('reset');
        },


        actions: {
            save: function save() {
                // since shortcuts are run on the route, we have to signal to the components
                // on the page that we're about to save.
                (0, _jquery.default)('.page-actions .gh-btn-blue').focus();

                this.get('controller').send('save');
            },
            willTransition: function willTransition() {
                // reset the model so that our CPs re-calc and unsaved changes aren't
                // persisted across transitions
                this.set('controller.model', null);
                return this._super.apply(this, arguments);
            },
            activateTheme: function activateTheme(theme) {
                return this.get('controller').send('activateTheme', theme);
            }
        }
    });
});
define('ghost-admin/routes/settings/design/uploadtheme', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        model: function model() {
            return this.get('store').findAll('theme');
        },


        actions: {
            cancel: function cancel() {
                this.transitionTo('settings.design');
            }
        }
    });
});
define('ghost-admin/routes/settings/general', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'rsvp', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _rsvp, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        config: (0, _inject.default)(),
        settings: (0, _inject.default)(),

        titleToken: 'Settings - General',
        classNames: ['settings-view-general'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },
        model: function model() {
            return _rsvp.default.hash({
                settings: this.get('settings').reload(),
                availableTimezones: this.get('config.availableTimezones')
            });
        },
        setupController: function setupController(controller, models) {
            controller.set('model', models.settings);
            controller.set('themes', this.get('store').peekAll('theme'));
            controller.set('availableTimezones', models.availableTimezones);
        },


        actions: {
            save: function save() {
                return this.get('controller').send('save');
            },
            reloadSettings: function reloadSettings() {
                return this.get('settings').reload();
            }
        }
    });
});
define('ghost-admin/routes/settings/labs', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: (0, _inject.default)(),

        titleToken: 'Settings - Labs',
        classNames: ['settings'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },
        model: function model() {
            return this.get('settings').reload();
        },
        resetController: function resetController(controller, isExiting) {
            if (isExiting) {
                controller.reset();
            }
        }
    });
});
define('ghost-admin/routes/settings/tags', ['exports', 'jquery', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/shortcuts-route'], function (exports, _jquery, _authenticated, _currentUserSettings, _shortcutsRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_currentUserSettings.default, _shortcutsRoute.default, {
        titleToken: 'Settings - Tags',

        perPage: 30,
        perPageParam: 'limit',
        totalPagesParam: 'meta.pagination.pages',

        queryParams: {
            include: 'count.posts'
        },

        shortcuts: {
            'up, k': 'moveUp',
            'down, j': 'moveDown',
            left: 'focusList',
            right: 'focusContent',
            c: 'newTag'
        },

        // authors aren't allowed to manage tags
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);

            return this.get('session.user').then(this.transitionAuthor());
        },


        // set model to a live array so all tags are shown and created/deleted tags
        // are automatically added/removed. Also load all tags in the background,
        // pausing to show the loading spinner if no tags have been loaded yet
        model: function model() {
            var promise = this.store.query('tag', { limit: 'all', include: 'count.posts' });
            var filter = this.store.filter('tag', function (tag) {
                return !tag.get('isNew');
            });

            if (this.store.peekAll('tag').get('length') === 0) {
                return promise.then(function () {
                    return filter;
                });
            } else {
                return filter;
            }
        },
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.send('resetShortcutsScope');
        },
        stepThroughTags: function stepThroughTags(step) {
            var currentTag = this.modelFor('settings.tags.tag');
            var tags = this.get('controller.sortedTags');
            var length = tags.get('length');

            if (currentTag && length) {
                var newPosition = tags.indexOf(currentTag) + step;

                if (newPosition >= length) {
                    return;
                } else if (newPosition < 0) {
                    return;
                }

                this.transitionTo('settings.tags.tag', tags.objectAt(newPosition));
            }
        },
        scrollContent: function scrollContent(amount) {
            var content = (0, _jquery.default)('.tag-settings-pane');
            var scrolled = content.scrollTop();

            content.scrollTop(scrolled + 50 * amount);
        },


        actions: {
            moveUp: function moveUp() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(-1);
                } else {
                    this.stepThroughTags(-1);
                }
            },
            moveDown: function moveDown() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(1);
                } else {
                    this.stepThroughTags(1);
                }
            },
            focusList: function focusList() {
                this.set('controller.keyboardFocus', 'tagList');
            },
            focusContent: function focusContent() {
                this.set('controller.keyboardFocus', 'tagContent');
            },
            newTag: function newTag() {
                this.transitionTo('settings.tags.new');
            },
            resetShortcutsScope: function resetShortcutsScope() {
                key.setScope('default');
            }
        }
    });
});
define('ghost-admin/routes/settings/tags/index', ['exports', 'ghost-admin/routes/authenticated', 'ember-service/inject'], function (exports, _authenticated, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        mediaQueries: (0, _inject.default)(),

        beforeModel: function beforeModel() {
            var firstTag = this.modelFor('settings.tags').get('firstObject');

            this._super.apply(this, arguments);

            if (firstTag && !this.get('mediaQueries.maxWidth600')) {
                this.transitionTo('settings.tags.tag', firstTag);
            }
        }
    });
});
define('ghost-admin/routes/settings/tags/new', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({

        controllerName: 'settings.tags.tag',

        model: function model() {
            return this.store.createRecord('tag');
        },
        renderTemplate: function renderTemplate() {
            this.render('settings.tags.tag');
        },


        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }
    });
});
define('ghost-admin/routes/settings/tags/tag', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        model: function model(params) {
            return this.store.queryRecord('tag', { slug: params.tag_slug });
        },
        serialize: function serialize(model) {
            return { tag_slug: model.get('slug') };
        },
        setupController: function setupController(controller, model) {
            this._super.apply(this, arguments);
            this.controllerFor('settings.tags').scrollTagIntoView(model);
        },


        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }
    });
});
define('ghost-admin/routes/setup', ['exports', 'ember-route', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _emberRoute, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _emberRoute.default.extend(_styleBody.default, {
        titleToken: 'Setup',

        classNames: ['ghost-setup'],

        ghostPaths: (0, _inject.default)(),
        session: (0, _inject.default)(),
        ajax: (0, _inject.default)(),
        config: (0, _inject.default)(),

        // use the beforeModel hook to check to see whether or not setup has been
        // previously completed.  If it has, stop the transition into the setup page.
        beforeModel: function beforeModel() {
            var _this = this;

            this._super.apply(this, arguments);

            // with OAuth auth users are authenticated on step 2 so we
            // can't use the session.isAuthenticated shortcut
            if (!this.get('config.ghostOAuth') && this.get('session.isAuthenticated')) {
                this.transitionTo('posts');
                return;
            }

            var authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

            // check the state of the setup process via the API
            return this.get('ajax').request(authUrl).then(function (result) {
                var _result$setup = _slicedToArray(result.setup, 1),
                    setup = _result$setup[0];

                if (setup.status) {
                    return _this.transitionTo('signin');
                } else {
                    var controller = _this.controllerFor('setup/two');
                    if (setup.title) {
                        controller.set('blogTitle', setup.title.replace(/&apos;/gim, '\''));
                    }

                    if (setup.name) {
                        controller.set('name', setup.name.replace(/&apos;/gim, '\''));
                    }

                    if (setup.email) {
                        controller.set('email', setup.email);
                    }
                }
            });
        },
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controllerFor('setup/two').set('password', '');
        }
    });
});
define('ghost-admin/routes/setup/index', ['exports', 'ember-route'], function (exports, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('setup.one');
        }
    });
});
define('ghost-admin/routes/setup/three', ['exports', 'ember-route'], function (exports, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            if (!this.controllerFor('setup.two').get('blogCreated')) {
                this.transitionTo('setup.two');
            }
        }
    });
});
define('ghost-admin/routes/signin', ['exports', 'ember-data', 'ember-object', 'ember-route', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _emberData, _emberObject, _emberRoute, _unauthenticatedRouteMixin, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Errors = _emberData.default.Errors;
    exports.default = _emberRoute.default.extend(_unauthenticatedRouteMixin.default, _styleBody.default, {
        titleToken: 'Sign In',

        classNames: ['ghost-login'],

        model: function model() {
            return _emberObject.default.create({
                identification: '',
                password: '',
                errors: Errors.create()
            });
        },


        // the deactivate hook is called after a route has been exited.
        deactivate: function deactivate() {
            var controller = this.controllerFor('signin');

            this._super.apply(this, arguments);

            // clear the properties that hold the credentials when we're no longer on the signin screen
            controller.set('model.identification', '');
            controller.set('model.password', '');
        }
    });
});
define('ghost-admin/routes/signout', ['exports', 'ghost-admin/routes/authenticated', 'ember', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _ember, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var canInvoke = _ember.default.canInvoke;
    exports.default = _authenticated.default.extend(_styleBody.default, {
        titleToken: 'Sign Out',

        classNames: ['ghost-signout'],

        notifications: (0, _inject.default)(),

        afterModel: function afterModel(model, transition) {
            this.get('notifications').clearAll();
            if (canInvoke(transition, 'send')) {
                transition.send('invalidateSession');
            } else {
                this.send('invalidateSession');
            }
        }
    });
});
define('ghost-admin/routes/signup', ['exports', 'ember-data', 'ember-object', 'rsvp', 'ember-route', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _emberData, _emberObject, _rsvp, _emberRoute, _unauthenticatedRouteMixin, _inject, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var Promise = _rsvp.default.Promise;
    var Errors = _emberData.default.Errors;
    exports.default = _emberRoute.default.extend(_styleBody.default, _unauthenticatedRouteMixin.default, {
        classNames: ['ghost-signup'],

        ghostPaths: (0, _inject.default)(),
        notifications: (0, _inject.default)(),
        session: (0, _inject.default)(),
        ajax: (0, _inject.default)(),

        beforeModel: function beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You need to sign out to register as a new user.', { type: 'warn', delayed: true, key: 'signup.create.already-authenticated' });
            }

            this._super.apply(this, arguments);
        },
        model: function model(params) {
            var _this = this;

            var model = _emberObject.default.create();
            var re = /^(?:[A-Za-z0-9_\-]{4})*(?:[A-Za-z0-9_\-]{2}|[A-Za-z0-9_\-]{3})?$/;
            var email = void 0,
                tokenText = void 0;

            return new Promise(function (resolve) {
                if (!re.test(params.token)) {
                    _this.get('notifications').showAlert('Invalid token.', { type: 'error', delayed: true, key: 'signup.create.invalid-token' });

                    return resolve(_this.transitionTo('signin'));
                }

                tokenText = atob(params.token);
                email = tokenText.split('|')[1];

                model.set('email', email);
                model.set('token', params.token);
                model.set('errors', Errors.create());

                var authUrl = _this.get('ghostPaths.url').api('authentication', 'invitation');

                return _this.get('ajax').request(authUrl, {
                    dataType: 'json',
                    data: {
                        email: email
                    }
                }).then(function (response) {
                    if (response && response.invitation && response.invitation[0].valid === false) {
                        _this.get('notifications').showAlert('The invitation does not exist or is no longer valid.', { type: 'warn', delayed: true, key: 'signup.create.invalid-invitation' });

                        return resolve(_this.transitionTo('signin'));
                    }

                    model.set('invitedBy', response.invitation[0].invitedBy);

                    resolve(model);
                }).catch(function () {
                    resolve(model);
                });
            });
        },
        deactivate: function deactivate() {
            this._super.apply(this, arguments);

            // clear the properties that hold the sensitive data from the controller
            this.controllerFor('signup').setProperties({ email: '', password: '', token: '' });
        }
    });
});
define('ghost-admin/routes/subscribers', ['exports', 'ghost-admin/routes/authenticated', 'rsvp', 'ember-service/inject'], function (exports, _authenticated, _rsvp, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        titleToken: 'Subscribers',

        feature: (0, _inject.default)(),

        // redirect if subscribers is disabled or user isn't owner/admin
        beforeModel: function beforeModel() {
            var _this = this;

            this._super.apply(this, arguments);
            var promises = {
                user: this.get('session.user'),
                subscribers: this.get('feature.subscribers')
            };

            return _rsvp.default.hash(promises).then(function (hash) {
                var user = hash.user,
                    subscribers = hash.subscribers;


                if (!subscribers || !(user.get('isOwner') || user.get('isAdmin'))) {
                    return _this.transitionTo('posts');
                }
            });
        },
        setupController: function setupController(controller) {
            this._super.apply(this, arguments);
            controller.initializeTable();
            controller.send('loadFirstPage');
        },
        resetController: function resetController(controller, isExiting) {
            this._super.apply(this, arguments);
            if (isExiting) {
                controller.set('order', 'created_at');
                controller.set('direction', 'desc');
            }
        },


        actions: {
            addSubscriber: function addSubscriber(subscriber) {
                this.get('controller').send('addSubscriber', subscriber);
            },
            reset: function reset() {
                this.get('controller').send('reset');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/import', ['exports', 'ember-route'], function (exports, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend({
        actions: {
            cancel: function cancel() {
                this.transitionTo('subscribers');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/new', ['exports', 'ember-route'], function (exports, _emberRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberRoute.default.extend({
        model: function model() {
            return this.get('store').createRecord('subscriber');
        },
        deactivate: function deactivate() {
            var subscriber = this.controller.get('model');

            this._super.apply(this, arguments);

            if (subscriber.get('isNew')) {
                this.rollbackModel();
            }
        },
        rollbackModel: function rollbackModel() {
            var subscriber = this.controller.get('model');
            subscriber.rollbackAttributes();
        },


        actions: {
            save: function save() {
                var _this = this;

                var subscriber = this.controller.get('model');
                return subscriber.save().then(function (saved) {
                    _this.send('addSubscriber', saved);
                    return saved;
                });
            },
            cancel: function cancel() {
                this.rollbackModel();
                this.transitionTo('subscribers');
            }
        }
    });
});
define('ghost-admin/routes/team/index', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/pagination', 'rsvp', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _pagination, _rsvp, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, _pagination.default, {
        titleToken: 'Team',

        classNames: ['view-team'],

        paginationModel: 'user',
        paginationSettings: {
            filter: 'status:-inactive',
            limit: 20
        },

        model: function model() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                var modelPromises = {
                    activeUsers: _this.loadFirstPage()
                };

                // authors do not have permission to hit the invites or suspended users endpoint
                if (!user.get('isAuthor')) {
                    modelPromises.invites = _this.store.query('invite', { limit: 'all' }).then(function () {
                        return _this.store.filter('invite', function (invite) {
                            return !invite.get('isNew');
                        });
                    });

                    // fetch suspended users separately so that infinite scroll still works
                    modelPromises.suspendedUsers = _this.store.query('user', { limit: 'all', filter: 'status:inactive' });
                }

                // we need to load the roles into ember cache
                // invites return role_id only and we do not offer a /role/:id endpoint
                modelPromises.roles = _this.get('store').query('role', {}).then(function (roles) {
                    return roles;
                });

                return _rsvp.default.hash(modelPromises);
            });
        },
        setupController: function setupController(controller, models) {
            controller.setProperties(models);
        },


        actions: {
            reload: function reload() {
                this.refresh();
            }
        }
    });
});
define('ghost-admin/routes/team/user', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        titleToken: 'Team - User',

        classNames: ['team-view-user'],

        model: function model(params) {
            return this.store.queryRecord('user', { slug: params.user_slug, include: 'count.posts' });
        },
        serialize: function serialize(model) {
            return { user_slug: model.get('slug') };
        },
        afterModel: function afterModel(user) {
            var _this = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (currentUser) {
                var isOwnProfile = user.get('id') === currentUser.get('id');
                var isAuthor = currentUser.get('isAuthor');
                var isEditor = currentUser.get('isEditor');

                if (isAuthor && !isOwnProfile) {
                    _this.transitionTo('team.user', currentUser);
                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {
                    _this.transitionTo('team');
                }
            });
        },
        deactivate: function deactivate() {
            var model = this.modelFor('team.user');

            // we want to revert any unsaved changes on exit
            if (model && model.get('hasDirtyAttributes')) {
                model.rollbackAttributes();
            }

            model.get('errors').clear();

            this._super.apply(this, arguments);
        },


        actions: {
            didTransition: function didTransition() {
                this.modelFor('team.user').get('errors').clear();
            },
            save: function save() {
                this.get('controller.save').perform();
            }
        }
    });
});
define('ghost-admin/serializers/application', ['exports', 'ember', 'ember-data/serializers/rest', 'ember-string'], function (exports, _ember, _rest, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var pluralize = _ember.default.String.pluralize;
    exports.default = _rest.default.extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Our API expects an id on the posted object
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            hash[root] = [data];
        },
        keyForAttribute: function keyForAttribute(attr) {
            return (0, _emberString.decamelize)(attr);
        }
    });
});
define('ghost-admin/serializers/invite', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            role: { key: 'role_id' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/notification', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            key: { key: 'location' }
        }
    });
});
define('ghost-admin/serializers/post', ['exports', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin', 'ember'], function (exports, _application, _embeddedRecordsMixin, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var pluralize = _ember.default.String.pluralize;
    exports.default = _application.default.extend(_embeddedRecordsMixin.default, {
        // settings for the EmbeddedRecordsMixin.
        attrs: {
            tags: { embedded: 'always' },
            publishedAtUTC: { key: 'published_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        normalize: function normalize(model, hash, prop) {
            // this is to enable us to still access the raw authorId
            // without requiring an extra get request (since it is an
            // async relationship).
            if ((prop === 'post' || prop === 'posts') && hash.author !== undefined) {
                hash.author_id = hash.author;
            }

            return this._super.apply(this, arguments);
        },
        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = pluralize(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super.apply(this, arguments);
        },
        normalizeArrayResponse: function normalizeArrayResponse() {
            return this._super.apply(this, arguments);
        },
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.uuid;
            delete data.html;
            // Inserted locally as a convenience.
            delete data.author_id;
            // Read-only virtual property.
            delete data.url;

            hash[root] = [data];
        }
    });
});
define('ghost-admin/serializers/role', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/setting', ['exports', 'ghost-admin/serializers/application', 'ember'], function (exports, _application, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var pluralize = _ember.default.String.pluralize;
    exports.default = _application.default.extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Settings API does not want ids
            options = options || {};
            options.includeId = false;

            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);
            var payload = [];

            delete data.id;

            Object.keys(data).forEach(function (k) {
                payload.push({ key: k, value: data[k] });
            });

            hash[root] = payload;
        },
        normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { settings: [this._extractObjectFromArrayPayload(_payload)] };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },
        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { setting: this._extractObjectFromArrayPayload(_payload) };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },
        _extractObjectFromArrayPayload: function _extractObjectFromArrayPayload(_payload) {
            var payload = { id: '0' };

            _payload.settings.forEach(function (setting) {
                payload[setting.key] = setting.value;
            });

            return payload;
        }
    });
});
define('ghost-admin/serializers/subscriber', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            unsubscribedAtUTC: { key: 'unsubscribed_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/tag', ['exports', 'ghost-admin/serializers/application', 'ember'], function (exports, _application, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var pluralize = _ember.default.String.pluralize;
    exports.default = _application.default.extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.count;

            hash[root] = [data];
        }
    });
});
define('ghost-admin/serializers/theme', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        primaryKey: 'name'
    });
});
define('ghost-admin/serializers/user', ['exports', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin', 'ember'], function (exports, _application, _embeddedRecordsMixin, _ember) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var pluralize = _ember.default.String.pluralize;
    exports.default = _application.default.extend(_embeddedRecordsMixin.default, {
        attrs: {
            roles: { embedded: 'always' },
            lastLoginUTC: { key: 'last_seen' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        extractSingle: function extractSingle(store, primaryType, payload) {
            var root = this.keyForAttribute(primaryType.modelName);
            var pluralizedRoot = pluralize(primaryType.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super.apply(this, arguments);
        },
        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = pluralize(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super.apply(this, arguments);
        }
    });
});
define('ghost-admin/services/ajax', ['exports', 'ember-ajax/services/ajax', 'ember-computed', 'ghost-admin/config/environment', 'ember-metal/get', 'ember-service/inject', 'ember-ajax/errors', 'ember-array/utils', 'ember-utils'], function (exports, _ajax, _emberComputed, _environment, _get, _inject, _errors, _utils, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isThemeValidationError = exports.isMaintenanceError = exports.isUnsupportedMediaTypeError = exports.isRequestEntityTooLargeError = exports.isServerUnreachableError = exports.isVersionMismatchError = undefined;
    exports.VersionMismatchError = VersionMismatchError;
    exports.ServerUnreachableError = ServerUnreachableError;
    exports.RequestEntityTooLargeError = RequestEntityTooLargeError;
    exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
    exports.MaintenanceError = MaintenanceError;
    exports.ThemeValidationError = ThemeValidationError;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    var JSONContentType = 'application/json';

    function isJSONContentType(header) {
        if (!header || (0, _emberUtils.isNone)(header)) {
            return false;
        }
        return header.indexOf(JSONContentType) === 0;
    }

    /* Version mismatch error */

    function VersionMismatchError(errors) {
        _errors.AjaxError.call(this, errors, 'API server is running a newer version of Ghost, please upgrade.');
    }

    VersionMismatchError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isVersionMismatchError(errorOrStatus, payload) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof VersionMismatchError;
        } else {
            return (0, _get.default)(payload || {}, 'errors.firstObject.errorType') === 'VersionMismatchError';
        }
    }

    /* Request entity too large error */

    exports.isVersionMismatchError = _isVersionMismatchError;
    function ServerUnreachableError(errors) {
        _errors.AjaxError.call(this, errors, 'Server was unreachable');
    }

    ServerUnreachableError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isServerUnreachableError(error) {
        if ((0, _errors.isAjaxError)(error)) {
            return error instanceof ServerUnreachableError;
        } else {
            return error === 0 || error === '0';
        }
    }

    exports.isServerUnreachableError = _isServerUnreachableError;
    function RequestEntityTooLargeError(errors) {
        _errors.AjaxError.call(this, errors, 'Request is larger than the maximum file size the server allows');
    }

    RequestEntityTooLargeError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isRequestEntityTooLargeError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof RequestEntityTooLargeError;
        } else {
            return errorOrStatus === 413;
        }
    }

    /* Unsupported media type error */

    exports.isRequestEntityTooLargeError = _isRequestEntityTooLargeError;
    function UnsupportedMediaTypeError(errors) {
        _errors.AjaxError.call(this, errors, 'Request contains an unknown or unsupported file type.');
    }

    UnsupportedMediaTypeError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isUnsupportedMediaTypeError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof UnsupportedMediaTypeError;
        } else {
            return errorOrStatus === 415;
        }
    }

    /* Maintenance error */

    exports.isUnsupportedMediaTypeError = _isUnsupportedMediaTypeError;
    function MaintenanceError(errors) {
        _errors.AjaxError.call(this, errors, 'Ghost is currently undergoing maintenance, please wait a moment then retry.');
    }

    MaintenanceError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isMaintenanceError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof MaintenanceError;
        } else {
            return errorOrStatus === 503;
        }
    }

    /* Theme validation error */

    exports.isMaintenanceError = _isMaintenanceError;
    function ThemeValidationError(errors) {
        _errors.AjaxError.call(this, errors, 'Theme is not compatible or contains errors.');
    }

    ThemeValidationError.prototype = Object.create(_errors.AjaxError.prototype);

    function _isThemeValidationError(errorOrStatus, payload) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof ThemeValidationError;
        } else {
            return (0, _get.default)(payload || {}, 'errors.firstObject.errorType') === 'ThemeValidationError';
        }
    }

    /* end: custom error types */

    exports.isThemeValidationError = _isThemeValidationError;
    var ajaxService = _ajax.default.extend({
        session: (0, _inject.default)(),

        headers: (0, _emberComputed.default)('session.isAuthenticated', function () {
            var session = this.get('session');
            var headers = {};

            headers['X-Ghost-Version'] = _environment.default.APP.version;

            if (session.get('isAuthenticated')) {
                session.authorize('authorizer:oauth2', function (headerName, headerValue) {
                    headers[headerName] = headerValue;
                });
            }

            return headers;
        }).volatile(),

        _makeRequest: function _makeRequest(hash) {
            var _this = this;

            var isAuthenticated = this.get('session.isAuthenticated');
            var isGhostRequest = hash.url.indexOf('/ghost/api/') !== -1;
            var isTokenRequest = isGhostRequest && hash.url.match(/authentication\/(?:token|ghost)/);
            var tokenExpiry = this.get('session.authenticated.expires_at');
            var isTokenExpired = tokenExpiry < new Date().getTime();

            if (isJSONContentType(hash.contentType) && hash.type !== 'GET') {
                if (_typeof(hash.data) === 'object') {
                    hash.data = JSON.stringify(hash.data);
                }
            }

            // we can get into a situation where the app is left open without a
            // network connection and the token subsequently expires, this will
            // result in the next network request returning a 401 and killing the
            // session. This is an attempt to detect that and restore the session
            // using the stored refresh token before continuing with the request
            //
            // TODO:
            // - this might be quite blunt, if we have a lot of requests at once
            //   we probably want to queue the requests until the restore completes
            // BUG:
            // - the original caller gets a rejected promise with `undefined` instead
            //   of the AjaxError object when session restore fails. This isn't a
            //   huge deal because the session will be invalidated and app reloaded
            //   but it would be nice to be consistent
            if (isAuthenticated && isGhostRequest && !isTokenRequest && isTokenExpired) {
                return this.get('session').restore().then(function () {
                    return _this._makeRequest(hash);
                });
            }

            return this._super.apply(this, arguments);
        },
        handleResponse: function handleResponse(status, headers, payload) {
            if (this.isVersionMismatchError(status, headers, payload)) {
                return new VersionMismatchError(payload.errors);
            } else if (this.isServerUnreachableError(status, headers, payload)) {
                return new ServerUnreachableError(payload.errors);
            } else if (this.isRequestEntityTooLargeError(status, headers, payload)) {
                return new RequestEntityTooLargeError(payload.errors);
            } else if (this.isUnsupportedMediaTypeError(status, headers, payload)) {
                return new UnsupportedMediaTypeError(payload.errors);
            } else if (this.isMaintenanceError(status, headers, payload)) {
                return new MaintenanceError(payload.errors);
            } else if (this.isThemeValidationError(status, headers, payload)) {
                return new ThemeValidationError(payload.errors);
            }

            // TODO: we may want to check that we are hitting our own API before
            // logging the user out due to a 401 response
            if (this.isUnauthorizedError(status, headers, payload) && this.get('session.isAuthenticated')) {
                this.get('session').invalidate();
            }

            return this._super.apply(this, arguments);
        },
        normalizeErrorResponse: function normalizeErrorResponse(status, headers, payload) {
            if (payload && (typeof payload === 'undefined' ? 'undefined' : _typeof(payload)) === 'object') {
                var errors = payload.error || payload.errors || payload.message || undefined;

                if (errors) {
                    if (!(0, _utils.isEmberArray)(errors)) {
                        errors = [errors];
                    }

                    payload.errors = errors.map(function (error) {
                        if (typeof error === 'string') {
                            return { message: error };
                        } else {
                            return error;
                        }
                    });
                }
            }

            return this._super(status, headers, payload);
        },
        isVersionMismatchError: function isVersionMismatchError(status, headers, payload) {
            return _isVersionMismatchError(status, payload);
        },
        isServerUnreachableError: function isServerUnreachableError(status) {
            return _isServerUnreachableError(status);
        },
        isRequestEntityTooLargeError: function isRequestEntityTooLargeError(status) {
            return _isRequestEntityTooLargeError(status);
        },
        isUnsupportedMediaTypeError: function isUnsupportedMediaTypeError(status) {
            return _isUnsupportedMediaTypeError(status);
        },
        isMaintenanceError: function isMaintenanceError(status, headers, payload) {
            return _isMaintenanceError(status, payload);
        },
        isThemeValidationError: function isThemeValidationError(status, headers, payload) {
            return _isThemeValidationError(status, payload);
        }
    });

    // we need to reopen so that internal methods use the correct contentType
    ajaxService.reopen({
        contentType: 'application/json; charset=UTF-8'
    });

    exports.default = ajaxService;
});
define('ghost-admin/services/clock', ['exports', 'ember', 'ember-service', 'moment', 'ember-runloop'], function (exports, _ember, _emberService, _moment, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;


    var ONE_SECOND = 1000;

    // Creates a clock service to run intervals.

    exports.default = _emberService.default.extend({
        second: null,
        minute: null,
        hour: null,

        init: function init() {
            this.tick();
        },
        tick: function tick() {
            var _this = this;

            var now = (0, _moment.default)().utc();

            this.setProperties({
                second: now.seconds(),
                minute: now.minutes(),
                hour: now.hours()
            });

            if (!testing) {
                _emberRunloop.default.later(function () {
                    _this.tick();
                }, ONE_SECOND);
            }
        }
    });
});
define('ghost-admin/services/config', ['exports', 'ember', 'ember-service', 'ember-computed', 'ember-service/inject', 'ember-utils'], function (exports, _ember, _emberService, _emberComputed, _inject, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var _ProxyMixin = _ember.default._ProxyMixin;
    exports.default = _emberService.default.extend(_ProxyMixin, {
        ajax: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        content: {},

        fetch: function fetch() {
            var _this = this;

            var configUrl = this.get('ghostPaths.url').api('configuration');

            return this.get('ajax').request(configUrl).then(function (config) {
                // normalize blogUrl to non-trailing-slash
                var _config$configuration = _slicedToArray(config.configuration, 1),
                    blogUrl = _config$configuration[0].blogUrl;

                config.configuration[0].blogUrl = blogUrl.replace(/\/$/, '');

                _this.set('content', config.configuration[0]);
            });
        },


        availableTimezones: (0, _emberComputed.default)(function () {
            var timezonesUrl = this.get('ghostPaths.url').api('configuration', 'timezones');

            return this.get('ajax').request(timezonesUrl).then(function (configTimezones) {
                var _configTimezones$conf = _slicedToArray(configTimezones.configuration, 1),
                    timezonesObj = _configTimezones$conf[0];

                timezonesObj = timezonesObj.timezones;

                return timezonesObj;
            });
        }),

        ghostOAuth: (0, _emberComputed.default)('ghostAuthId', function () {
            return !(0, _emberUtils.isBlank)(this.get('ghostAuthId'));
        })
    });
});
define('ghost-admin/services/cookies', ['exports', 'ember-cookies/services/cookies'], function (exports, _cookies) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _cookies.default;
});
define('ghost-admin/services/dropdown', ['exports', 'jquery', 'ghost-admin/mixins/body-event-listener', 'ember-evented', 'ember-service'], function (exports, _jquery, _bodyEventListener, _emberEvented, _emberService) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend(_emberEvented.default, _bodyEventListener.default, {
        bodyClick: function bodyClick(event) {
            var dropdownSelector = '.ember-basic-dropdown-trigger, .ember-basic-dropdown-content';

            if ((0, _jquery.default)(event.target).closest(dropdownSelector).length <= 0) {
                this.closeDropdowns();
            }
        },
        closeDropdowns: function closeDropdowns() {
            this.trigger('close');
        },
        toggleDropdown: function toggleDropdown(dropdownName, dropdownButton) {
            this.trigger('toggle', { target: dropdownName, button: dropdownButton });
        }
    });
});
define('ghost-admin/services/ember-load-config', ['exports', 'ember-load/services/ember-load-config', 'ghost-admin/config/environment'], function (exports, _emberLoadConfig, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var userConfig = _environment.default['ember-load'] || {};

  exports.default = _emberLoadConfig.default.extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });
});
define('ghost-admin/services/event-bus', ['exports', 'ember-evented', 'ember-service'], function (exports, _emberEvented, _emberService) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend(_emberEvented.default, {
        publish: function publish() {
            return this.trigger.apply(this, arguments);
        },
        subscribe: function subscribe() {
            return this.on.apply(this, arguments);
        },
        unsubscribe: function unsubscribe() {
            return this.off.apply(this, arguments);
        }
    });
});
define('ghost-admin/services/feature', ['exports', 'ember', 'rsvp', 'ember-service', 'ember-computed', 'ember-service/inject', 'ember-metal/set'], function (exports, _ember, _rsvp, _emberService, _emberComputed, _inject, _set) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.feature = feature;
    var EmberError = _ember.default.Error;
    function feature(name) {
        var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var watchedProps = user ? ['accessibility.' + name] : ['config.' + name, 'labs.' + name];

        return _emberComputed.default.apply(_ember.default, watchedProps.concat({
            get: function get() {
                if (user) {
                    return this.get('accessibility.' + name);
                }

                if (this.get('config.' + name)) {
                    return this.get('config.' + name);
                }

                return this.get('labs.' + name) || false;
            },
            set: function set(key, value) {
                this.update(key, value, user);
                return value;
            }
        }));
    }

    exports.default = _emberService.default.extend({
        store: (0, _inject.default)(),
        config: (0, _inject.default)(),
        session: (0, _inject.default)(),
        settings: (0, _inject.default)(),
        notifications: (0, _inject.default)(),

        publicAPI: feature('publicAPI'),
        subscribers: feature('subscribers'),
        nightShift: feature('nightShift', true),

        _user: null,

        labs: (0, _emberComputed.default)('settings.labs', function () {
            var labs = this.get('settings.labs');

            try {
                return JSON.parse(labs) || {};
            } catch (e) {
                return {};
            }
        }),

        accessibility: (0, _emberComputed.default)('_user.accessibility', function () {
            var accessibility = this.get('_user.accessibility');

            try {
                return JSON.parse(accessibility) || {};
            } catch (e) {
                return {};
            }
        }),

        fetch: function fetch() {
            var _this = this;

            return _rsvp.default.hash({
                settings: this.get('settings').fetch(),
                user: this.get('session.user')
            }).then(function (_ref) {
                var user = _ref.user;

                _this.set('_user', user);

                return true;
            });
        },
        update: function update(key, value) {
            var _this2 = this;

            var user = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var serviceProperty = user ? 'accessibility' : 'labs';
            var model = this.get(user ? '_user' : 'settings');
            var featureObject = this.get(serviceProperty);

            // set the new key value for either the labs property or the accessibility property
            (0, _set.default)(featureObject, key, value);

            // update the 'labs' or 'accessibility' key of the model
            model.set(serviceProperty, JSON.stringify(featureObject));

            return model.save().then(function () {
                // return the labs key value that we get from the server
                _this2.notifyPropertyChange(serviceProperty);
                return _this2.get(serviceProperty + '.' + key);
            }).catch(function (error) {
                model.rollbackAttributes();
                _this2.notifyPropertyChange(serviceProperty);

                // we'll always have an errors object unless we hit a
                // validation error
                if (!error) {
                    throw new EmberError('Validation of the feature service ' + (user ? 'user' : 'settings') + ' model failed when updating ' + serviceProperty + '.');
                }

                _this2.get('notifications').showAPIError(error);

                return _this2.get(serviceProperty + '.' + key);
            });
        }
    });
});
define('ghost-admin/services/ghost-paths', ['exports', 'ember', 'ember-service', 'ghost-admin/utils/ghost-paths'], function (exports, _ember, _emberService, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _ProxyMixin = _ember.default._ProxyMixin;
    exports.default = _emberService.default.extend(_ProxyMixin, {
        content: (0, _ghostPaths.default)()
    });
});
define('ghost-admin/services/lazy-loader', ['exports', 'jquery', 'ember', 'rsvp', 'ember-service', 'ember-service/inject'], function (exports, _jquery, _ember, _rsvp, _emberService, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var testing = _ember.default.testing;
    exports.default = _emberService.default.extend({
        ajax: (0, _inject.default)(),
        ghostPaths: (0, _inject.default)(),

        // This is needed so we can disable it in unit tests
        testing: testing,

        scriptPromises: {},

        loadScript: function loadScript(key, url) {
            if (this.get('testing')) {
                return _rsvp.default.resolve();
            }

            if (this.get('scriptPromises.' + key)) {
                // Script is already loaded/in the process of being loaded,
                // so return that promise
                return this.get('scriptPromises.' + key);
            }

            var ajax = this.get('ajax');
            var adminRoot = this.get('ghostPaths.adminRoot');

            var scriptPromise = ajax.request('' + adminRoot + url, {
                dataType: 'script',
                cache: true
            });

            this.set('scriptPromises.' + key, scriptPromise);

            return scriptPromise;
        },
        loadStyle: function loadStyle(key, url) {
            var _this = this;

            var alternate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (this.get('testing') || (0, _jquery.default)('#' + key + '-styles').length) {
                return _rsvp.default.resolve();
            }

            return new _rsvp.default.Promise(function (resolve, reject) {
                var link = document.createElement('link');
                link.id = key + '-styles';
                link.rel = alternate ? 'alternate stylesheet' : 'stylesheet';
                link.href = '' + _this.get('ghostPaths.adminRoot') + url;
                link.onload = function () {
                    if (alternate) {
                        // If stylesheet is alternate and we disable the stylesheet before injecting into the DOM,
                        // the onload handler never gets called. Thus, we should disable the link after it has finished loading
                        link.disabled = true;
                    }
                    resolve();
                };
                link.onerror = reject;

                if (alternate) {
                    link.title = key;
                }

                (0, _jquery.default)('head').append((0, _jquery.default)(link));
            });
        }
    });
});
define("ghost-admin/services/liquid-fire-transitions", ["exports", "liquid-fire/action", "liquid-fire/running-transition", "liquid-fire/transition-map", "ember-weakmap"], function (exports, _action, _runningTransition, _transitionMap, _emberWeakmap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  var wormholeActionMap = new _emberWeakmap.default();

  exports.default = _transitionMap.default.extend({
    transitionFor: function transitionFor(conditions) {
      if (conditions.matchContext && conditions.matchContext.helperName === 'liquid-wormhole' || conditions.helperName === 'liquid-wormhole') {

        var versions = conditions.versions;

        conditions.versions = versions.map(function (version) {
          return version.value || version;
        });
        conditions.parentElement = conditions.parentElement.find('.liquid-wormhole-element');
        conditions.firstTime = 'no';

        var rule = this.constraintsFor(conditions).bestMatch(conditions);
        var action = void 0;

        if (rule) {
          if (wormholeActionMap.has(rule)) {
            action = wormholeActionMap.get(rule);
          } else {
            action = new _action.default('wormhole', [{ use: rule.use }]);
            action.validateHandler(this);

            wormholeActionMap.set(rule, action);
          }
        } else {
          action = this.defaultAction();
        }

        return new _runningTransition.default(this, versions, action);
      } else {
        return this._super(conditions);
      }
    }
  });
});
define('ghost-admin/services/liquid-wormhole', ['exports', 'liquid-wormhole/services/liquid-wormhole'], function (exports, _liquidWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
define('ghost-admin/services/media-queries', ['exports', 'ember-service', 'ember-runloop'], function (exports, _emberService, _emberRunloop) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var MEDIA_QUERIES = {
        maxWidth600: '(max-width: 600px)',
        isMobile: '(max-width: 800px)',
        maxWidth900: '(max-width: 900px)',
        maxWidth1000: '(max-width: 1000px)'
    };

    exports.default = _emberService.default.extend({
        init: function init() {
            this._super.apply(this, arguments);
            this._handlers = [];
            this.loadQueries(MEDIA_QUERIES);
        },
        loadQueries: function loadQueries(queries) {
            var _this = this;

            Object.keys(queries).forEach(function (key) {
                _this.loadQuery(key, queries[key]);
            });
        },
        loadQuery: function loadQuery(key, queryString) {
            var _this2 = this;

            var query = window.matchMedia(queryString);

            this.set(key, query.matches);

            var handler = _emberRunloop.default.bind(this, function () {
                var lastValue = _this2.get(key);
                var newValue = query.matches;
                if (lastValue !== newValue) {
                    _this2.set(key, query.matches);
                }
            });
            query.addListener(handler);
            this._handlers.push([query, handler]);
        },
        willDestroy: function willDestroy() {
            this._handlers.forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    query = _ref2[0],
                    handler = _ref2[1];

                query.removeListener(handler);
            });
            this._super.apply(this, arguments);
        }
    });
});
define('ghost-admin/services/media', ['exports', 'ember-responsive/media'], function (exports, _media) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _media.default;
});
define('ghost-admin/services/moment', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _environment, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _moment.default.extend({
    defaultFormat: _ember.default.get(_environment.default, 'moment.outputFormat')
  });
});
define('ghost-admin/services/notifications', ['exports', 'ember-service', 'ember-metal/get', 'ember-service/inject', 'ember-metal/set', 'ember-string', 'ember-array/utils', 'ember-computed', 'ember-utils', 'ghost-admin/services/ajax'], function (exports, _emberService, _get, _inject, _set, _emberString, _utils, _emberComputed, _emberUtils, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend({
        delayedNotifications: (0, _utils.A)(),
        content: (0, _utils.A)(),

        upgradeStatus: (0, _inject.default)(),

        alerts: (0, _emberComputed.filter)('content', function (notification) {
            var status = (0, _get.default)(notification, 'status');
            return status === 'alert';
        }),

        notifications: (0, _emberComputed.filter)('content', function (notification) {
            var status = (0, _get.default)(notification, 'status');
            return status === 'notification';
        }),

        handleNotification: function handleNotification(message, delayed) {
            // If this is an alert message from the server, treat it as html safe
            if (typeof message.toJSON === 'function' && message.get('status') === 'alert') {
                message.set('message', message.get('message').htmlSafe());
            }

            if (!(0, _get.default)(message, 'status')) {
                (0, _set.default)(message, 'status', 'notification');
            }

            // close existing duplicate alerts/notifications to avoid stacking
            if ((0, _get.default)(message, 'key')) {
                this._removeItems((0, _get.default)(message, 'status'), (0, _get.default)(message, 'key'));
            }

            if (!delayed) {
                this.get('content').pushObject(message);
            } else {
                this.get('delayedNotifications').pushObject(message);
            }
        },
        showAlert: function showAlert(message, options) {
            options = options || {};

            this.handleNotification({
                message: message,
                status: 'alert',
                type: options.type,
                key: options.key
            }, options.delayed);
        },
        showNotification: function showNotification(message, options) {
            options = options || {};

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            } else {
                // TODO: this should be removed along with showErrors
                options.key = undefined;
            }

            this.handleNotification({
                message: message,
                status: 'notification',
                type: options.type,
                key: options.key
            }, options.delayed);
        },
        showAPIError: function showAPIError(resp, options) {
            var _this = this;

            // handle "global" errors
            if ((0, _ajax.isVersionMismatchError)(resp)) {
                return this.get('upgradeStatus').requireUpgrade();
            } else if ((0, _ajax.isMaintenanceError)(resp)) {
                return this.get('upgradeStatus').maintenanceAlert();
            }

            // loop over ember-ajax errors object
            if (resp && (0, _utils.isEmberArray)(resp.errors)) {
                return resp.errors.forEach(function (error) {
                    _this._showAPIError(error, options);
                });
            }

            this._showAPIError(resp, options);
        },
        _showAPIError: function _showAPIError(resp, options) {
            options = options || {};
            options.type = options.type || 'error';

            // if possible use the title to get a unique key
            // - we only show one alert for each key so if we get multiple errors
            //   only the last one will be shown
            if (!options.key && !(0, _emberUtils.isBlank)((0, _get.default)(resp, 'title'))) {
                options.key = (0, _emberString.dasherize)((0, _get.default)(resp, 'title'));
            }
            options.key = ['api-error', options.key].compact().join('.');

            var msg = options.defaultErrorText || 'There was a problem on the server, please try again.';

            if (resp instanceof String) {
                msg = resp;
            } else if (!(0, _emberUtils.isBlank)((0, _get.default)(resp, 'detail'))) {
                msg = resp.detail;
            } else if (!(0, _emberUtils.isBlank)((0, _get.default)(resp, 'message'))) {
                msg = resp.message;
            }

            this.showAlert(msg, options);
        },
        displayDelayed: function displayDelayed() {
            var _this2 = this;

            this.delayedNotifications.forEach(function (message) {
                _this2.get('content').pushObject(message);
            });
            this.delayedNotifications = [];
        },
        closeNotification: function closeNotification(notification) {
            var content = this.get('content');

            if (typeof notification.toJSON === 'function') {
                notification.deleteRecord();
                notification.save().finally(function () {
                    content.removeObject(notification);
                });
            } else {
                content.removeObject(notification);
            }
        },
        closeNotifications: function closeNotifications(key) {
            this._removeItems('notification', key);
        },
        closeAlerts: function closeAlerts(key) {
            this._removeItems('alert', key);
        },
        clearAll: function clearAll() {
            this.get('content').clear();
        },
        _removeItems: function _removeItems(status, key) {
            if (key) {
                var keyBase = this._getKeyBase(key);
                // TODO: keys should only have . special char but we should
                // probably use a better regexp escaping function/polyfill
                var escapedKeyBase = keyBase.replace('.', '\\.');
                var keyRegex = new RegExp('^' + escapedKeyBase);

                this.set('content', this.get('content').reject(function (item) {
                    var itemKey = (0, _get.default)(item, 'key');
                    var itemStatus = (0, _get.default)(item, 'status');

                    return itemStatus === status && itemKey && itemKey.match(keyRegex);
                }));
            } else {
                this.set('content', this.get('content').rejectBy('status', status));
            }
        },


        // take a key and return the first two elements, eg:
        // "invite.revoke.failed" => "invite.revoke"
        _getKeyBase: function _getKeyBase(key) {
            return key.split('.').slice(0, 2).join('.');
        }
    });
});
define('ghost-admin/services/popup', ['exports', 'torii/services/popup'], function (exports, _popup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _popup.default;
    }
  });
});
define('ghost-admin/services/power-calendar', ['exports', 'ember-power-calendar/services/power-calendar'], function (exports, _powerCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
define('ghost-admin/services/resize-detector', ['exports', 'ember-element-resize-detector/services/resize-detector'], function (exports, _resizeDetector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _resizeDetector.default;
    }
  });
});
define('ghost-admin/services/scrollbar-thickness', ['exports', 'ember-scrollable/services/scrollbar-thickness'], function (exports, _scrollbarThickness) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollbarThickness.default;
    }
  });
});
define('ghost-admin/services/session', ['exports', 'rsvp', 'ember-simple-auth/services/session', 'ember-computed', 'ember-service/inject'], function (exports, _rsvp, _session, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _session.default.extend({
        feature: (0, _inject.default)(),
        store: (0, _inject.default)(),
        tour: (0, _inject.default)(),

        user: (0, _emberComputed.default)(function () {
            return this.get('store').queryRecord('user', { id: 'me' });
        }),

        authenticate: function authenticate() {
            var _this = this;

            return this._super.apply(this, arguments).then(function (authResult) {
                // TODO: remove duplication with application.afterModel
                var preloadPromises = [_this.get('feature').fetch(), _this.get('tour').fetchViewed()];

                return _rsvp.default.all(preloadPromises).then(function () {
                    return authResult;
                });
            });
        }
    });
});
define('ghost-admin/services/settings', ['exports', 'ember', 'rsvp', 'ember-service', 'ghost-admin/mixins/validation-engine', 'ember-metal/get', 'ember-service/inject'], function (exports, _ember, _rsvp, _emberService, _validationEngine, _get, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _ProxyMixin = _ember.default._ProxyMixin;
    exports.default = _emberService.default.extend(_ProxyMixin, _validationEngine.default, {
        store: (0, _inject.default)(),

        // will be set to the single Settings model, it's a reference so any later
        // changes to the settings object in the store will be reflected
        content: null,

        validationType: 'setting',
        _loadingPromise: null,

        // this is an odd case where we only want to react to changes that we get
        // back from the API rather than local updates
        settledIcon: '',

        // the settings API endpoint is a little weird as it's singular and we have
        // to pass in all types - if we ever fetch settings without all types then
        // save we have problems with the missing settings being removed or reset
        _loadSettings: function _loadSettings() {
            var _this = this;

            if (!this._loadingPromise) {
                this._loadingPromise = this.get('store').queryRecord('setting', { type: 'blog,theme,private' }).then(function (settings) {
                    _this._loadingPromise = null;
                    return settings;
                });
            }

            return this._loadingPromise;
        },
        fetch: function fetch() {
            if (!this.get('content')) {
                return this.reload();
            } else {
                return _rsvp.default.resolve(this);
            }
        },
        reload: function reload() {
            var _this2 = this;

            return this._loadSettings().then(function (settings) {
                _this2.set('content', settings);
                _this2.set('settledIcon', (0, _get.default)(settings, 'icon'));
                return _this2;
            });
        },
        save: function save() {
            var _this3 = this;

            var settings = this.get('content');

            if (!settings) {
                return false;
            }

            return settings.save().then(function (settings) {
                _this3.set('settledIcon', (0, _get.default)(settings, 'icon'));
                return settings;
            });
        },
        rollbackAttributes: function rollbackAttributes() {
            return this.get('content').rollbackAttributes();
        }
    });
});
define('ghost-admin/services/slug-generator', ['exports', 'rsvp', 'ember-service', 'ember-service/inject'], function (exports, _rsvp, _emberService, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var resolve = _rsvp.default.resolve;
    exports.default = _emberService.default.extend({
        ghostPaths: (0, _inject.default)(),
        ajax: (0, _inject.default)(),

        generateSlug: function generateSlug(slugType, textToSlugify) {
            var url = void 0;

            if (!textToSlugify) {
                return resolve('');
            }

            url = this.get('ghostPaths.url').api('slugs', slugType, encodeURIComponent(textToSlugify));

            return this.get('ajax').request(url).then(function (response) {
                var _response$slugs = _slicedToArray(response.slugs, 1),
                    firstSlug = _response$slugs[0];

                var slug = firstSlug.slug;


                return slug;
            });
        }
    });
});
define('ghost-admin/services/text-measurer', ['exports', 'ember-text-measurer/services/text-measurer'], function (exports, _textMeasurer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _textMeasurer.default;
    }
  });
});
define('ghost-admin/services/torii-session', ['exports', 'torii/services/session'], function (exports, _session) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _session.default;
    }
  });
});
define('ghost-admin/services/torii', ['exports', 'torii/services/torii'], function (exports, _torii) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _torii.default;
    }
  });
});
define('ghost-admin/services/tour', ['exports', 'ember-evented', 'rsvp', 'ember-service', 'ember-computed', 'ember-service/inject'], function (exports, _emberEvented, _rsvp, _emberService, _emberComputed, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend(_emberEvented.default, {

        ghostPaths: (0, _inject.default)(),
        session: (0, _inject.default)(),

        // this service is responsible for managing tour item visibility and syncing
        // the viewed state with the server
        //
        // tour items need to be centrally defined here so that we have a single
        // source of truth for marking all tour items as viewed
        //
        // a {{gh-tour-item "unique-id"}} component can be inserted in any template,
        // this will use the tour service to grab content and determine visibility
        // with the component in control of rendering the throbber/controlling the
        // modal - this allows the component lifecycle hooks to perform automatic
        // display/cleanup when the relevant UI is visible.

        viewed: [],

        // IDs should **NOT** be changed if they have been part of a release unless
        // the re-display of the throbber should be forced. In that case it may be
        // useful to add a version number eg. `my-feature` -> `my-feature-v2`.
        // Format is as follows:
        //
        // {
        //     id: 'test',
        //     title: 'This is a test',
        //     message: 'This is a test of our <strong>feature tour</strong> feature'
        // }
        //
        // TODO: it may be better to keep this configuration elsewhere to keep the
        // service clean. Eventually we'll want apps to be able to register their
        // own throbbers and tour content
        throbbers: [],

        init: function init() {
            var adminUrl = '' + window.location.origin + this.get('ghostPaths.url').admin();
            var adminDisplayUrl = adminUrl.replace(window.location.protocol + '//', '');

            this.throbbers = [{
                id: 'getting-started',
                title: 'Getting started with Ghost',
                message: 'This is your admin area! You\'ll find all of your content, users and settings right here. You can come back any time by visiting <a href="' + adminUrl + '" target="_blank">' + adminDisplayUrl + '</a>'
            }, {
                id: 'using-the-editor',
                title: 'Using the Ghost editor',
                message: 'Ghost uses Markdown to allow you to write and format content quickly and easily. This toolbar also helps! Hit the <strong>?</strong> icon for more editor shortcuts.'
            }, {
                id: 'static-post',
                title: 'Turning posts into pages',
                message: 'Static pages are permanent pieces of content which live outside of your usual stream of posts, for example an \'about\' or \'contact\' page.'
            }, {
                id: 'featured-post',
                title: 'Setting a featured post',
                message: 'Depending on your theme, featured posts receive special styling to make them stand out as a particularly important or emphasised story.'
            }, {
                id: 'upload-a-theme',
                title: 'Customising your publication',
                message: 'Using custom themes, you can completely control the look and feel of your site to suit your branch. Here\'s a full guide to help: <strong><a href="https://themes.ghost.org" target="_blank">https://themes.ghost.org</a></strong>'
            }];
        },


        _activeThrobbers: (0, _emberComputed.default)('viewed.[]', 'throbbers.[]', function () {
            // return throbbers that haven't been viewed
            var viewed = this.get('viewed');
            var throbbers = this.get('throbbers');

            return throbbers.reject(function (throbber) {
                return viewed.includes(throbber.id);
            });
        }),

        // retrieve the IDs of the viewed throbbers from the server, always returns
        // a promise
        fetchViewed: function fetchViewed() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                var viewed = user.get('tour') || [];

                _this.set('viewed', viewed);

                return viewed;
            });
        },


        // save the list of viewed throbbers to the server overwriting the
        // entire list
        syncViewed: function syncViewed() {
            var viewed = this.get('viewed');

            return this.get('session.user').then(function (user) {
                user.set('tour', viewed);

                return user.save();
            });
        },


        // returns throbber content for a given ID only if that throbber hasn't been
        // viewed. Used by the {{gh-tour-item}} component to determine visibility
        activeThrobber: function activeThrobber(id) {
            var activeThrobbers = this.get('_activeThrobbers');
            return activeThrobbers.findBy('id', id);
        },


        // when a throbber is opened the component will call this method to mark
        // it as viewed and sync with the server. Always returns a promise
        markThrobberAsViewed: function markThrobberAsViewed(id) {
            var viewed = this.get('viewed');

            if (!viewed.includes(id)) {
                viewed.pushObject(id);
                this.trigger('viewed', id);
                return this.syncViewed();
            } else {
                return _rsvp.default.resolve(true);
            }
        },


        // opting-out will use the list of IDs defined in this file making it the
        // single-source-of-truth and allowing future client updates to control when
        // new UI should be surfaced through tour items
        optOut: function optOut() {
            var allThrobberIds = this.get('throbbers').mapBy('id');

            this.set('viewed', allThrobberIds);
            this.trigger('optOut');

            return this.syncViewed();
        },


        // this is not used anywhere at the moment but it's useful to use via ember
        // inspector as a reset mechanism
        reEnable: function reEnable() {
            this.set('viewed', []);
            return this.syncViewed();
        }
    });
});
define('ghost-admin/services/upgrade-notification', ['exports', 'ember-service'], function (exports, _emberService) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend({
        content: ''
    });
});
define('ghost-admin/services/upgrade-status', ['exports', 'ember-service', 'ember-service/inject'], function (exports, _emberService, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberService.default.extend({
        isRequired: false,

        notifications: (0, _inject.default)(),

        maintenanceAlert: function maintenanceAlert() {
            this.get('notifications').showAlert('Sorry, Ghost is currently undergoing maintenance, please wait a moment then try again.', { type: 'error', key: 'api-error.under-maintenance' });
        },
        requireUpgrade: function requireUpgrade() {
            this.set('isRequired', true);
            this.get('notifications').showAlert('Ghost has been upgraded, please copy any unsaved data and refresh the page to continue.', { type: 'error', key: 'api-error.upgrade-required' });
        }
    });
});
define('ghost-admin/session-stores/application', ['exports', 'ember-simple-auth/session-stores/adaptive', 'ghost-admin/utils/ghost-paths'], function (exports, _adaptive, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var paths = (0, _ghostPaths.default)();
    var keyName = 'ghost' + (paths.subdir.indexOf('/') === 0 ? '-' + paths.subdir.substr(1) : '') + ':session';

    exports.default = _adaptive.default.extend({
        localStorageKey: keyName,
        cookieName: keyName
    });
});
define("ghost-admin/svgs", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    "account-group": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M4 6.609V8l-2.539.726C.933 8.877.5 9.45.5 10v.5H6m1-3.922V8l2.538.726c.529.151.962.724.962 1.274v.5H5\"/><ellipse cx=\"5.5\" cy=\"3.771\" rx=\"3\" ry=\"3.271\"/><path d=\"M8.469 3.198c-.5.5-1.93.476-2.469-.528-1 1-2.625 1-3.434.429M17 6.609V8l-2.539.726c-.528.151-.961.724-.961 1.274v.5H19m1-3.906V8l2.538.726c.529.151.962.724.962 1.274v.5H18\"/><ellipse cx=\"18.5\" cy=\"3.771\" rx=\"3\" ry=\"3.271\"/><path d=\"M21.453 3.195c-.5.5-1.914.479-2.453-.525-1 1-2.625 1-3.434.429M10.5 19.609V21l-2.539.726C7.433 21.877 7 22.45 7 23v.5h5.5m1-3.891V21l2.538.726c.529.151.962.724.962 1.274v.5h-5.5\"/><ellipse cx=\"12\" cy=\"16.771\" rx=\"3\" ry=\"3.271\"/><path d=\"M14.953 16.17c-.5.5-1.914.503-2.453-.5-1 1-2.625 1-3.434.429\"/><path stroke-linecap=\"round\" d=\"M4 12.5L6.5 15M20 12.5L17.5 15\"/></g></svg>",
    "add": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M30.688 14.688H17.375V1.313C17.375.625 16.75 0 16.062 0c-.75 0-1.375.625-1.375 1.313v13.375H1.312c-.688 0-1.313.563-1.313 1.313s.625 1.313 1.313 1.313h13.375v13.375A1.32 1.32 0 0 0 16 32.002a1.32 1.32 0 0 0 1.313-1.313l.063-13.375h13.313c.75 0 1.313-.563 1.313-1.313s-.563-1.313-1.313-1.313z\"/></svg>",
    "ambulance": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M31.313 9.313H18.688v-.625c0-1.875-1.5-3.375-3.375-3.375C13.5 5.313 12 6.813 12 8.688v3.313H6.687c-.25 0-.5.125-.625.313l-3.25 5.938-2.625 2.625a.677.677 0 0 0-.188.438v7.375c0 .375.313.625.688.625h2.688a3.356 3.356 0 0 0 3.313 2.688c1.563 0 2.938-1.125 3.25-2.688h12.125c.313 1.563 1.688 2.688 3.25 2.688 1.625 0 3-1.125 3.313-2.688h2.688c.375 0 .688-.25.688-.625V10.002a.694.694 0 0 0-.688-.688zm-.625 16H13.313V10.688h17.375zM22.063 28H9.938c-.125-.5-.313-.938-.625-1.313h13.375c-.313.375-.5.813-.625 1.313zm-8.75-19.312c0-1.125.938-2 2-2 1.125 0 2 .875 2 2v.625h-4zm-9.5 10.437c.063 0 .063-.063.125-.125l3.125-5.688h4.938v12H1.313v-3.688zm-2.5 7.563h2.688c-.25.375-.5.813-.625 1.313H1.313zm5.375 4c-1.125 0-2-.938-2-2 0-1.125.875-2 2-2 1.063 0 2 .875 2 2 0 1.063-.938 2-2 2zm18.625 0c-1.063 0-2-.938-2-2 0-1.125.938-2 2-2 1.125 0 2 .875 2 2 0 1.063-.875 2-2 2zM28.625 28c-.125-.5-.375-.938-.625-1.313h2.688V28zM5.688 19.938c.125.063.188.063.313.063.25 0 .5-.125.625-.375l1.813-3.625h1.563c.375 0 .688-.313.688-.688s-.313-.625-.688-.625h-2c-.25 0-.5.125-.625.375l-2 4a.718.718 0 0 0 .313.875zm11.625-3.25v2.625c0 .375.313.688.688.688h2v2c0 .375.313.688.688.688h2.625a.694.694 0 0 0 .688-.688v-2h2a.694.694 0 0 0 .688-.688v-2.625a.694.694 0 0 0-.688-.688h-2v-2a.694.694 0 0 0-.688-.688h-2.625a.694.694 0 0 0-.688.688v2h-2a.694.694 0 0 0-.688.688zm1.375.625h2c.375 0 .625-.25.625-.625v-2h1.375v2c0 .375.25.625.625.625h2v1.375h-2c-.375 0-.625.25-.625.625v2h-1.375v-2c0-.375-.25-.625-.625-.625h-2z\"/></svg>",
    "arrow-down-small": "<svg viewBox=\"0 0 26 17\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M.469.18l11.5 13.143L23.469.18\" transform=\"translate(1 2)\" stroke-width=\"3\" stroke=\"#0B0B0A\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
    "arrow-down": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M47.658 10.104a.999.999 0 0 0-1.411.095L24 35.624 1.753 10.2a1 1 0 0 0-1.506 1.316l23 26.285a.999.999 0 0 0 1.506-.001l23-26.285a1 1 0 0 0-.095-1.411z\"/></svg>",
    "arrow-left-small": "<svg viewBox=\"0 0 17 27\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.54.426L.397 11.926l13.143 11.5\" transform=\"translate(2 2)\" stroke-width=\"3\" stroke=\"#0B0B0A\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
    "arrow-left": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M37.802 46.247L12.376 24 37.801 1.753A1 1 0 1 0 36.484.247l-26.286 23a1.004 1.004 0 0 0 .001 1.506l26.286 23a.997.997 0 0 0 1.411-.095 1 1 0 0 0-.094-1.411z\"/></svg>",
    "arrow-right-small": "<svg viewBox=\"0 0 18 27\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M.397 23.426l13.143-11.5L.397.426\" transform=\"translate(2 2)\" stroke-width=\"3\" stroke=\"#0B0B0A\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
    "arrow-right": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M37.802 23.247l-26.286-23a1 1 0 0 0-1.317 1.506L35.624 24 10.199 46.247a1 1 0 1 0 1.317 1.506l26.286-23a1.001 1.001 0 0 0 0-1.506z\"/></svg>",
    "arrow-up-small": "<svg viewBox=\"0 0 26 17\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.469 13.323L11.969.18.469 13.323\" transform=\"translate(1 2)\" stroke-width=\"3\" stroke=\"#0B0B0A\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
    "arrow-up": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M47.753 36.485l-23-26.285c-.381-.436-1.125-.436-1.506 0l-23 26.285a1 1 0 0 0 1.506 1.316L24 12.376l22.247 25.425a.996.996 0 0 0 1.411.095 1 1 0 0 0 .095-1.411z\"/></svg>",
    "arrow2-down": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.831 10.623a.497.497 0 0 0-.705.045L13.001 22.173V.498a.5.5 0 0 0-1 0v21.675L1.876 10.668a.499.499 0 1 0-.75.66l11 12.5.011.008.123.091.04.027.201.043.201-.043.04-.027.123-.091.011-.008 11-12.5a.498.498 0 0 0-.045-.705z\"/></svg>",
    "arrow2-right": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M47.863 23.477c.015-.027.038-.047.05-.075.054-.123.087-.258.087-.402s-.033-.279-.087-.402c-.012-.028-.036-.048-.05-.075a.964.964 0 0 0-.186-.251c-.007-.007-.01-.017-.017-.023l-25-22a1 1 0 0 0-1.32 1.502L44.35 22H1a1 1 0 1 0 0 2h43.35L21.34 44.249a1 1 0 0 0 1.32 1.502l25-22c.007-.007.01-.017.017-.023.077-.072.134-.159.186-.251z\"/></svg>",
    "book-open": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.5 3H21V1.5a.5.5 0 0 0-.5-.5h-6c-1.435 0-2.445.475-3 1.393C10.945 1.475 9.935 1 8.5 1h-6a.5.5 0 0 0-.5.5V3H.5a.5.5 0 0 0-.5.5v16a.5.5 0 0 0 .5.5h6c.902 0 3 .244 3 2.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5c0-2.256 2.098-2.5 3-2.5h6a.5.5 0 0 0 .5-.5v-16a.5.5 0 0 0-.5-.5zm-8-1H20v15h-5.5c-1.079 0-1.916.271-2.5.8V4.5c0-1.729.771-2.5 2.5-2.5zM3 2h5.5c1.729 0 2.5.771 2.5 2.5v13.303C10.408 17.276 9.567 17 8.5 17H3V2zm19 17h-5.5c-2.233 0-3.741 1.161-3.97 3h-2.06c-.228-1.839-1.736-3-3.97-3H1V4h1v13.5a.5.5 0 0 0 .5.5h6c1.74 0 2.516.771 2.516 2.5a.5.5 0 0 0 1 0c0-1.729.767-2.5 2.484-2.5h6a.5.5 0 0 0 .5-.5V4h1v15z\"/></svg>",
    "bookmark-article": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M11.5 1.5h12v22H.5v-22h3\"/><path d=\"M11.5 13.5l-4-4-4 4V.5h8zm3-6h6m-6 3h6m-6 3h6m-17 3h17m-17 3h13\"/></g></svg>",
    "box-hands": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.67 6.467c-.071-.026-.732-.244-1.457.264-1.113.781-1.688 2.819-1.712 6.061l-1.594 1.594.298-1.301c.253-1.059-.213-1.78-.787-2.025-.532-.226-1.294-.095-1.808.702-.69 1.073-1.554 3.967-1.59 4.09l-.02.141V20h-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5H20v-.823c.638-.631 3.146-3.115 3.854-3.824A.5.5 0 0 0 24 15V6.938a.501.501 0 0 0-.33-.471zM20 23h-5v-2h5v2zm3-8.208c-.991.989-3.852 3.821-3.852 3.821a.506.506 0 0 0-.148.356V20h-3v-3.934c.256-.851.956-2.994 1.452-3.764.174-.271.398-.397.573-.323.182.078.324.384.206.877l-.688 3a.5.5 0 0 0 .841.465l2.969-2.969A.492.492 0 0 0 21.5 13c0-3.903.789-5.078 1.26-5.43l.24-.132v7.354zM9.5 20H9v-4.007l-.021-.142c-.036-.123-.899-3.017-1.59-4.09-.515-.798-1.273-.928-1.808-.702-.574.245-1.04.967-.788 2.021l.299 1.305-1.594-1.594C3.476 9.55 2.9 7.512 1.787 6.731 1.064 6.223.401 6.441.33 6.467a.501.501 0 0 0-.33.471V15c0 .15.067.293.185.388.843.686 3.217 3.156 3.815 3.781V20h-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5zm-4.638-1.376c-.116-.123-2.72-2.859-3.862-3.856v-7.33a.895.895 0 0 1 .24.132C1.711 7.922 2.5 9.097 2.5 13a.5.5 0 0 0 .147.354l2.969 2.969a.499.499 0 0 0 .841-.465l-.688-3.004c-.117-.489.025-.795.207-.873.175-.072.399.052.573.323.496.77 1.196 2.913 1.452 3.764V20H5v-1.031a.497.497 0 0 0-.138-.345zM9 23H4v-2h5v2zm9-13.5v-6a.504.504 0 0 0-.066-.247l-.047-.049-.124-.13-.014-.004-.01-.009-5.5-3a.502.502 0 0 0-.479 0l-5.5 3-.003.003-.003.001-.084.084-.098.096-.036.12L6 3.49l.001.005L6 3.5v6a.5.5 0 0 0 .243.429l5 3a.5.5 0 0 0 .481.018l6-3A.5.5 0 0 0 18 9.5zm-6-8.431l4.42 2.411-4.899 2.45-4.015-2.41L12 1.069zM7 4.383l4 2.399v4.834l-4-2.4V4.383zm10 4.808l-5 2.5V6.809l5-2.5v4.882z\"/></svg>",
    "box": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M32 7.313c0-.063 0-.125-.063-.188v-.063c0-.063-.063-.125-.125-.188l-.125-.125h-.063L16.249.061a.685.685 0 0 0-.5 0L.374 6.749H.311l-.125.125c-.063.063-.125.125-.125.188v.063c-.063.063-.063.125-.063.188v17.375c0 .25.188.5.375.563l15.375 6.688c.063.063.188.063.25.063s.188 0 .25-.063l15.375-6.688c.188-.063.375-.313.375-.563V7.313zM16 1.375l13.688 5.938-6.188 2.688-12.375-6.5zm0 11.875L2.312 7.312l7.25-3.125 12.375 6.5zM1.313 8.375l14 6.063v15.875l-14-6.063zM30.688 24.25l-14 6.063V14.438l14-6.063zM12.25 16.063L4.937 12.75c-.188-.125-.438-.125-.625 0s-.313.375-.313.563v6.688c0 .25.125.5.375.625l7.375 3.313c.063.063.125.063.25.063s.25-.063.375-.125a.657.657 0 0 0 .313-.563v-6.625c0-.313-.188-.5-.438-.625zm-.937 6.25l-6-2.75v-5.188l6 2.75z\"/></svg>",
    "boxes": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7.314 8.964l5 2L12.5 11l.186-.036 5-2A.499.499 0 0 0 18 8.5V2l-.006-.024-.04-.166-.012-.039-.136-.163-.008-.01-.051-.021-.105-.056-5-1.5a.5.5 0 0 0-.287 0l-5 1.5-.105.056-.05.021-.008.01-.136.163-.011.039-.04.166L7 2v6.5c0 .205.124.388.314.464zM8 2.672l4 1.2v5.89l-4-1.6v-5.49zm9 5.49l-4 1.6v-5.89l4-1.2v5.49zm-4.5-7.14L15.76 2l-3.231.969-.029-.006-.029.006L9.24 2l3.26-.978zm10.498 11.469l-.052-.211-.031-.044-.107-.122-.022-.025-.046-.018-.063-.04-4-1.5a.507.507 0 0 0-.352 0l-4 1.5-.063.04-.046.018-.022.025-.107.122-.031.044-.052.211-.002.009V17a.5.5 0 0 0 .276.447l4 2c.07.035.147.053.224.053l.224-.053 4-2A.502.502 0 0 0 23 17v-4.5l-.002-.009zm-4.498-.957l2.576.966-2.571.964-.004-.001-.004.001-2.572-.964 2.575-.966zM15 13.222l3 1.125v3.844l-3-1.5v-3.469zm7 3.469l-3 1.5v-3.844l3-1.125v3.469zm-9.054-3.417l-.011-.014-.129-.15-.014-.016-.052-.021-.082-.047-6-2a.502.502 0 0 0-.316 0l-6 2-.082.047-.052.021-.014.016-.129.15-.011.014-.05.209L0 13.5v8a.5.5 0 0 0 .342.474l6 2L6.5 24l.158-.026 6-2A.5.5 0 0 0 13 21.5v-8l-.004-.017-.05-.209zM6.5 12.027l4.419 1.473-4.401 1.467-.018-.003-.018.003L2.081 13.5 6.5 12.027zM1 14.194l5 1.667v6.946L1 21.14v-6.946zm11 6.946l-5 1.667V15.86l5-1.667v6.947z\"/></svg>",
    "brackets": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M9.354 3.147a.5.5 0 0 0-.707 0l-8.5 8.5a.5.5 0 0 0 0 .707l8.5 8.5a.498.498 0 0 0 .707 0 .5.5 0 0 0 0-.707L1.207 12l8.147-8.146a.5.5 0 0 0 0-.707zm14.5 8.499l-8.5-8.5a.5.5 0 0 0-.707.707L22.793 12l-8.146 8.146a.5.5 0 0 0 .707.708l8.5-8.5a.502.502 0 0 0 0-.708z\"/></svg>",
    "calendar": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.5 2H20V.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V2H8V.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V2H.5a.5.5 0 0 0-.5.5v21a.5.5 0 0 0 .5.5h23a.5.5 0 0 0 .5-.5v-21a.5.5 0 0 0-.5-.5zM17 1h2v3h-2V1zM5 1h2v3H5V1zM4 3v1.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V3h8v1.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V3h3v4H1V3h3zM1 23V8h22v15H1zm20.5-11a.5.5 0 0 0 0-1H17V9.5a.5.5 0 0 0-1 0V11h-4V9.5a.5.5 0 0 0-1 0V11H7V9.5a.5.5 0 0 0-1 0V11H2.5a.5.5 0 0 0 0 1H6v3H2.5a.5.5 0 0 0 0 1H6v3H2.5a.5.5 0 0 0 0 1H6v1.5a.5.5 0 0 0 1 0V20h4v1.5a.5.5 0 0 0 1 0V20h4v1.5a.5.5 0 0 0 1 0V20h4.5a.5.5 0 0 0 0-1H17v-3h4.5a.5.5 0 0 0 0-1H17v-3h4.5zM7 12h4v3H7v-3zm0 7v-3h4v3H7zm9 0h-4v-3h4v3zm0-4h-4v-3h4v3z\"/></svg>",
    "cash": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M17.5 15a.496.496 0 0 0 .277-.084l6-4a.5.5 0 0 0-.554-.832L17.349 14H13v-1h4.5a.496.496 0 0 0 .277-.084l6-4a.5.5 0 0 0-.554-.832L17.349 12H13v-1h4.5a.496.496 0 0 0 .277-.084l6-4A.499.499 0 0 0 23.5 6h-4.834l.134-.1a.5.5 0 0 0-.3-.9h-7a.499.499 0 0 0-.3.1L10 6H6.5a.496.496 0 0 0-.277.084l-6 4A.499.499 0 0 0 .5 11H5v1H.5a.5.5 0 0 0 0 1H5v1H.5a.5.5 0 0 0 0 1H5v1H.5a.5.5 0 0 0 0 1H5v1H.5a.5.5 0 0 0 0 1H5v.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V19h4.5a.496.496 0 0 0 .277-.084l6-4a.5.5 0 0 0-.554-.832L17.349 18H13v-1h4.5a.496.496 0 0 0 .277-.084l6-4a.5.5 0 0 0-.554-.832L17.349 16H13v-1h4.5zm4.349-8l-4.5 3h-4.015l4-3h4.515zM2.151 10l4.5-3h2.016L5.2 9.6a.5.5 0 0 0-.2.4H2.151zM12 19H6v-8.75L11.667 6H17l-4.8 3.6a.5.5 0 0 0-.2.4v9zm-3-7.5c.552 0 1 .449 1 1a.5.5 0 0 0 1 0c0-.929-.64-1.705-1.5-1.929V10a.5.5 0 0 0-1 0v.571c-.86.224-1.5 1-1.5 1.929 0 1.103.898 2 2 2a1.001 1.001 0 1 1-1 1 .5.5 0 0 0-1 0c0 .929.64 1.705 1.5 1.929V18a.5.5 0 0 0 1 0v-.571c.86-.224 1.5-1 1.5-1.929 0-1.103-.898-2-2-2a1.001 1.001 0 0 1 0-2z\"/></svg>",
    "chat-double-bubble": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M5.814 13.786l-3.669 1.468 1.289-2.255a.501.501 0 0 0-.122-.639C1.843 11.184 1 9.48 1 7.685 1 4.137 4.589 1.25 9 1.25s8 2.887 8 6.435h1C18 3.585 13.962.25 9 .25S0 3.585 0 7.685c0 1.962.855 3.827 2.36 5.178l-1.794 3.14A.498.498 0 0 0 1 16.75l.186-.036 4.839-1.936a9.95 9.95 0 0 0 1.348.281l.135-.991a8.773 8.773 0 0 1-1.362-.296.504.504 0 0 0-.332.014zm16.309 6.591C23.353 19.267 24 17.848 24 16.25c0-3.523-3.435-6.5-7.5-6.5S9 12.727 9 16.25c0 3.582 3.279 6.608 7.16 6.609.978 0 1.936-.192 2.852-.57l3.812 1.43.176.031a.5.5 0 0 0 .448-.724l-1.325-2.649zm-2.947.905L19 21.25l-.203.043a6.447 6.447 0 0 1-2.636.566c-3.339 0-6.16-2.569-6.16-5.609 0-2.981 2.977-5.5 6.5-5.5s6.5 2.519 6.5 5.5c0 1.433-.61 2.647-1.812 3.61a.5.5 0 0 0-.135.614l.931 1.861-2.809-1.053z\"/></svg>",
    "check-circle": "<svg viewBox=\"-1 -1 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path class=\"animated-check-circle\" d=\"M19.6 2.715A11.928 11.928 0 0 0 12 0C5.39 0 0 5.39 0 12s5.39 12 12 12 12-5.39 12-12c0-2.283-.637-4.407-1.726-6.212l-11.23 11.256-5.548-5.548\" stroke=\"#000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\"/></svg>",
    "cheeseburger": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><circle cx=\"7.5\" cy=\"4.506\" r=\".5\"/><circle cx=\"9.5\" cy=\"3.506\" r=\".5\"/><circle cx=\"14.5\" cy=\"3.506\" r=\".5\"/><circle cx=\"12\" cy=\"4.506\" r=\".5\"/><circle cx=\"16.542\" cy=\"4.506\" r=\".5\"/><path d=\"M24 14.506c0-.759-.347-1.432-.883-1.891.564-.34.883-.887.883-1.609 0-1.163-1.332-1.695-2.02-1.893C21.776 3.895 17.561.006 12 .006S2.224 3.895 2.02 9.113c-.688.198-2.02.73-2.02 1.893 0 .722.319 1.269.883 1.609A2.484 2.484 0 0 0 0 14.506c0 .821.403 1.544 1.015 2a2.491 2.491 0 0 0-1.015 2c0 1.207.86 2.217 2 2.449v.551c0 1.378 1.121 2.5 2.5 2.5h15c1.379 0 2.5-1.122 2.5-2.5v-.551c1.14-.232 2-1.242 2-2.449 0-.821-.403-1.544-1.015-2a2.491 2.491 0 0 0 1.015-2zm-12-13.5c4.953 0 8.73 3.405 8.986 8H3.014c.256-4.595 4.033-8 8.986-8zm-11 10c0-.503 1.041-.888 1.557-1h18.885c.514.109 1.558.492 1.558 1 0 .247 0 1-1.5 1-.462 0-.927-.146-1.156-.363a.502.502 0 0 0-.781.121c-.313.566-.927 1.242-2.062 1.242-1.065 0-1.676-.359-2.042-1.2a.5.5 0 0 0-.916 0c-.387.885-1.566 1.2-2.542 1.2-.977 0-2.156-.315-2.542-1.2a.5.5 0 0 0-.916 0c-.367.841-.977 1.2-2.042 1.2-1.137 0-1.749-.675-2.062-1.242a.502.502 0 0 0-.781-.121c-.231.217-.696.363-1.158.363-1.5 0-1.5-.753-1.5-1zm20 10.5c0 .827-.673 1.5-1.5 1.5h-15c-.827 0-1.5-.673-1.5-1.5v-.5h18v.5zm2-3c0 .827-.673 1.5-1.5 1.5h-19c-.827 0-1.5-.673-1.5-1.5s.673-1.5 1.5-1.5h9.382l5.895 2.947a.5.5 0 0 0 .578-.093l2.854-2.854h.291c.827 0 1.5.673 1.5 1.5zm-8.882-1.5h5.675l-1.892 1.892-3.783-1.892zm7.382-1h-19c-.827 0-1.5-.673-1.5-1.5s.673-1.5 1.5-1.5c.495 0 .971-.109 1.357-.302.636.844 1.557 1.302 2.643 1.302 1.13 0 1.965-.352 2.529-1.071.747.776 1.95 1.071 2.971 1.071 1.019 0 2.223-.295 2.97-1.071.564.719 1.399 1.071 2.53 1.071 1.085 0 2.006-.458 2.643-1.302a3.07 3.07 0 0 0 1.357.302c.827 0 1.5.673 1.5 1.5s-.673 1.5-1.5 1.5z\"/></svg>",
    "clock": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15 12h-3V7a.5.5 0 0 0-1 0v5.5a.5.5 0 0 0 .5.5H15a.5.5 0 0 0 0-1zm4.5-12h-15A4.505 4.505 0 0 0 0 4.5v15C0 21.981 2.019 24 4.5 24h15c2.481 0 4.5-2.019 4.5-4.5v-15C24 2.019 21.981 0 19.5 0zM23 19.5c0 1.93-1.57 3.5-3.5 3.5h-15C2.57 23 1 21.43 1 19.5v-15C1 2.57 2.57 1 4.5 1h15C21.43 1 23 2.57 23 4.5v15zM12 3c-4.962 0-9 4.038-9 9s4.038 9 9 9 9-4.038 9-9-4.038-9-9-9zm0 17c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z\"/></svg>",
    "close": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12.707 12L23.854.854a.5.5 0 0 0-.707-.707L12 11.293.854.146a.5.5 0 0 0-.707.707L11.293 12 .146 23.146a.5.5 0 0 0 .708.708L12 12.707l11.146 11.146a.5.5 0 1 0 .708-.706L12.707 12z\"/></svg>",
    "cloud": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.628 8.006A7.535 7.535 0 0 0 12 4a7.502 7.502 0 0 0-7.427 6.511C2.12 10.32 0 12.296 0 14.75c0 2.177 1.19 3.219 2.188 3.709A5.59 5.59 0 0 0 4.489 19l14.575-.004c.05-.007 4.936-.698 4.936-5.496a5.498 5.498 0 0 0-5.372-5.494zM19 18H4.494l-.005.5V18C4.132 18 1 17.909 1 14.75a3.252 3.252 0 0 1 3.92-3.182.498.498 0 0 0 .6-.46A6.499 6.499 0 0 1 12 5a6.526 6.526 0 0 1 5.868 3.723c.086.18.273.299.471.285l.173-.003A4.497 4.497 0 0 1 23 13.5c0 3.912-3.899 4.482-4 4.5z\"/></svg>",
    "compass": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M22.375 8.75L5.687 17.438c-.25.125-.438.438-.313.75.063.25.313.5.625.5h7.313v7.313c0 .313.25.563.5.625.063.063.125.063.188.063.25 0 .5-.125.563-.375l8.688-16.688c.125-.25.125-.563-.125-.75-.188-.25-.5-.25-.75-.125zm-7.687 14.5V18a.694.694 0 0 0-.688-.688H8.75l12.375-6.438zM16 0C7.187 0 0 7.188 0 16s7.188 16 16 16c8.813 0 16-7.188 16-16S24.812 0 16 0zm0 30.688C7.937 30.688 1.312 24.063 1.312 16S7.937 1.312 16 1.312 30.688 7.937 30.688 16 24.063 30.688 16 30.688z\"/></svg>",
    "computer": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22 1H2C.897 1 0 1.898 0 3v15c0 1.103.897 2 2 2h6.806l-.666 2H5a.5.5 0 0 0 0 1h14a.5.5 0 0 0 0-1h-3.14l-.667-2H22c1.103 0 2-.897 2-2V3c0-1.102-.897-2-2-2zm-7.194 21H9.194l.667-2h4.279l.666 2zM23 18c0 .552-.449 1-1 1H2c-.551 0-1-.448-1-1V3c0-.552.449-1 1-1h20c.551 0 1 .448 1 1v15zM21.5 3h-19a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h19a.5.5 0 0 0 .5-.5v-12a.5.5 0 0 0-.5-.5zM21 15H3V4h18v11z\"/><circle cx=\"12\" cy=\"17.5\" r=\"1\"/></svg>",
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M28.688 0H3.313c-.375 0-.625.313-.625.688v30.625c0 .375.25.688.625.688h25.375c.375 0 .625-.313.625-.688V.688c0-.375-.25-.688-.625-.688zM28 30.688H4V1.313h3.313v1.375h-.625v2.625h2.625V2.688h-.625V1.313h4v1.375H12v2.625h2.688V2.688H14V1.313h4v1.375h-.688v2.625H20V2.688h-.688V1.313h4v1.375h-.625v2.625h2.625V2.688h-.625V1.313H28zM23.313 9.313H8.688c-.375 0-.688.313-.688.688s.313.688.688.688h14.625c.375 0 .688-.313.688-.688s-.313-.688-.688-.688zm0 4H8.688c-.375 0-.688.313-.688.688s.313.688.688.688h14.625c.375 0 .688-.313.688-.688s-.313-.688-.688-.688zm0 4H8.688c-.375 0-.688.313-.688.688s.313.688.688.688h14.625c.375 0 .688-.313.688-.688s-.313-.688-.688-.688zm0 4H8.688c-.375 0-.688.313-.688.688s.313.688.688.688h14.625c.375 0 .688-.313.688-.688s-.313-.688-.688-.688zm0 4H8.688c-.375 0-.688.313-.688.688s.313.688.688.688h14.625c.375 0 .688-.313.688-.688s-.313-.688-.688-.688z\"/></svg>",
    "cycle": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.858 13.539L20.44 9.744a.498.498 0 0 0-.796.071l-2.686 4.344a.499.499 0 1 0 .85.526l1.977-3.197c.558 4.674-2.347 9.14-6.932 10.299a.5.5 0 1 0 .123.985l.123-.015c4.988-1.262 8.178-6.049 7.704-11.115l2.312 2.566a.5.5 0 1 0 .743-.669zm-6.199-6.91a.499.499 0 0 0 .705.059.5.5 0 0 0 .059-.705c-1.792-2.118-4.325-3.392-7.133-3.586a10.598 10.598 0 0 0-6.22 1.506L6.344.739a.5.5 0 0 0-.927-.373L3.509 5.102a.501.501 0 0 0 .414.685l5.081.506.051.002a.5.5 0 0 0 .049-.998l-3.777-.376a9.618 9.618 0 0 1 5.894-1.525c2.536.175 4.822 1.324 6.438 3.233zM5.602 17.409a.5.5 0 0 0-.908.417l1.578 3.445a9.493 9.493 0 0 1-4.313-4.331 9.207 9.207 0 0 1-.429-7.176.5.5 0 0 0-.944-.333 10.199 10.199 0 0 0 .474 7.95 10.486 10.486 0 0 0 4.47 4.629l-3.38.495a.5.5 0 0 0 .071.995l.073-.005 5.053-.74a.5.5 0 0 0 .382-.703l-2.127-4.643z\"/></svg>",
    "diamond": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.999 7.504L24 7.501V7.5a.486.486 0 0 0-.083-.26l-.01-.03-5-7.001-.037-.032-.11-.095-.071-.037-.052-.027-.088-.007L18.5 0h-13l-.05.012-.088.007-.052.027-.07.037-.11.095-.037.031-5 7.001-.01.03A.486.486 0 0 0 0 7.5v.001l.001.004c.001.095.035.18.082.255l.01.032 11.5 16 .077.066.06.051c.081.054.171.091.27.091s.189-.038.27-.091l.06-.051.076-.066 11.5-16 .01-.032a.481.481 0 0 0 .083-.256zM5.305 1.635L6.837 7H1.472l3.833-5.365zM15.84 8L12 21.654 8.16 8h7.68zM8.416 7L12 1.425 15.584 7H8.416zm4.5-6h4.921l-1.514 5.3L12.916 1zM7.677 6.3L6.162 1h4.921L7.677 6.3zM7.121 8l3.63 12.905L1.475 8h5.646zm9.758 0h5.646l-9.276 12.905L16.879 8zm.284-1l1.533-5.365L22.528 7h-5.365z\"/></svg>",
    "download-circle": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.5 0C5.159 0 0 5.159 0 11.5S5.159 23 11.5 23 23 17.841 23 11.5 17.841 0 11.5 0zm0 22C5.71 22 1 17.29 1 11.5S5.71 1 11.5 1 22 5.71 22 11.5 17.29 22 11.5 22zm5.146-9.854L12 16.793V5a.5.5 0 0 0-1 0v11.793l-4.647-4.646a.5.5 0 0 0-.707.707l5.499 5.5.163.108.192.038.191-.039.163-.108 5.499-5.5a.5.5 0 0 0-.707-.707z\"/></svg>",
    "eco-globe": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M.5 14.5h4v8h-4z\"/><path stroke-linecap=\"round\" d=\"M4.5 21c10.729 3.577 6.771 3.613 19-2.5-1.063-1.062-1.903-1.313-3-1l-4.434 1.471M4.5 15.5h3c2.353 0 4 1.5 4.5 2h3c1.593 0 1.593 2 0 2H9.5m-2.649-7.279a8.001 8.001 0 1 1 11.241 3.281m1.821-12.265s-.348 1.911-1.739 2.606c-1.391-.348-2.782.694-2.435.694.348 0 .695 1.392.695 1.392.349.348 1.044 0 1.044 0 .869.869-1.392 2.436-1.392 2.783s.87.521.347 1.044c-.521.521-1.042.694-1.042.694 0 1.739-1.74 1.739-2.087 1.739-.348 0-1.044-1.392-1.044-1.739s.349-.694.349-1.043c0-.348-.696-1.043-.696-1.043 0-1.392-1.043-1.044-2.087-1.044-1.043 0-1.043-1.392-1.043-1.392s0-2.434 1.739-2.781c1.738-.35 1.738.348 1.738.348.697.694 2.087 0 2.783 0 0 0 .348-2.436-.348-2.088-.695.35-1.319.079-1.39-.694C13.203 1.625 16.34.974 16.34.974\"/></g></svg>",
    "eco-lightbulb": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M7.547 9.619c-.465 1.946.158 3.638 3.425 2.877 2.568 2.157 3.842 1.135 4.355-1.014.515-2.148-1.034-6.417-3.232-7.972C10.91 6.313 8.13 7.188 7.547 9.619zM9 20.5h5m-5 2h5m-2.5 0v1m0-5s-1.555-7.863.526-11.168\"/><path d=\"M20.5 9c0-4.693-4.03-8.5-9-8.5-4.971 0-9 3.807-9 8.5 0 3.874 2.747 7.137 6.5 8.161V18.5h5v-1.339c3.753-1.024 6.5-4.287 6.5-8.161z\"/></g></svg>",
    "email-love-letter": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.991 11.464l-.036-.146-.028-.068-.011-.027-.115-.114-.018-.021-.008-.005h-.001L20 8.487V.5a.5.5 0 0 0-.5-.5h-15a.5.5 0 0 0-.5.5v7.987L.226 11.082l-.003.002-.006.004-.015.016-.118.118-.011.027-.028.068-.036.146L0 11.5V22c0 1.103.897 2 2 2h20c1.103 0 2-.897 2-2V11.5l-.009-.036zm-1.383.03L20 13.232V9.701l2.608 1.793zM4 13.232l-2.608-1.739L4 9.701v3.531zM22 23H2c-.551 0-1-.449-1-1v-9.566l5.223 3.482a.5.5 0 0 0 .554-.832L5 13.899V1h14v12.899l-1.777 1.185a.5.5 0 1 0 .554.832L23 12.434V22c0 .551-.449 1-1 1zm-6.188-6.891A.502.502 0 0 0 15.5 16h-7a.502.502 0 0 0-.312.109l-5 4a.501.501 0 0 0 .625.781L8.675 17h6.649l4.863 3.891a.505.505 0 0 0 .704-.079.501.501 0 0 0-.078-.703l-5.001-4zm-4.106-3.33a.497.497 0 0 0 .588 0C12.776 12.429 17 9.282 17 6.678c0-1.868-1.387-2.984-2.728-2.984-.772 0-1.674.379-2.272 1.368-.598-.988-1.5-1.368-2.272-1.368C8.387 3.693 7 4.81 7 6.678c0 2.604 4.224 5.751 4.706 6.101zM9.728 4.693c.844 0 1.511.681 1.786 1.822.108.45.864.45.973 0 .274-1.141.942-1.822 1.786-1.822.85 0 1.728.742 1.728 1.984 0 1.646-2.658 4.037-4 5.072-1.342-1.035-4-3.426-4-5.072C8 5.436 8.878 4.693 9.728 4.693z\"/></svg>",
    "email-send": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.758 7.621C23.491 7.226 23.027 7 22.484 7h-12c-1.03 0-2.157.797-2.565 1.814l-2.8 7c-.229.572-.196 1.142.09 1.565.268.395.732.621 1.275.621h12c1.03 0 2.157-.797 2.564-1.815l2.8-6.999c.229-.572.196-1.143-.09-1.565zm-.839 1.193l-2.8 7c-.252.632-1.016 1.186-1.635 1.186h-12c-.148 0-.345-.031-.447-.181-.097-.143-.093-.374.011-.633l2.8-6.999C9.106 8.543 9.854 8 10.484 8h12c.147 0 .344.031.446.181.097.143.093.374-.011.633zm-1.981.25l-6.765 3.811-3.632-3.725a.5.5 0 1 0-.715.699l3.9 4a.501.501 0 0 0 .604.087l7.1-4a.5.5 0 1 0-.492-.872zm-10.145 4.029l-3.5 2.5a.499.499 0 0 0 .291.907c.101 0 .202-.03.29-.093l3.5-2.5a.5.5 0 1 0-.581-.814zm6.72.15a.5.5 0 1 0-.857.515l1.5 2.5a.5.5 0 1 0 .857-.514l-1.5-2.501zM.5 8h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0 0 1zm2 8h-2a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1zm1-5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1z\"/></svg>",
    "email": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21 4H3c-1.103 0-2 .897-2 2v11c0 1.103.897 2 2 2h18c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2zm0 1l.159.032L12 12.36 2.841 5.032 3 5h18zm1 12c0 .551-.449 1-1 1H3c-.551 0-1-.449-1-1V6c0-.11.03-.21.063-.309l9.625 7.7a.504.504 0 0 0 .624 0l9.625-7.7A.966.966 0 0 1 22 6v11z\"/></svg>",
    "external": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M24 24H8V8.062l4-.063v-4H4v24h24v-10h-4zM16 4l4 4-6 6 4 4 6-6 4 4V4z\"/></svg>",
    "facebook": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M19 6h5V0h-5c-3.86 0-7 3.14-7 7v3H8v6h4v16h6V16h5l1-6h-6V7c0-.542.458-1 1-1z\"/></svg>",
    "file-text-document": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.961 6.308l-.108-.162L15.854.147l-.162-.108L15.5 0h-13a.5.5 0 0 0-.5.5v23a.5.5 0 0 0 .5.5h19a.5.5 0 0 0 .5-.5v-17l-.039-.192zM16 1.707L20.293 6H16V1.707zM3 23V1h12v5.5a.5.5 0 0 0 .5.5H21v16H3zM7.5 8H12a.5.5 0 0 0 0-1H7.5a.5.5 0 0 0 0 1zm9 2h-9a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1zm-6 3h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm6-6h-4a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 1 0V14h1v5h-1a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-1v-5h1v.5a.5.5 0 0 0 1 0v-1a.5.5 0 0 0-.5-.5z\"/></svg>",
    "folder": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M31.313 8H28V6a.694.694 0 0 0-.688-.688H10.687v-2c0-.375-.313-.625-.688-.625H.686c-.375 0-.688.25-.688.625v22c0 2.25 1.813 4 4 4h23.313c2.625 0 4.688-2.063 4.688-4.625v-16a.694.694 0 0 0-.688-.688zm-24.625.688v16.625c0 1.5-1.188 2.688-2.688 2.688s-2.688-1.188-2.688-2.688V4h8v2c0 .375.313.688.688.688h16.688v1.313H7.313c-.375 0-.625.313-.625.688zm24 16c0 1.813-1.5 3.313-3.375 3.313H7c.625-.688 1-1.625 1-2.688v-16h22.688z\"/></svg>",
    "ghost-logo": "<svg viewBox=\"0 0 493 161\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M328.52 37.36c-27.017 0-40.97 19.323-40.97 43.16 0 23.837 13.61 43.162 40.97 43.162s40.968-19.325 40.968-43.163c0-23.84-13.954-43.16-40.97-43.16zm20.438 43.237c-.02 15.328-5.126 27.743-20.44 27.743-15.312 0-20.42-12.414-20.435-27.743v-.078c.016-15.33 5.124-27.74 20.437-27.74 15.312 0 20.42 12.41 20.438 27.74v.07zM207.553 5.19c0-1.103.885-2.124 1.984-2.282 0 0 13.577-1.95 14.784-2.115 1.37-.187 3.19.798 3.19 2.744v44.236c3.23-3.105 6.79-5.608 10.66-7.515 3.88-1.906 8.43-2.86 13.66-2.86 4.53 0 8.53.776 12.03 2.33 3.5 1.55 6.43 3.73 8.77 6.533 2.34 2.81 4.12 6.16 5.33 10.05 1.21 3.9 1.82 8.19 1.82 12.87v51.35a2 2 0 0 1-2 2h-15.95c-1.1 0-2-.9-2-1.99V69.18c0-5.118-1.17-9.08-3.51-11.888-2.35-2.804-5.86-4.207-10.544-4.207-3.45 0-6.677.79-9.69 2.37-3.02 1.58-5.87 3.73-8.564 6.46v58.617c0 1.102-.894 2-2.002 2h-15.94a2 2 0 0 1-2.005-2V5.188zm244.007 95.327v-43.68h-13.482c-1.1 0-1.742-.87-1.443-1.916l3-10.49c.262-.9.942-1.87 2.308-2.07l9.597-1.35 3.508-23.49c.163-1.09 1.18-2.1 2.274-2.26 0 0 9.192-1.31 10.963-1.58 1.673-.25 3.19.97 3.19 2.81v24.52h17.565c1.106 0 2.002.9 2.002 2.01v11.82c0 1.11-.89 2.01-2.002 2.01h-17.566v43.08c0 6.02 3.623 8.32 7.095 8.32 2.12 0 5.02-1.14 7.19-2.16 1.34-.62 3.41-.16 3.95 1.73l2.45 8.65c.3 1.07-.25 2.37-1.23 2.86 0 0-7.29 4.37-17.06 4.37-13.73 0-22.33-8.08-22.33-23.16zm-44.584-47.74c-7.084 0-12.657 2.476-12.657 8.433 0 7.44 12.01 9.606 20.23 12.64 5.49 2.027 20.24 5.98 20.24 22.016 0 19.48-16 27.807-33.06 27.807-17.06 0-25.4-5.465-25.4-5.465-.96-.527-1.5-1.822-1.2-2.89 0 0 2.1-7.52 2.64-9.386.48-1.68 2.41-2.27 3.64-1.792 4.39 1.712 12.32 4.092 21.28 4.092 9.07 0 13.46-2.803 13.46-8.777 0-7.95-12.26-10.38-20.36-12.967-5.59-1.78-20.36-5.93-20.36-23.566 0-17.373 15.08-25.524 31.2-25.524 13.64 0 23.5 4.69 23.5 4.69 1.01.427 1.58 1.635 1.28 2.698l-2.658 9.357c-.488 1.74-1.898 2.537-3.666 1.957-3.89-1.277-11.2-3.322-18.15-3.322zm-210.313-15.28c-6.695.775-11.472 3.962-14.562 6.93-6.06-4.81-14.49-7.106-23.94-7.106-18.95 0-33.76 9.26-33.76 29.43 0 11.58 4.88 19.56 12.62 24.26-5.75 2.75-9.57 8.59-9.57 14.34 0 9.61 7.5 12.61 7.5 12.61s-13.11 6.44-13.11 19.32c0 16.49 15.01 23.16 33.34 23.16 26.43 0 44.61-11.04 44.61-31.31 0-12.47-9.44-19.36-30.01-20.18-12.2-.48-20.11-.93-22.07-1.58-2.59-.87-3.86-2.96-3.86-5.28 0-2.55 2.08-4.98 5.35-6.65 2.86.516 5.87.768 8.99.768 18.97 0 33.76-9.223 33.76-29.425 0-4.897-.87-9.15-2.46-12.78 2.79-1.506 8.34-2.25 8.34-2.25 1.09-.17 1.975-1.21 1.974-2.31V40.3c0-1.88-1.59-2.955-3.1-2.78zm-49.13 85.132s9.954.38 19.9.84c11.172.52 14.654 2.96 14.654 8.81 0 7.15-9.71 14.1-23.28 14.1-12.88 0-19.314-4.54-19.314-12.08 0-4.33 2.26-9.18 8.04-11.69zm10.66-40.54c-8.978 0-15.983-4.83-15.983-15.35 0-10.53 7.01-15.35 15.983-15.35 8.974 0 15.984 4.81 15.984 15.34 0 10.53-7.002 15.34-15.984 15.34z\" fill=\"#2D3134\"/><g opacity=\".6\" transform=\"translate(0 36)\" fill=\"#2E3134\"><rect x=\".209\" y=\"69.017\" width=\"33.643\" height=\"17.014\" rx=\"4\"/><rect x=\"50.672\" y=\"69.017\" width=\"33.622\" height=\"17.014\" rx=\"4\"/><rect x=\".184\" y=\"34.99\" width=\"84.121\" height=\"17.014\" rx=\"4\"/><rect x=\".209\" y=\".964\" width=\"50.469\" height=\"17.013\" rx=\"4\"/><rect x=\"67.494\" y=\".964\" width=\"16.821\" height=\"17.013\" rx=\"4\"/></g></g></svg>",
    "github-outline": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.999 0C5.383 0 0 5.383 0 12c0 5.177 3.298 9.754 8.276 11.406l.286.026c.623 0 1.059-.435 1.059-1.06l.001-.286c.001-.376.004-.988-.001-1.714a.5.5 0 0 0-.607-.486 5.037 5.037 0 0 1-1.061.123c-1.777 0-2.199-1.245-2.228-1.332a4.855 4.855 0 0 0-.626-1.143c.188.197.288.372.293.38.727 1.244 1.74 1.505 2.463 1.505a3.79 3.79 0 0 0 1.519-.345.5.5 0 0 0 .29-.386c.076-.536.281-.984.564-1.228.15-.13.209-.336.15-.525s-.224-.327-.421-.35c-2.371-.271-4.795-1.1-4.795-5.189 0-1.06.355-1.984 1.053-2.749a.5.5 0 0 0 .094-.526c-.104-.253-.39-1.136.009-2.374.362.026 1.179.205 2.522 1.116a.497.497 0 0 0 .414.067 10.634 10.634 0 0 1 2.743-.369c.96.005 1.885.129 2.749.369.14.04.293.015.414-.067 1.342-.91 2.156-1.089 2.52-1.116.41 1.276.085 2.194.011 2.376a.501.501 0 0 0 .094.527c.698.762 1.052 1.686 1.052 2.748 0 4.094-2.43 4.914-4.806 5.177a.502.502 0 0 0-.273.875c.185.16.614.65.614 1.742v3.184c0 .623.435 1.058 1.058 1.058.092 0 .193-.009.37-.047A11.987 11.987 0 0 0 24 12c0-6.617-5.384-12-12.001-12zm3.55 22.421l-.118.013-.058-.058v-3.184c0-.767-.168-1.334-.38-1.745 2.285-.41 4.844-1.643 4.844-6.049 0-1.216-.375-2.289-1.116-3.195.165-.569.345-1.703-.216-3.118a.502.502 0 0 0-.312-.292 1.384 1.384 0 0 0-.407-.05c-.56 0-1.526.206-2.993 1.165a11.527 11.527 0 0 0-2.794-.347c-.969.005-1.905.122-2.789.347-1.467-.959-2.434-1.165-2.994-1.165a1.39 1.39 0 0 0-.409.05.5.5 0 0 0-.313.293c-.559 1.414-.38 2.548-.214 3.117-.741.908-1.117 1.981-1.117 3.195 0 4.406 2.56 5.643 4.842 6.06-.121.24-.215.51-.278.801a2.64 2.64 0 0 1-.871.162c-.68 0-1.203-.33-1.594-.998-.03-.055-.756-1.344-2.205-1.442-.532 0-.883.187-.988.529-.166.535.415.933.695 1.119.024.012.6.319 1.017 1.376.024.082.631 2.006 3.172 2.006.216 0 .439-.014.67-.043l-.001 1.115-.06.35-.039.007A10.987 10.987 0 0 1 1 12C1 5.935 5.935 1 11.999 1 18.065 1 23 5.935 23 12c0 4.743-3.021 8.938-7.451 10.421z\"/></svg>",
    "github-star": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path fill=\"#010101\" d=\"M42.022 19.07l-11.799-1.704-5.27-10.614-5.269 10.614L7.885 19.07l8.538 8.273-2.013 11.673 10.543-5.511 10.544 5.511-2.013-11.673z\"/></svg>",
    "github": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M16 .395c-8.836 0-16 7.163-16 16 0 7.069 4.585 13.067 10.942 15.182.8.148 1.094-.347 1.094-.77 0-.381-.015-1.642-.022-2.979-4.452.968-5.391-1.888-5.391-1.888-.728-1.849-1.776-2.341-1.776-2.341-1.452-.993.11-.973.11-.973 1.606.113 2.452 1.649 2.452 1.649 1.427 2.446 3.743 1.739 4.656 1.33.143-1.034.558-1.74 1.016-2.14-3.554-.404-7.29-1.777-7.29-7.907 0-1.747.625-3.174 1.649-4.295-.166-.403-.714-2.03.155-4.234 0 0 1.344-.43 4.401 1.64a15.353 15.353 0 0 1 4.005-.539c1.359.006 2.729.184 4.008.539 3.054-2.07 4.395-1.64 4.395-1.64.871 2.204.323 3.831.157 4.234 1.026 1.12 1.647 2.548 1.647 4.295 0 6.145-3.743 7.498-7.306 7.895.574.497 1.085 1.47 1.085 2.963 0 2.141-.019 3.864-.019 4.391 0 .426.288.925 1.099.768C27.421 29.457 32 23.462 32 16.395c0-8.837-7.164-16-16-16z\"/></svg>",
    "globe": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M20.929 4.011a.504.504 0 0 0-.159-.175A12.003 12.003 0 0 0 15.485.52l-.038-.01A11.977 11.977 0 0 0 12 0C5.383 0 0 5.383 0 12s5.383 12 12 12 12-5.383 12-12c0-3.07-1.169-5.865-3.071-7.989zm-.981.405c-.16.619-.699 2.294-2.02 3.056-1.772-.346-3.476.622-3.844 1.071-.237.289-.155.546-.109.643.066.14.239.257.405.298.167.188.46.938.636 1.638a.503.503 0 0 0 .131.232c.485.485 1.177.399 1.629.266.064.535-.695 1.383-1.441 2.158-.556.578-.835.867-.835 1.222 0 .415.304.679.526.873.075.064.205.172.217.151l-.097.123c-.648.648-1.3.878-1.305.879a.5.5 0 0 0-.341.474c0 1.308-.817 1.98-2.429 2-.337-.25-1.051-1.632-1.071-2 0-.132.1-.333.197-.526.142-.284.303-.606.303-.974 0-.562-.621-1.304-1.005-1.708-.031-.618-.208-1.071-.537-1.382-.564-.532-1.407-.484-2.222-.438-.24.013-.488.028-.736.028-.979 0-.999-1.44-1-1.5 0-.031.024-3.095 2.098-3.51C8.545 7.201 8.97 7.471 9 7.5a.5.5 0 0 0 .146.353c.894.894 2.25.579 3.339.325.396-.091.769-.178 1.015-.178a.5.5 0 0 0 .495-.429c.189-1.327.279-3.007-.372-3.477-.242-.174-.55-.189-.847-.042-.362.182-.701.212-.926.087-.252-.14-.331-.45-.353-.686-.06-.643 1.948-1.519 3.837-1.934a11.03 11.03 0 0 1 4.614 2.897zM12 23C5.935 23 1 18.066 1 12 1 5.935 5.935 1 12 1c.425 0 .842.03 1.254.077-1.367.493-2.861 1.301-2.752 2.469.062.671.369 1.192.863 1.467.476.265 1.085.266 1.698.008.087.356.085 1.172-.008 2.018-.249.038-.518.101-.795.165-.84.196-1.783.414-2.309.026a1.097 1.097 0 0 0-.347-.484c-.511-.42-1.394-.498-2.702-.236C4.033 7.083 4 10.84 4 11c0 .865.418 2.5 2 2.5.267 0 .534-.015.793-.03.631-.036 1.227-.07 1.477.167.153.143.23.434.23.863 0 .132.053.26.146.354.424.424.831.975.854 1.146 0 .132-.1.333-.197.526-.142.284-.303.606-.303.974 0 .507 1.025 3 2 3 2.09 0 3.343-.966 3.486-2.665a5.124 5.124 0 0 0 1.367-.981c.266-.266.396-.546.386-.833-.015-.432-.328-.704-.557-.903l-.128-.105c.117-.144.332-.368.501-.542.939-.977 2.512-2.612 1.299-3.825a.5.5 0 0 0-.577-.094c-.209.105-.626.219-.838.145-.246-.928-.503-1.464-.733-1.774.547-.312 1.617-.703 2.674-.438a.504.504 0 0 0 .345-.038c1.418-.709 2.147-2.157 2.494-3.13A10.939 10.939 0 0 1 23 12c0 6.066-4.935 11-11 11z\"/></svg>",
    "grab": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M9.125 27.438h4.563v4.563H9.125zm9.188 0h4.563v4.563h-4.563zm-9.188-9.125h4.563v4.563H9.125zm9.188 0h4.563v4.563h-4.563zM9.125 9.125h4.563v4.563H9.125zm9.188 0h4.563v4.563h-4.563zM9.125 0h4.563v4.563H9.125zm9.188 0h4.563v4.563h-4.563z\"/></svg>",
    "graph-line": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M.5.5h23v15H.5z\"/><path stroke-linecap=\"round\" d=\"M11.5 15.5v3m-5 5l5-5 5 5m-14-15h4l2-2.5 2 4.5 2.5-3 2 2 3.5-5\"/><path d=\"M2.5 2.5h19v11h-19z\"/></g></svg>",
    "heart-beat": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.5 14H16a.5.5 0 0 0-.447.276l-.925 1.85-1.647-5.765a.501.501 0 0 0-.928-.087l-2.114 4.229-1.523-2.282a.502.502 0 0 0-.816-.023L6.25 14H.5a.5.5 0 0 0 0 1h6a.5.5 0 0 0 .4-.2l1.075-1.435 1.608 2.411a.517.517 0 0 0 .447.222.5.5 0 0 0 .416-.275l1.925-3.85 1.647 5.765a.501.501 0 0 0 .435.361L14.5 18a.499.499 0 0 0 .447-.276L16.309 15H23.5a.5.5 0 0 0 0-1zM2.411 12.999l.19-.037a.5.5 0 0 0 .273-.652C2.294 10.891 2 9.496 2 8.165c0-3.974 2.212-5.922 4.404-6.089 2.138-.168 4.537 1.313 5.102 4.982a.5.5 0 0 0 .988-.001c.573-3.719 3.048-5.208 5.241-5.045C19.858 2.174 22 3.957 22 7.574c0 1.448-.402 3.033-1.197 4.712a.5.5 0 1 0 .904.428C22.565 10.9 23 9.17 23 7.574c0-4.234-2.69-6.368-5.188-6.559C15.653.854 13.144 2.065 12 5.018 10.874 2.112 8.416.913 6.328 1.079 3.676 1.281 1 3.551 1 8.165c0 1.462.319 2.983.948 4.523a.5.5 0 0 0 .463.311zm15.967 3.198c-2.469 3.257-5.475 5.816-6.399 6.572-1.002-.71-4.321-3.192-6.848-6.569a.5.5 0 1 0-.801.599c3.102 4.147 7.22 6.896 7.394 7.011a.498.498 0 0 0 .582-.021c.156-.121 3.845-2.996 6.869-6.987a.498.498 0 0 0-.097-.7.498.498 0 0 0-.7.095z\"/></svg>",
    "heart-circle": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 0C5.383 0 0 5.383 0 12s5.383 12 12 12 12-5.383 12-12S18.617 0 12 0zm0 23C5.935 23 1 18.065 1 12S5.935 1 12 1s11 4.935 11 11-4.935 11-11 11zm2.777-15.5c-.951 0-2.071.492-2.777 1.785C11.294 7.992 10.174 7.5 9.223 7.5 7.639 7.5 6 8.823 6 11.037c0 3.181 5.473 7.198 5.706 7.367a.497.497 0 0 0 .588 0c.233-.169 5.706-4.186 5.706-7.367C18 8.823 16.361 7.5 14.777 7.5zM12 17.376c-1.63-1.246-5-4.252-5-6.339C7 9.449 8.13 8.5 9.223 8.5c1.087 0 1.943.865 2.291 2.313.109.45.863.45.973 0 .347-1.448 1.203-2.313 2.29-2.313C15.87 8.5 17 9.449 17 11.037c0 2.084-3.37 5.092-5 6.339z\"/></svg>",
    "hotspot": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M27.313 2.688c-.25-.25-.688-.25-.938 0s-.25.688 0 .938c2.75 2.75 4.313 6.438 4.313 10.375s-1.563 7.625-4.313 10.375a.68.68 0 0 0 0 .938.677.677 0 0 0 .438.188.71.71 0 0 0 .5-.188 15.99 15.99 0 0 0 0-22.626zm-3.75 3.75a.68.68 0 0 0-.938 0c-.313.313-.313.688 0 .938 1.75 1.813 2.688 4.125 2.688 6.625s-.938 4.813-2.688 6.625a.586.586 0 0 0 0 .938c.125.125.25.188.438.188s.375-.063.5-.188c2-2.063 3.125-4.688 3.125-7.563s-1.125-5.5-3.125-7.563zM1.313 14c0-3.938 1.563-7.625 4.313-10.375.25-.25.25-.688 0-.938s-.688-.25-.938 0a15.99 15.99 0 0 0 0 22.626.71.71 0 0 0 .5.188.677.677 0 0 0 .438-.188.68.68 0 0 0 0-.938C2.876 21.625 1.313 17.937 1.313 14zm5.375 0c0-2.5.938-4.813 2.688-6.625a.586.586 0 0 0 0-.938.68.68 0 0 0-.938 0C6.438 8.5 5.313 11.125 5.313 14s1.125 5.5 3.125 7.563c.125.125.313.188.5.188s.313-.063.438-.188a.586.586 0 0 0 0-.938C7.626 18.812 6.688 16.5 6.688 14zM16 9.313c-2.563 0-4.688 2.125-4.688 4.688a4.656 4.656 0 0 0 4 4.625v10.688c0 .375.313.688.688.688s.688-.313.688-.688V18.626c2.25-.313 4-2.25 4-4.625 0-2.563-2.125-4.688-4.688-4.688zm0 8c-1.813 0-3.313-1.5-3.313-3.313s1.5-3.313 3.313-3.313c1.813 0 3.313 1.5 3.313 3.313s-1.5 3.313-3.313 3.313z\"/></svg>",
    "icon": "<svg viewBox=\"0 0 85 87\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"currentColor\" fill-rule=\"evenodd\"><rect x=\".209\" y=\"69.017\" width=\"33.643\" height=\"17.014\" rx=\"4\"/><rect x=\"50.672\" y=\"69.017\" width=\"33.622\" height=\"17.014\" rx=\"4\"/><rect x=\".184\" y=\"34.99\" width=\"84.121\" height=\"17.014\" rx=\"4\"/><rect x=\".209\" y=\".964\" width=\"50.469\" height=\"17.013\" rx=\"4\"/><rect x=\"67.494\" y=\".964\" width=\"16.821\" height=\"17.013\" rx=\"4\"/></g></svg>",
    "id-card": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.5 5H15V3.5c0-1.654-1.346-3-3-3s-3 1.346-3 3V5H.5a.5.5 0 0 0-.5.5v17a.5.5 0 0 0 .5.5h23a.5.5 0 0 0 .5-.5v-17a.5.5 0 0 0-.5-.5zM10 3.5c0-1.103.897-2 2-2s2 .897 2 2V7h-4V3.5zM9 6v1.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5V6h8v3H1V6h8zM1 22V10h22v12H1zm7.745-5.715A2.487 2.487 0 0 0 9.5 14.5C9.5 13.122 8.378 12 7 12s-2.5 1.122-2.5 2.5c0 .7.291 1.331.755 1.785C3.629 16.867 3 18.259 3 19.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5c0-1.241-.629-2.633-2.255-3.215zM5.5 14.5c0-.827.673-1.5 1.5-1.5s1.5.673 1.5 1.5S7.827 16 7 16s-1.5-.673-1.5-1.5zM4.047 19c.149-.791.74-2 2.953-2s2.803 1.209 2.953 2H4.047zM13 18h8v1h-8zm0-2h8v1h-8zm0-2h8v1h-8zm0-2h4v1h-4z\"/><circle cx=\"12\" cy=\"3.495\" r=\"1\"/></svg>",
    "idea": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M16 6.688c-4.75 0-8.688 3.875-8.688 8.625 0 3.813 2.438 7.125 6 8.25v1.125c0 .375.313.625.688.625h4c.375 0 .688-.25.688-.625v-1.125c3.563-1.125 6-4.438 6-8.25 0-4.75-3.938-8.625-8.688-8.625zm1.813 15.75c-.25.063-.5.313-.5.625v.938h-2.625v-.938c0-.313-.25-.563-.5-.625-3.25-.875-5.5-3.75-5.5-7.125 0-4 3.25-7.313 7.313-7.313s7.313 3.313 7.313 7.313c0 3.375-2.25 6.25-5.5 7.125zm-1.125 6.875h-1.375c-.375 0-.625.313-.625.688s.25.688.625.688h1.375c.375 0 .625-.313.625-.688s-.25-.688-.625-.688zM18 26.688h-4c-.375 0-.688.25-.688.625s.313.688.688.688h4c.375 0 .688-.313.688-.688s-.313-.625-.688-.625zM16 5.313c.375 0 .688-.25.688-.625V2c0-.375-.313-.688-.688-.688s-.688.313-.688.688v2.688c0 .375.313.625.688.625zm13.313 9.375h-2.625c-.375 0-.688.25-.688.625s.313.688.688.688h2.625c.375 0 .688-.313.688-.688s-.313-.625-.688-.625zm-24 0H2.688c-.375 0-.688.25-.688.625s.313.688.688.688h2.625c.375 0 .688-.313.688-.688s-.313-.625-.688-.625zM8 8.25a.677.677 0 0 0 .438.188.71.71 0 0 0 .5-.188.68.68 0 0 0 0-.938L6.125 4.499a.76.76 0 0 0-1 0 .68.68 0 0 0 0 .938zm15.563.188a.677.677 0 0 0 .438-.188l2.813-2.813a.586.586 0 0 0 0-.938c-.25-.25-.625-.25-.938 0l-2.813 2.813a.68.68 0 0 0 0 .938.71.71 0 0 0 .5.188z\"/></svg>",
    "instagram": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M16 2.881c4.275 0 4.781.019 6.462.094 1.563.069 2.406.331 2.969.55a4.952 4.952 0 0 1 1.837 1.194 5.015 5.015 0 0 1 1.2 1.838c.219.563.481 1.412.55 2.969.075 1.688.094 2.194.094 6.463s-.019 4.781-.094 6.463c-.069 1.563-.331 2.406-.55 2.969a4.94 4.94 0 0 1-1.194 1.837 5.02 5.02 0 0 1-1.837 1.2c-.563.219-1.413.481-2.969.55-1.688.075-2.194.094-6.463.094s-4.781-.019-6.463-.094c-1.563-.069-2.406-.331-2.969-.55a4.952 4.952 0 0 1-1.838-1.194 5.02 5.02 0 0 1-1.2-1.837c-.219-.563-.481-1.413-.55-2.969-.075-1.688-.094-2.194-.094-6.463s.019-4.781.094-6.463c.069-1.563.331-2.406.55-2.969a4.964 4.964 0 0 1 1.194-1.838 5.015 5.015 0 0 1 1.838-1.2c.563-.219 1.412-.481 2.969-.55 1.681-.075 2.188-.094 6.463-.094zM16 0c-4.344 0-4.887.019-6.594.094-1.7.075-2.869.35-3.881.744-1.056.412-1.95.956-2.837 1.85a7.833 7.833 0 0 0-1.85 2.831C.444 6.538.169 7.7.094 9.4.019 11.113 0 11.656 0 16s.019 4.887.094 6.594c.075 1.7.35 2.869.744 3.881.413 1.056.956 1.95 1.85 2.837a7.82 7.82 0 0 0 2.831 1.844c1.019.394 2.181.669 3.881.744 1.706.075 2.25.094 6.594.094s4.888-.019 6.594-.094c1.7-.075 2.869-.35 3.881-.744 1.05-.406 1.944-.956 2.831-1.844s1.438-1.781 1.844-2.831c.394-1.019.669-2.181.744-3.881.075-1.706.094-2.25.094-6.594s-.019-4.887-.094-6.594c-.075-1.7-.35-2.869-.744-3.881a7.506 7.506 0 0 0-1.831-2.844A7.82 7.82 0 0 0 26.482.843C25.463.449 24.301.174 22.601.099c-1.712-.081-2.256-.1-6.6-.1z\"/><path d=\"M16 7.781c-4.537 0-8.219 3.681-8.219 8.219s3.681 8.219 8.219 8.219 8.219-3.681 8.219-8.219A8.221 8.221 0 0 0 16 7.781zm0 13.55a5.331 5.331 0 1 1 0-10.663 5.331 5.331 0 0 1 0 10.663zM26.462 7.456a1.919 1.919 0 1 1-3.838 0 1.919 1.919 0 0 1 3.838 0z\"/></svg>",
    "laptop": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21 15.5v-10a.5.5 0 0 0-.5-.5h-17a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5zm-1-.5H4V6h16v9zm3.5 2H23V5c0-1.102-.897-2-2-2H3c-1.103 0-2 .898-2 2v12H.5a.5.5 0 0 0-.5.5v2c0 .827.673 1.5 1.5 1.5h21c.827 0 1.5-.673 1.5-1.5v-2a.5.5 0 0 0-.5-.5zM2 5c0-.552.449-1 1-1h18c.551 0 1 .448 1 1v12h-7.5a.5.5 0 0 0-.5.5v.5h-4v-.5a.5.5 0 0 0-.5-.5H2V5zm21 14.5a.5.5 0 0 1-.5.5h-21a.5.5 0 0 1-.5-.5V18h8v.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5V18h8v1.5z\"/></svg>",
    "line": "<svg viewBox=\"0 0 42 4\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1 2h40\" stroke=\"#000\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"square\"/></svg>",
    "link": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14.5 12.5l.086.086a2 2 0 0 0 2.828 0l3.965-3.964a3.01 3.01 0 0 0 0-4.243l-1.758-1.757a3.008 3.008 0 0 0-4.242 0l-3.965 3.964a2 2 0 0 0 0 2.829l.086.085m-2 2l-.086-.085a2 2 0 0 0-2.828 0l-3.965 3.964a3.01 3.01 0 0 0 0 4.243l1.758 1.757a3.008 3.008 0 0 0 4.242 0l3.965-3.964a2 2 0 0 0 0-2.829L12.5 14.5m-4.389 1.389l7.778-7.778\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"/></svg>",
    "list-bullet": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><circle cx=\"2.5\" cy=\"4.5\" r=\"2\"/><path d=\"M8.569 4.428H23.5\"/><circle cx=\"2.5\" cy=\"12.5\" r=\"2\"/><path d=\"M8.569 12.428H23.5\"/><circle cx=\"2.5\" cy=\"20.5\" r=\"2\"/><path d=\"M8.569 20.427H23.5\"/></g></svg>",
    "list-number": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.5 4.5h17m-17 8h17m-17 8h17M2 6.5V2.573L.5 4.037M2.569 14.5H.5c1.48-2 2-1.836 2-2.963a.986.986 0 0 0-1-.982.948.948 0 0 0-.965.974M.5 18.5h1.931l-1 1.537c.826 0 1 .481 1 .981s-.174.982-1 .982H.5\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"/></svg>",
    "lock": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 14c-.552 0-1 .449-1 1 0 .365.207.672.5.846V18.5a.5.5 0 0 0 1 0v-2.654A.987.987 0 0 0 13 15c0-.551-.448-1-1-1zm8.5-5H18V6c0-3.309-2.691-6-6-6S6 2.691 6 6v3H3.5a.5.5 0 0 0-.5.5v14a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5v-14a.5.5 0 0 0-.5-.5zM7 6c0-2.757 2.243-5 5-5s5 2.243 5 5v3H7V6zm13 17H4V10h16v13z\"/></svg>",
    "lock2": "<svg viewBox=\"0 0 16 21\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.889 9.168V5.722c0-3.16-2.601-5.72-5.81-5.72-.04 0-.068-.003-.108-.002l-.106.002c-3.209 0-5.809 2.561-5.809 5.72v3.446H0V21h16V9.168h-2.111zm-4.073 9.663H6.187l.89-3.825a1.779 1.779 0 0 1-.89-1.535c0-.987.813-1.787 1.815-1.787s1.814.8 1.814 1.787a1.78 1.78 0 0 1-.895 1.538l.895 3.822zm1.166-9.663h-6.02V5.722c0-1.575 1.302-2.857 2.903-2.857l.142-.003.073.002c1.6 0 2.902 1.282 2.902 2.858v3.446z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>",
    "loop-infinite": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\"><path d=\"M10.5 10S9 6.5 6 6.5.5 8.963.5 12s2.462 5.5 5.5 5.5c5 0 7-11 12-11 3 0 5.5 2.463 5.5 5.5S21 17.5 18 17.5 13.5 15 13.5 15\"/><path d=\"M7.025 9.344L10.5 10l.654-3.475\"/></g></svg>",
    "lotus": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.098 13.951c1.201-2.187 1.505-4.565 1.522-4.705a.5.5 0 0 0-.357-.54c-.07-.02-1.597-.444-3.451-.281a15.204 15.204 0 0 0-.602-3.935.502.502 0 0 0-.613-.329c-.07.02-1.569.46-3.122 1.586-.896-1.817-2.036-3.014-2.115-3.095a.518.518 0 0 0-.718 0c-.078.081-1.217 1.278-2.113 3.093-1.555-1.126-3.054-1.564-3.125-1.584a.503.503 0 0 0-.613.329c-.037.115-.564 1.818-.602 3.934-1.855-.163-3.381.262-3.451.282a.501.501 0 0 0-.358.54c.017.138.307 2.433 1.454 4.587C1.33 14.81.5 16.03.5 17.312c0 3.26 4.836 5.718 11.25 5.718 2.104 0 4.836-.324 5.987-.943a.5.5 0 0 0 .263-.441V19h4.875a.5.5 0 0 0 .499-.463c.136-1.836-.657-3.41-2.276-4.586zm-2.309-4.524a9.635 9.635 0 0 1 2.767.141c-.214 1.179-.979 4.42-3.093 6.06-1.465 1.137-3.314 1.28-4.634 1.193 1.36-.699 3.197-1.98 4.188-4.123.488-1.055.705-2.19.772-3.271zM17.39 5.291c.298 1.217.899 4.434-.282 6.988-.809 1.752-2.315 2.87-3.506 3.523.898-1.342 1.95-3.416 1.95-5.782 0-1.205-.276-2.332-.663-3.329a10.603 10.603 0 0 1 2.501-1.4zM12 3.761c.779.947 2.553 3.419 2.553 6.26 0 2.842-1.774 5.313-2.553 6.261-.779-.947-2.553-3.419-2.553-6.261 0-2.841 1.774-5.313 2.553-6.26zm-5.39 1.53c.561.216 1.537.672 2.499 1.402-.386.997-.662 2.123-.662 3.328 0 2.369 1.055 4.444 1.953 5.786-1.191-.651-2.696-1.769-3.509-3.528-1.18-2.553-.579-5.771-.281-6.988zM5.211 9.426c.067 1.08.284 2.216.772 3.273.992 2.145 2.83 3.426 4.191 4.125-1.319.088-3.167-.053-4.637-1.194-2.109-1.638-2.876-4.882-3.092-6.061a9.641 9.641 0 0 1 2.766-.143zM17.5 18a.5.5 0 0 0-.5.5v2.826c-1.023.403-3.215.704-5.25.704-5.652 0-10.25-2.116-10.25-4.718 0-.925.656-1.845 1.85-2.626.431.643.946 1.246 1.574 1.733 1.468 1.139 3.211 1.432 4.616 1.432 1.185 0 2.121-.207 2.46-.293.339.086 1.275.293 2.46.293 1.405 0 3.148-.293 4.616-1.433a7.251 7.251 0 0 0 1.498-1.619c1.162.862 1.773 1.934 1.812 3.2H17.5z\"/></svg>",
    "markdown": "<svg viewBox=\"0 0 43 34\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><rect stroke=\"#000\" stroke-width=\"2\" x=\"2\" y=\"2\" width=\"39\" height=\"30\" rx=\"2\"/><path fill=\"#000\" d=\"M19.566 12.613l-.049-.01L14.917 24h-1.279l-4.6-11.387-.048.01.195 5.752v4.121l1.592.274V24H5.669v-1.23l1.592-.274V11.295L5.67 11.02v-1.24h4.053l4.531 11.553h.059l4.521-11.553h4.063v1.24l-1.592.274v11.201l1.592.274V24h-5.107v-1.23l1.591-.274v-4.121z\"/><path d=\"M36.077 18.501l-5.039 5.039L26 18.5m5.038 5.039v-13.1\" stroke=\"#000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></g></svg>",
    "mobile-phone-heart": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M16.5 0h-9A2.503 2.503 0 0 0 5 2.5v19C5 22.879 6.122 24 7.5 24h9c1.378 0 2.5-1.121 2.5-2.5v-19C19 1.121 17.878 0 16.5 0zM6 5h12v14H6V5zm1.5-4h9c.827 0 1.5.673 1.5 1.5V4H6V2.5C6 1.673 6.673 1 7.5 1zm9 22h-9c-.827 0-1.5-.673-1.5-1.5V20h12v1.5c0 .827-.673 1.5-1.5 1.5zm-7-20h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0 0 1z\"/><circle cx=\"12\" cy=\"21.5\" r=\"1\"/><path d=\"M14.272 7.502c-.772 0-1.673.376-2.272 1.356-.599-.981-1.5-1.356-2.272-1.356C8.387 7.502 7 8.609 7 10.462c0 2.581 4.226 5.698 4.708 6.046a.503.503 0 0 0 .584 0C12.774 16.16 17 13.043 17 10.462c0-1.853-1.387-2.96-2.728-2.96zM12 15.479c-1.34-1.023-4-3.39-4-5.017 0-1.226.878-1.96 1.728-1.96.844 0 1.512.673 1.786 1.802.108.447.863.447.972 0 .274-1.129.942-1.802 1.786-1.802.85 0 1.728.733 1.728 1.96 0 1.627-2.66 3.993-4 5.017z\"/></svg>",
    "navigation": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.5 4h-16a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h16a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5zM22 7H7V5h15v2zm-2.5 3h-16a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h16a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5zm-.5 3H4v-2h15v2zm-2.5 3H.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h16a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5zm-.5 3H1v-2h15v2z\"/></svg>",
    "network": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22 12.5c-.694 0-1.306.356-1.664.895l-2.705-1.118A4.467 4.467 0 0 0 18 10.5a4.456 4.456 0 0 0-.995-2.788l3.987-3.996c.296.176.639.284 1.008.284 1.103 0 2-.897 2-2 0-1.102-.897-2-2-2s-2 .898-2 2c0 .37.108.712.284 1.01l-3.986 3.994A4.459 4.459 0 0 0 13.499 6c-1.673 0-3.119.929-3.894 2.287L3.963 5.869C3.985 5.749 4 5.626 4 5.5c0-1.102-.898-2-2-2s-2 .898-2 2c0 1.103.897 2 2 2 .617 0 1.163-.287 1.53-.728l5.681 2.435c-.125.412-.212.84-.212 1.293 0 1.065.387 2.032 1.008 2.803l-6.997 6.98A1.986 1.986 0 0 0 2 20c-1.102 0-2 .898-2 2 0 1.103.897 2 2 2s2-.897 2-2c0-.37-.108-.712-.284-1.01l6.999-6.982a4.452 4.452 0 0 0 2.283.941v5.121c-.86.224-1.5 1-1.5 1.929 0 1.103.898 2 2 2 1.103 0 2-.897 2-2 0-.929-.64-1.705-1.5-1.929v-5.12a4.476 4.476 0 0 0 3.12-1.802l2.896 1.197L20 14.5c0 1.103.897 2 2 2s2-.897 2-2c0-1.102-.897-2-2-2zm-20-6a1 1 0 1 1 0-2 1 1 0 0 1 0 2zM22 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zM2 23a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm12.499-1a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-1-8c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5zM22 15.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"/></svg>",
    "news-article": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.5 2H.5a.5.5 0 0 0-.5.5v18a.5.5 0 0 0 .5.5h23a.5.5 0 0 0 .5-.5v-18a.5.5 0 0 0-.5-.5zM23 20H1V3h22v17zM2.5 9h19a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-19a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5zM3 6h18v2H3V6zm7.5 5h-6a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1zm0 2h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm0 2h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm0 2h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm10-6h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm0 2h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm0 2h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1zm-1 2h-6a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1z\"/></svg>",
    "paint-palette": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M20.485 4.514C18.219 2.248 15.205 1 12 1S5.781 2.248 3.515 4.514c-4.679 4.679-4.679 12.292 0 16.972.944.944 2.591.945 3.537 0a2.506 2.506 0 0 0-.001-3.536.495.495 0 0 1 .001-.706.514.514 0 0 1 .707 0L12 21.486a5.958 5.958 0 0 0 4.243 1.758 5.962 5.962 0 0 0 4.242-1.758c4.68-4.679 4.68-12.293 0-16.972zm-.707 16.265a4.964 4.964 0 0 1-3.535 1.465 4.967 4.967 0 0 1-3.536-1.465l-4.242-4.243c-.283-.283-.66-.439-1.061-.439s-.778.156-1.061.44a1.494 1.494 0 0 0-.439 1.061c0 .401.156.778.439 1.06a1.505 1.505 0 0 1 0 2.122c-.566.566-1.556.566-2.122 0-4.289-4.289-4.289-11.268 0-15.558C6.299 3.144 9.062 2 12 2s5.701 1.144 7.778 3.221c4.289 4.289 4.289 11.269 0 15.558zM16.243 10.05c.534 0 1.037-.208 1.413-.585.378-.377.586-.879.586-1.414 0-.535-.208-1.037-.586-1.413-.755-.757-2.074-.756-2.828-.001a1.983 1.983 0 0 0-.586 1.414c0 .535.208 1.037.586 1.414s.88.585 1.415.585zm-.708-2.706a.994.994 0 0 1 .708-.293.99.99 0 0 1 .707.294.99.99 0 0 1 .293.706.993.993 0 0 1-.293.707 1.023 1.023 0 0 1-1.414-.001.99.99 0 0 1-.293-.706.988.988 0 0 1 .292-.707zm4.525 4.595c-.567-.566-1.553-.566-2.122 0A1.502 1.502 0 0 0 19 14.5a1.502 1.502 0 0 0 1.06-2.561zm-.706 1.414a.512.512 0 0 1-.707 0 .5.5 0 1 1 .707 0zm-4.879 2.829a2.506 2.506 0 0 0 0 3.537c.472.472 1.1.731 1.768.731.668 0 1.296-.26 1.768-.731.472-.472.732-1.1.732-1.769 0-.668-.26-1.296-.732-1.768-.945-.944-2.593-.944-3.536 0zm2.828 2.829c-.565.566-1.556.566-2.121 0a1.503 1.503 0 0 1-.001-2.122 1.49 1.49 0 0 1 1.061-.439c.401 0 .777.156 1.06.439.283.283.44.66.44 1.061s-.156.778-.439 1.061zM8.819 5.575a1.981 1.981 0 0 0-.587 1.415c0 .534.208 1.036.586 1.412.377.378.879.587 1.414.587.535 0 1.037-.208 1.413-.586.378-.376.586-.878.587-1.412a1.99 1.99 0 0 0-.586-1.416c-.755-.756-2.072-.755-2.827 0zm2.119 2.121a1.02 1.02 0 0 1-1.413-.001.989.989 0 0 1-.293-.705.993.993 0 0 1 .293-.708.993.993 0 0 1 .707-.293.997.997 0 0 1 .706 1.707z\"/></svg>",
    "pen": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M28.5 7.313L24.687 3.5a.68.68 0 0 0-.938 0l-.5.563a3.26 3.26 0 0 0-1.813-.563c-.938 0-1.75.313-2.375.938l-7.563 7.563a.68.68 0 0 0 0 .938.71.71 0 0 0 .5.188.677.677 0 0 0 .438-.188l7.563-7.5c.563-.625 1.5-.75 2.25-.438l-6 6.063-13.25 13.188v.063c-.063 0-.063.063-.125.188L.061 31.066a.664.664 0 0 0 .125.75.71.71 0 0 0 .5.188c.063 0 .188 0 .25-.063l6.563-2.813c.125-.063.188-.063.188-.125h.063l13.188-13.25 7.563-7.5c.125-.125.188-.313.188-.5s-.063-.313-.188-.438zM1.938 30.063l1.813-4.188 2.375 2.375zm5.312-2.5L4.437 24.75l12.25-12.25 2.813 2.813zm13.188-13.188l-2.813-2.813 6.125-6.188.5-.438 2.813 2.813z\"/></svg>",
    "pencil-circle": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"><path d=\"M10.661 16.168l-4.95 2.122 2.122-4.951L16.672 4.5 19.5 7.329zm7.003-7.003l-2.828-2.829m-4.175 9.832l-2.828-2.829\"/><circle cx=\"12\" cy=\"12\" r=\"11.5\"/></g></svg>",
    "photos-people": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 18.5v-17a.5.5 0 0 0-.5-.5h-17a.5.5 0 0 0-.5.5v17a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5zM18 2v13h-2.56a5.382 5.382 0 0 0-3.352-4.5 3.555 3.555 0 1 0-3.979.002A5.377 5.377 0 0 0 4.759 15H2V2h16zM7.541 7.555A2.56 2.56 0 0 1 10.098 5a2.558 2.558 0 0 1 2.555 2.555 2.558 2.558 0 0 1-2.555 2.556 2.559 2.559 0 0 1-2.557-2.556zM14.458 15H5.736a4.395 4.395 0 0 1 4.361-3.889A4.395 4.395 0 0 1 14.458 15zM2 18v-2h16v2H2zM22.884 7.242a.5.5 0 0 0-.339-.178l-1.992-.182a.501.501 0 0 0-.09.996l1.494.136-1.272 13.942-14.44-1.317a.502.502 0 0 0-.09.997l14.937 1.363.045.001a.501.501 0 0 0 .498-.455l1.363-14.939a.497.497 0 0 0-.114-.364z\"/></svg>",
    "photos": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19 18.5v-17a.5.5 0 0 0-.5-.5h-17a.5.5 0 0 0-.5.5v17a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5zM18 2v13h-2.161l-2.874-7.186a.5.5 0 0 0-.453-.314.529.529 0 0 0-.467.293l-2.17 4.775-1.99-2.389a.502.502 0 0 0-.813.063L4.217 15H2V2h16zm-3.238 13H5.383l2.183-3.639 2.049 2.46a.5.5 0 0 0 .839-.114l2.016-4.434L14.762 15zM2 18v-2h16v2H2zM22.884 7.242a.5.5 0 0 0-.339-.178l-1.992-.181a.5.5 0 0 0-.09.996l1.494.135-1.272 13.942-14.44-1.317a.502.502 0 0 0-.09.997l14.937 1.363.045.001a.501.501 0 0 0 .498-.455l1.363-14.939a.497.497 0 0 0-.114-.364zM6 8c1.103 0 2-.897 2-2s-.897-2-2-2-2 .897-2 2 .897 2 2 2zm0-3c.551 0 1 .449 1 1s-.449 1-1 1-1-.449-1-1 .449-1 1-1z\"/></svg>",
    "pin": "<svg viewBox=\"0 0 22 33\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20.688 11c0 5.525-9.844 20.667-9.844 20.667S1 16.525 1 11C1 5.477 5.406 1 10.844 1c5.436 0 9.844 4.477 9.844 10zm-5.907 0c0 2.21-1.764 4-3.937 4-2.175 0-3.938-1.79-3.938-4 0-2.208 1.763-4 3.938-4 2.173 0 3.937 1.792 3.937 4z\" stroke=\"#394043\" stroke-width=\"2\" fill=\"#fff\" fill-rule=\"evenodd\" stroke-linejoin=\"round\"/></svg>",
    "plane": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.854 1.146c-1.132-1.132-3.073-1.133-4.207 0L15.793 4c-1.566-.001-2.984-.01-4.268-.018-1.1-.007-2.101-.013-3.01-.013C2.92 3.969 0 4.103 0 7c0 2.326 2.079 2.41 5.225 2.536 1.307.052 2.884.116 4.704.329L4.793 15H2.5A2.503 2.503 0 0 0 0 17.5c0 1.87 1.374 2.258 2.829 2.67l.774.227.213.731C4.214 22.54 4.626 24 6.5 24 7.878 24 9 22.878 9 21.5v-2.293l5.135-5.135c.214 1.826.278 3.407.331 4.715C14.592 21.926 14.675 24 17 24c.931 0 1.584-.224 2.056-.703 1.13-1.148 1.09-3.629 1.004-9.066A385.498 385.498 0 0 1 20 8.207l2.854-2.853a2.947 2.947 0 0 0 0-4.208zm-.708 3.501l-3 3A.5.5 0 0 0 19 8c0 2.421.033 4.488.06 6.246.077 4.836.119 7.5-.717 8.349-.275.28-.689.405-1.343.405-1.238 0-1.396-.806-1.535-4.253-.063-1.565-.142-3.513-.47-5.818a.497.497 0 0 0-.337-.403L14.5 12.5a.504.504 0 0 0-.354.146l-6 6A.504.504 0 0 0 8 19v2.5c0 .827-.673 1.5-1.5 1.5-1.072 0-1.302-.657-1.722-2.143-.092-.326-.188-.667-.304-1.015a.5.5 0 0 0-.316-.316 22.197 22.197 0 0 0-1.058-.317C1.606 18.785 1 18.571 1 17.5c0-.827.673-1.5 1.5-1.5H5a.5.5 0 0 0 .353-.146l6-6a.5.5 0 0 0-.282-.849c-2.298-.328-4.243-.406-5.806-.468C1.808 8.398 1 8.24 1 7c0-1.67 1.335-2.031 7.516-2.031.907 0 1.906.006 3.003.013C12.861 4.991 14.35 5 16 5a.5.5 0 0 0 .354-.147l3-3c.755-.755 2.038-.755 2.793 0 .782.783.782 2.01-.001 2.794z\"/></svg>",
    "plus": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.5.5v22m11-11H.5\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"/></svg>",
    "powered-by-stripe": "<svg viewBox=\"0 0 119 26\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"evenodd\"><path d=\"M118 6a5 5 0 0 0-5-5H6a5 5 0 0 0-5 5v14a5 5 0 0 0 5 5h107a5 5 0 0 0 5-5V6zm-5 20H6a6 6 0 0 1-6-6V6a6 6 0 0 1 6-6h107a6 6 0 0 1 6 6v14a6 6 0 0 1-6 6z\"/><path d=\"M10.939 9.987H9.918v2.452h1.021c.779 0 1.326-.495 1.326-1.221 0-.736-.547-1.231-1.326-1.231zm.189 3.546h-1.21v2.6H8.571V8.892h2.557c1.474 0 2.526.958 2.526 2.326s-1.052 2.315-2.526 2.315zm5.915-1.662c-.789 0-1.336.663-1.336 1.631s.547 1.631 1.336 1.631c.779 0 1.326-.663 1.326-1.631s-.547-1.631-1.326-1.631zm0 4.388c-1.589 0-2.715-1.147-2.715-2.757 0-1.621 1.126-2.757 2.715-2.757s2.705 1.136 2.705 2.757c0 1.61-1.116 2.757-2.705 2.757zm8.231-.126L24.2 12.555l-1.063 3.578h-1.21l-1.81-5.262h1.347l1.063 3.578 1.063-3.578h1.22l1.063 3.578 1.063-3.578h1.347l-1.799 5.262h-1.21zm5.925-4.347c-.652 0-1.157.485-1.22 1.211h2.294c-.042-.716-.474-1.211-1.074-1.211zm-1.22 2.084c.084.8.715 1.347 1.599 1.347.484 0 1.021-.179 1.568-.495v1.127c-.6.273-1.2.41-1.789.41-1.589 0-2.704-1.158-2.704-2.799 0-1.589 1.094-2.715 2.599-2.715 1.378 0 2.315 1.084 2.315 2.63 0 .148 0 .316-.021.495h-3.567zm6.009-1.252v3.515h-1.347v-5.262h1.347v.526c.379-.421.842-.652 1.294-.652.148 0 .295.01.442.052v1.2a1.77 1.77 0 0 0-.473-.063c-.442 0-.916.242-1.263.684zm4.768-.832c-.653 0-1.158.485-1.221 1.211h2.294c-.042-.716-.473-1.211-1.073-1.211zm-1.221 2.084c.084.8.716 1.347 1.599 1.347.485 0 1.021-.179 1.568-.495v1.127a4.298 4.298 0 0 1-1.789.41c-1.589 0-2.704-1.158-2.704-2.799 0-1.589 1.094-2.715 2.599-2.715 1.379 0 2.315 1.084 2.315 2.63 0 .148 0 .316-.021.495h-3.567zm8.019-1.494c-.305-.316-.673-.474-1.041-.474-.769 0-1.295.653-1.295 1.6 0 .947.526 1.599 1.295 1.599.368 0 .736-.158 1.041-.473v-2.252zm0 3.388c-.41.327-.873.495-1.336.495-1.4 0-2.378-1.137-2.378-2.757 0-1.621.978-2.757 2.378-2.757.463 0 .926.168 1.336.484V8.566h1.358v7.567h-1.358v-.369zm7.852-3.862c-.368 0-.737.158-1.052.474v2.252c.315.315.684.473 1.052.473.758 0 1.284-.652 1.284-1.599s-.526-1.6-1.284-1.6zm.284 4.357c-.452 0-.916-.168-1.336-.495v.369h-1.347V8.566h1.347v2.663c.42-.316.884-.484 1.336-.484 1.41 0 2.378 1.136 2.378 2.757 0 1.62-.968 2.757-2.378 2.757zm5.01 2.178h-1.305l1.01-2.494-2.01-5.072h1.379l1.263 3.452 1.273-3.452h1.379L60.7 18.437zM76.485 14.959c0 2.044-1.627 3.21-3.988 3.21-.979 0-2.049-.19-3.105-.644v-2.711c.953.518 2.167.907 3.108.907.633 0 1.089-.17 1.089-.695 0-1.355-4.316-.845-4.316-3.988 0-2.01 1.535-3.213 3.838-3.213.941 0 1.881.144 2.822.519v2.675c-.864-.467-1.961-.731-2.824-.731-.595 0-.965.172-.965.615 0 1.278 4.341.67 4.341 4.056zm3.539-.484c0 1.673 1.792 1.152 2.155 1.007v2.311c-.378.208-1.064.376-1.992.376-1.685 0-2.95-1.241-2.95-2.922l.013-9.109 2.772-.59.002 2.466h2.156v2.421h-2.156v4.04zm6.086-3.256v6.747h-2.838V8.014h2.455l.178.839c.665-1.222 1.992-.974 2.37-.838v2.61c-.361-.117-1.494-.287-2.165.594zm3.039-6.383l2.85-.606v2.313l-2.85.606V4.836zm0 13.13h2.85V8.014h-2.85v9.952zm8.297-7.626c-.651 0-1.06.238-1.356.563l.017 4.219c.276.299.673.539 1.339.539 1.05 0 1.754-1.143 1.754-2.672 0-1.485-.715-2.649-1.754-2.649zm.662 7.829c-.994 0-1.601-.419-2.009-.718l-.006 3.213-2.839.604-.001-13.254h2.5l.148.701a3.18 3.18 0 0 1 2.224-.89c1.994 0 3.872 1.796 3.872 5.102 0 3.608-1.858 5.242-3.889 5.242zm8.923-8.029c-.71 0-1.499.536-1.499 1.815h2.936c0-1.278-.74-1.815-1.437-1.815zm4.085 3.911h-5.559c.127 1.331 1.102 1.723 2.209 1.723 1.127 0 2.015-.238 2.789-.628v2.287c-.771.428-1.79.736-3.147.736-2.766 0-4.704-1.732-4.704-5.156 0-2.892 1.644-5.188 4.345-5.188 2.697 0 4.105 2.295 4.105 5.203 0 .275-.025.87-.038 1.023z\"/></g></svg>",
    "presentation-code": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.5 4a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5H.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5H2v13H.52a.5.5 0 0 0 0 1h10.467l.011 2.072A1.997 1.997 0 0 0 9.5 22c0 1.103.898 2 2 2s2-.897 2-2c0-.93-.641-1.707-1.502-1.93L11.987 18h10.492a.5.5 0 0 0 0-1H21V4h1.5zm-10 18a1.001 1.001 0 0 1-2 0 1.001 1.001 0 0 1 2 0zM1 1h21v2H1V1zm19 16H3V4h17v13zM7.191 12.933a.496.496 0 0 0 .707-.007.5.5 0 0 0-.008-.707l-1.676-1.643L7.89 8.933a.5.5 0 0 0-.699-.714l-2.041 2a.5.5 0 0 0 0 .714l2.041 2zm7.905-.064a.499.499 0 0 0 .707.007l2.041-2a.496.496 0 0 0 0-.714l-2.041-2a.5.5 0 0 0-.699.714l1.676 1.643-1.676 1.643a.499.499 0 0 0-.008.707zM9.193 13.98a.497.497 0 0 0 .692-.141l4.031-6.094a.5.5 0 0 0-.834-.552l-4.031 6.094a.5.5 0 0 0 .142.693z\"/></svg>",
    "recycle": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.5 16H6.03a19.73 19.73 0 0 1 1.196-1.5H9a.5.5 0 0 0 .4-.8l-3-4a.5.5 0 0 0-.4-.2H.5a.5.5 0 0 0-.278.917l.972.648A2.923 2.923 0 0 0 .5 13c0 1.354 1.882 5.219 3.243 7.421.113.265.25.43.329.512C4.493 21.44 5.391 22 6 22h5.5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5zm-9.239-4.573a.5.5 0 0 0 .016-.843l-.126-.084H5.75l2.25 3H7a.496.496 0 0 0-.373.168c-1.787 2.009-2.619 3.534-2.928 4.677C2.506 16.147 1.5 13.758 1.5 13c0-1.074.734-1.556.761-1.573zM11 21H6c-.266 0-.912-.403-1.122-.653l-.006-.014-.101-.158-.184-.398c-.097-.467-.05-1.342.788-2.777H11v4zm12.798-9.023L20.612 7.37a.5.5 0 0 0-.695-.127l-4.338 3a.499.499 0 0 0-.127.695l2.912 4.208a20.36 20.36 0 0 1-1.365-.092V14a.5.5 0 0 0-.916-.278l-3 4.5a.498.498 0 0 0-.019.522l2.814 5a.5.5 0 0 0 .436.255l.107-.012a.499.499 0 0 0 .391-.449l.129-1.64c.204.059.442.102.704.102.489 0 .952-.148 1.374-.441.96-.663 2.973-4.056 4.502-6.805.34-.397.414-.735.43-.833.206-.564.226-1.398-.153-1.944zm-5.347 8.761a1.393 1.393 0 0 1-.805.263c-.482 0-.854-.254-.855-.254a.5.5 0 0 0-.79.367l-.056.711-1.859-3.303 1.93-2.895a.5.5 0 0 0 .423.369c.905.11 1.746.167 2.501.167 1.221 0 2.144-.147 2.842-.364-1.582 2.743-2.821 4.587-3.331 4.939zm1.127-5.595l-3.019-4.363 3.515-2.432 2.901 4.197c.156.225.168.756.046 1.048l-.319.577c-.338.352-1.178.876-3.124.973zm-1.633-8.066l2.5-4.894a.502.502 0 0 0-.618-.697l-1.503.554c-.178-.481-.573-1.124-1.445-1.536C16.614.379 15.81 0 10.69 0c-.734 0-1.436.009-2.083.021V.018l-.304.008-.079.001-.101-.004-.179.013H7.94l-.004.001-.038.006-.023.009C7.257.15 6.478.586 6.192 1.193L3.802 6.26a.5.5 0 0 0 .239.665l4.768 2.25.213.048.169-.029a.499.499 0 0 0 .283-.258l2.095-4.44c.247.455.5.967.757 1.549-.258.2-.384.285-.432.316a.5.5 0 0 0-.243.845.51.51 0 0 0 .358.149l.066-.005H17.5a.5.5 0 0 0 .445-.273zm-9.162.98L4.919 6.233l2.177-4.614c.118-.249.604-.547.916-.587h.003l.188-.004c.295.031 1.368.303 2.75 2.429l-2.17 4.6zm4.631-1.707a.501.501 0 0 0-.016-.349c-1.149-2.693-2.271-4.182-3.196-5L10.69 1c4.418 0 5.502.286 5.762.408.95.449 1.017 1.287 1.019 1.317a.5.5 0 0 0 .673.447l.83-.306-1.78 3.484h-3.78z\"/></svg>",
    "repo": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M20.5 4H20V.5a.5.5 0 0 0-.5-.5h-14A2.503 2.503 0 0 0 3 2.5v19C3 22.878 4.121 24 5.5 24h15a.5.5 0 0 0 .5-.5v-19a.5.5 0 0 0-.5-.5zm-15-3H19v3h-1v-.5a.5.5 0 0 0-.5-.5h-6a.5.5 0 0 0-.5.5V4H5.5C4.673 4 4 3.327 4 2.5S4.673 1 5.5 1zM12 4h5v10.293l-2.146-2.147a.502.502 0 0 0-.708 0L12 14.293V4zm8 19H5.5c-.827 0-1.5-.673-1.5-1.5V4.487c.419.318.935.513 1.5.513H11v10.5a.5.5 0 0 0 .854.354l2.646-2.647 2.646 2.647A.504.504 0 0 0 17.5 16l.191-.038A.5.5 0 0 0 18 15.5V5h2v18z\"/></svg>",
    "retry": "<svg class=\"retry-animated\" viewBox=\"0 0 24 24\"><g transform=\"translate(12 12)\"><path d=\"M0-12v24\" transform=\"rotate(-45)\"/><path d=\"M0-12v24\" transform=\"rotate(45)\"/></g></svg>",
    "satellite": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.854 15.646L19.5 11.293V7.45c1.14-.233 2-1.242 2-2.45 0-1.378-1.121-2.5-2.5-2.5-1.208 0-2.217.86-2.449 2h-3.844L8.354.147a.5.5 0 0 0-.707 0A11.388 11.388 0 0 0 4.278 8.25c0 2.659.909 5.185 2.578 7.228L.124 23.172A.498.498 0 0 0 .5 24h14a.5.5 0 0 0 .376-.83l-3.972-4.539a11.391 11.391 0 0 0 12.949-2.279A.492.492 0 0 0 24 16a.504.504 0 0 0-.146-.354zM16.457 8.25l1.166-1.167c.262.174.558.301.877.366v2.844L16.457 8.25zM19 3.5c.827 0 1.5.673 1.5 1.5s-.673 1.5-1.5 1.5c-.413 0-.788-.168-1.06-.44v-.001A1.491 1.491 0 0 1 17.5 5c0-.827.673-1.5 1.5-1.5zm-2.449 2c.065.318.192.614.366.876L15.75 7.543 13.707 5.5h2.844zM1.602 23L7.5 16.259 13.398 23H1.602zm14.148-4.279a10.397 10.397 0 0 1-7.396-3.075A10.394 10.394 0 0 1 5.278 8.25c0-2.621.966-5.099 2.73-7.034l4.139 4.138 6.499 6.498.002.002 4.137 4.137a10.385 10.385 0 0 1-7.035 2.73z\"/></svg>",
    "search": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.854 23.146l-9.009-9.009A8.455 8.455 0 0 0 17 8.5C17 3.813 13.187 0 8.5 0S0 3.813 0 8.5 3.813 17 8.5 17a8.45 8.45 0 0 0 5.637-2.156l9.009 9.009a.5.5 0 1 0 .708-.707zM1 8.5C1 4.364 4.364 1 8.5 1S16 4.364 16 8.5 12.636 16 8.5 16 1 12.636 1 8.5z\"/></svg>",
    "server": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.996 5.477l-.021-.102-.025-.086-.051-.075-.065-.081-.014-.018-6-5A.504.504 0 0 0 17.5 0h-11a.497.497 0 0 0-.32.116l-6 5-.015.018-.065.081-.05.074-.025.087-.021.101L0 5.5v16C0 22.878 1.121 24 2.5 24h19c1.379 0 2.5-1.122 2.5-2.5v-16l-.004-.023zM23 11H1V6h22v5zM1 12h22v5H1v-5zM6.681 1H17.32l4.799 4H1.881l4.8-4zM21.5 23h-19c-.827 0-1.5-.673-1.5-1.5V18h22v3.5c0 .827-.673 1.5-1.5 1.5z\"/><circle cx=\"14\" cy=\"8.5\" r=\"1\"/><circle cx=\"17\" cy=\"8.5\" r=\"1\"/><circle cx=\"20\" cy=\"8.5\" r=\"1\"/><path d=\"M3.5 10C4.327 10 5 9.327 5 8.5S4.327 7 3.5 7 2 7.673 2 8.5 2.673 10 3.5 10zm0-2a.5.5 0 1 1-.002 1.002A.5.5 0 0 1 3.5 8z\"/><circle cx=\"14\" cy=\"14.5\" r=\"1\"/><circle cx=\"17\" cy=\"14.5\" r=\"1\"/><circle cx=\"20\" cy=\"14.5\" r=\"1\"/><path d=\"M3.5 13c-.827 0-1.5.673-1.5 1.5S2.673 16 3.5 16 5 15.327 5 14.5 4.327 13 3.5 13zm0 2a.5.5 0 1 1 .002-1.002A.5.5 0 0 1 3.5 15z\"/><circle cx=\"14\" cy=\"20.5\" r=\"1\"/><circle cx=\"17\" cy=\"20.5\" r=\"1\"/><circle cx=\"20\" cy=\"20.5\" r=\"1\"/><path d=\"M3.5 19c-.827 0-1.5.673-1.5 1.5S2.673 22 3.5 22 5 21.327 5 20.5 4.327 19 3.5 19zm0 2a.5.5 0 1 1 .002-1.002A.5.5 0 0 1 3.5 21z\"/></svg>",
    "settings": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M31.313 13.313H27.5c-.25-1.063-.563-2.188-1-3.063l2.688-2.75c.125-.125.188-.25.188-.438s-.063-.375-.188-.5l-3.75-3.75a.68.68 0 0 0-.938 0L21.75 5.5c-.875-.438-2-.75-3.063-1V.687a.694.694 0 0 0-.688-.688h-4a.694.694 0 0 0-.688.688V4.5c-1.063.25-2.188.563-3.063 1l-2.75-2.688a.68.68 0 0 0-.938 0l-3.75 3.75a.68.68 0 0 0 0 .938l2.688 2.75c-.438.875-.75 2-1 3.063H.685a.694.694 0 0 0-.688.688v4c0 .375.313.688.688.688h3.813c.25 1.063.563 2.188 1 3.063l-2.688 2.75c-.125.125-.188.25-.188.438s.063.375.188.5l3.75 3.75c.25.25.688.25.938 0l2.75-2.688c.875.438 2 .75 3.063 1v3.813c0 .375.313.688.688.688h4a.694.694 0 0 0 .688-.688v-3.813c1.063-.25 2.188-.563 3.063-1l2.75 2.688c.25.25.688.25.938 0l3.75-3.75a.68.68 0 0 0 0-.938l-2.688-2.75c.438-.875.75-2 1-3.063h3.813a.694.694 0 0 0 .688-.688v-4a.694.694 0 0 0-.688-.688zm-.625 4H27c-.313 0-.563.25-.625.5-.188.75-.688 2.75-1.25 3.75-.188.25-.125.563.063.813l2.625 2.563-2.875 2.875-2.563-2.625c-.25-.188-.563-.25-.813-.063-1 .563-3 1.063-3.75 1.25-.25.063-.5.313-.5.625v3.688h-2.625v-3.688c0-.313-.25-.563-.5-.625-.75-.188-2.75-.688-3.75-1.25-.25-.188-.563-.125-.813.063l-2.563 2.625-2.875-2.875 2.625-2.563c.188-.25.25-.563.063-.813-.563-1-1.063-3-1.25-3.75-.063-.25-.313-.5-.625-.5H1.311v-2.625h3.688c.313 0 .563-.25.625-.5.188-.75.688-2.75 1.25-3.75.188-.25.125-.563-.063-.813L4.186 7.062l2.875-2.875 2.563 2.625c.25.188.563.25.813.063 1-.563 3-1.063 3.688-1.25.313-.063.563-.313.563-.625V1.312h2.625V5c0 .313.25.563.5.625 1.188.313 2.875.75 3.75 1.25.25.188.563.125.813-.063l2.563-2.625 2.875 2.875-2.625 2.563c-.188.25-.25.563-.063.813.563 1 1.063 3 1.25 3.688.063.313.313.563.625.563h3.688zM16 9.313c-3.688 0-6.688 3-6.688 6.688s3 6.688 6.688 6.688c3.688 0 6.688-3 6.688-6.688s-3-6.688-6.688-6.688zm0 12c-2.938 0-5.313-2.375-5.313-5.313s2.375-5.313 5.313-5.313c2.938 0 5.313 2.375 5.313 5.313S18.938 21.313 16 21.313z\"/></svg>",
    "shield": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.63 4.537c-.073-.019-7.399-2.017-9.769-4.39a.532.532 0 0 0-.723 0C8.769 2.52 1.443 4.518 1.37 4.537A.5.5 0 0 0 1 5.02c0 8.569.761 15.405 10.326 18.949L11.5 24l.174-.031C21.239 20.425 22 13.589 22 5.02a.5.5 0 0 0-.37-.483zM11.5 22.966C2.817 19.674 2.023 13.601 2.001 5.4c1.497-.429 7.022-2.109 9.499-4.228 2.477 2.119 8.002 3.798 9.499 4.227-.021 8.202-.816 14.275-9.499 17.567zm-.464-16.223L9.732 10H6.5a.5.5 0 0 0-.332.873l2.626 2.337-.99 3.672a.497.497 0 0 0 .482.63.51.51 0 0 0 .308-.105l2.907-2.267 2.907 2.251a.5.5 0 0 0 .788-.526l-.99-3.651 2.627-2.34A.5.5 0 0 0 16.5 10h-3.232l-1.304-3.257c-.15-.38-.778-.38-.928 0zm1.429 3.943a.5.5 0 0 0 .464.314h2.259l-1.878 1.672a.5.5 0 0 0-.149.504l.681 2.51-2.035-1.576a.498.498 0 0 0-.613.001L9.16 15.697l.682-2.526a.5.5 0 0 0-.15-.504L7.814 11h2.257a.5.5 0 0 0 .464-.314l.965-2.411.965 2.411z\"/></svg>",
    "signal-tower": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12.5 13.382V11.5a.5.5 0 0 0-1 0v1.882l-4.947 9.895A.5.5 0 0 0 7 24h10a.498.498 0 0 0 .447-.723L12.5 13.382zm-.5 1.236l.941 1.882h-1.882L12 14.618zm1.441 2.882l.415.829-1.853 1.239-1.858-1.239.414-.829h2.882zm-2.338 2.669l-2.822 1.887 1.413-2.826 1.409.939zm.901.601L15.349 23h-6.68l3.335-2.23zm.9-.601l1.402-.938 1.405 2.809-2.807-1.871zM12 0C5.383 0 0 5.383 0 12c0 3.102 1.184 6.048 3.332 8.295a.5.5 0 0 0 .723-.691A10.955 10.955 0 0 1 1 12C1 5.935 5.935 1 12 1s11 4.935 11 11c0 2.844-1.085 5.544-3.055 7.604a.5.5 0 0 0 .723.692A11.96 11.96 0 0 0 24 12c0-6.617-5.383-12-12-12zm0 4c-4.411 0-8 3.589-8 8a7.94 7.94 0 0 0 1.502 4.655.5.5 0 1 0 .812-.583A6.948 6.948 0 0 1 5 12c0-3.86 3.141-7 7-7s7 3.14 7 7a6.942 6.942 0 0 1-1.315 4.072.5.5 0 0 0 .812.584A7.946 7.946 0 0 0 20 12c0-4.411-3.589-8-8-8zm3.468 8.622h.023c.263 0 .485-.233.504-.497L16 12c0-2.206-1.794-4-4-4s-4 1.794-4 4l.005.125.503.028-.5.019c.011.272.235.416.506.404.272-.005.486-.303.486-.576 0-1.654 1.346-3 3-3s3 1.346 3 3h.5l-.508.134c-.01.273.202.473.476.488z\"/></svg>",
    "signout": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M18 24.063c-.375 0-.625.25-.625.625l-.063 4.688-16-.063V2.688h16.063v4.688c0 .375.313.688.688.688.375 0 .625-.313.625-.688l.063-5.313a.694.694 0 0 0-.688-.688L.688 1.312c-.188 0-.375.063-.5.188S0 1.813 0 2v28c0 .375.313.688.688.688h17.313c.375 0 .688-.313.688-.625v-5.375c0-.375-.313-.625-.688-.625zm13.938-7.625c-.063-.125-.125-.25-.25-.313l-6.5-6.563c-.25-.25-.688-.25-.938 0s-.25.688 0 .938l5.438 5.5H7.375c-.375 0-.688.313-.688.688s.313.688.688.688l22.438-.063-5.625 5.625c-.25.25-.25.625 0 .938.125.125.313.188.5.188s.313-.063.438-.188l6.688-6.688c.125-.125.188-.313.188-.438s0-.25-.063-.313z\"/></svg>",
    "smiley": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 0C5.383 0 0 5.383 0 12s5.383 12 12 12 12-5.383 12-12S18.617 0 12 0zm0 23C5.935 23 1 18.065 1 12S5.935 1 12 1s11 4.935 11 11-4.935 11-11 11zm7.5-10.5a.5.5 0 0 0-.5.5c0 3.859-3.14 7-7 7s-7-3.141-7-7a.5.5 0 0 0-1 0c0 4.411 3.589 8 8 8s8-3.589 8-8a.5.5 0 0 0-.5-.5zm-14-2A.5.5 0 0 0 6 10c0-.827.673-1.5 1.5-1.5S9 9.173 9 10a.5.5 0 0 0 1 0c0-1.379-1.122-2.5-2.5-2.5S5 8.621 5 10a.5.5 0 0 0 .5.5zm9 0a.5.5 0 0 0 .5-.5c0-.827.673-1.5 1.5-1.5S18 9.173 18 10a.5.5 0 0 0 1 0c0-1.379-1.122-2.5-2.5-2.5S14 8.621 14 10a.5.5 0 0 0 .5.5z\"/></svg>",
    "spinner": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" class=\"uil-default\"><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"translate(0 -40)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(30 124.641 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.08333333333333333s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(60 84.641 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.16666666666666666s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(90 70 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.25s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(120 61.547 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.3333333333333333s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(150 55.359 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.4166666666666667s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(180 50 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.5s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(-150 44.641 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.5833333333333334s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(-120 38.453 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.6666666666666666s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(-90 30 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.75s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(-60 15.359 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.8333333333333334s\" repeatCount=\"indefinite\"/></rect><rect x=\"46.5\" y=\"40\" width=\"7\" height=\"20\" rx=\"5\" ry=\"5\" fill=\"#fefefe\" transform=\"rotate(-30 -24.641 70)\"><animate attributeName=\"opacity\" from=\"1\" to=\"0\" dur=\"1s\" begin=\"0.9166666666666666s\" repeatCount=\"indefinite\"/></rect></svg>",
    "store": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M21.502 10.333V22.5h-19V10.313\"/><path stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M4.502 13.5h8v6h-8zm10 0h5v9h-5zm7-11h-19l-2 4h23zm2 5a3 3 0 0 1-3 3c-.826 0-1.457-.46-2-1-.708 1.125-2.073 2-3.5 2a3.988 3.988 0 0 1-3-1.36 3.983 3.983 0 0 1-3 1.36c-1.427 0-2.792-.875-3.5-2-.542.54-1.174 1-2 1a3 3 0 0 1-3-3v-1h23v1zm-18 2v-3l1-4m5.5 7.646V2.5m6.5 7v-3l-1-4\"/><path d=\"M17.502 18a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1z\"/></svg>",
    "support": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M23.5 10h-.692C21.987 5.548 18.453 2.014 14 1.191V.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v.691C5.547 2.014 2.012 5.548 1.19 10H.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h.69c.823 4.454 4.357 7.988 8.81 8.809v.691a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-.691c4.453-.821 7.986-4.356 8.808-8.809h.692a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5zm-1.708 0h-4.674A5.522 5.522 0 0 0 14 6.882V2.208A10.036 10.036 0 0 1 21.792 10zM12 16.5c-2.481 0-4.5-2.019-4.5-4.5S9.519 7.5 12 7.5s4.5 2.019 4.5 4.5-2.019 4.5-4.5 4.5zM13 1v5.596c-.325-.06-.658-.096-1-.096s-.675.036-1 .096V1h2zm-3 1.208v4.674A5.522 5.522 0 0 0 6.882 10H2.207A10.037 10.037 0 0 1 10 2.208zM1 11h5.596c-.06.325-.096.658-.096 1s.036.675.096 1H1v-2zm1.207 3h4.675A5.522 5.522 0 0 0 10 17.118v4.674A10.032 10.032 0 0 1 2.207 14zM11 23v-5.596c.325.06.658.096 1 .096s.675-.036 1-.096V23h-2zm3-1.208v-4.674A5.522 5.522 0 0 0 17.118 14h4.674A10.03 10.03 0 0 1 14 21.792zM23 13h-5.596c.06-.325.096-.658.096-1s-.036-.675-.096-1H23v2z\"/></svg>",
    "sync": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7.239 9.628a.502.502 0 0 0-.704.063l-2.513 3.01a8.342 8.342 0 0 1 1.197-5.372c1.17-1.899 3.048-3.274 5.153-3.772a7.997 7.997 0 0 1 7.836 2.486.5.5 0 0 0 .748-.663 8.99 8.99 0 0 0-8.815-2.796c-2.361.559-4.465 2.097-5.774 4.221a9.355 9.355 0 0 0-1.399 5.036L1.342 9.419a.501.501 0 0 0-.83.558l2.787 4.151c.088.13.231.212.389.221h.026a.5.5 0 0 0 .384-.18l3.205-3.838a.5.5 0 0 0-.064-.703zm16.676 4.093L21.129 9.57a.504.504 0 0 0-.389-.221.494.494 0 0 0-.291.091l-.029.021-.091.067-3.206 3.837a.502.502 0 0 0 .063.705c.213.177.528.15.704-.064l2.421-2.899c.059 3.685-2.549 7.144-6.26 8.02a7.967 7.967 0 0 1-7.465-2.093.5.5 0 1 0-.701.712 8.96 8.96 0 0 0 8.397 2.355c3.983-.94 6.838-4.535 7.025-8.47l1.777 2.648a.505.505 0 0 0 .694.136.5.5 0 0 0 .137-.694zM12.213 8.85c-.667 0-1.295.26-1.767.731a2.503 2.503 0 0 0 0 3.536c.472.472 1.1.732 1.768.732.667 0 1.295-.26 1.767-.732a2.504 2.504 0 0 0 0-3.537 2.486 2.486 0 0 0-1.768-.73zm1.06 3.56c-.567.566-1.555.565-2.12 0a1.502 1.502 0 0 1 1.061-2.561c.4 0 .776.156 1.06.438a1.504 1.504 0 0 1-.001 2.123z\"/></svg>",
    "tag": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M31.813 19.563L12.438.188A.568.568 0 0 0 12 0H.687c-.188 0-.375.063-.5.188s-.188.313-.188.5v11.313c0 .188.063.313.188.438l19.375 19.375a.677.677 0 0 0 .438.188h.188c.25-.063.375-.25.5-.5l2.5-8.313 8.313-2.5c.25-.125.438-.25.5-.5s0-.5-.188-.625zM22.5 22c-.25.125-.438.25-.5.5l-2.313 7.563L1.312 11.688V1.313h10.375l18.375 18.375zM7.313 4C5.5 4 4 5.5 4 7.313c0 1.875 1.5 3.375 3.313 3.375 1.875 0 3.375-1.5 3.375-3.375C10.688 5.5 9.188 4 7.313 4zm0 5.313c-1.063 0-2-.875-2-2 0-1.063.938-2 2-2 1.125 0 2 .938 2 2 0 1.125-.875 2-2 2z\"/></svg>",
    "terminal": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.5 1.993h-19a2.502 2.502 0 0 0-2.5 2.5v14c0 1.379 1.121 2.5 2.5 2.5h19c1.379 0 2.5-1.121 2.5-2.5v-14c0-1.379-1.121-2.5-2.5-2.5zm-19 1h19c.827 0 1.5.673 1.5 1.5v2.5H1v-2.5c0-.827.673-1.5 1.5-1.5zm19 17h-19c-.827 0-1.5-.673-1.5-1.5v-10.5h22v10.5c0 .827-.673 1.5-1.5 1.5z\"/><circle cx=\"4\" cy=\"4.993\" r=\"1\"/><circle cx=\"7\" cy=\"4.993\" r=\"1\"/><circle cx=\"10\" cy=\"4.993\" r=\"1\"/><path d=\"M5.853 11.14a.5.5 0 0 0-.707.707l2.147 2.147-2.146 2.146a.5.5 0 0 0 .706.707l2.5-2.5a.5.5 0 0 0 0-.707l-2.5-2.5zm9.647 2.853h-4a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1z\"/></svg>",
    "text-vector": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.5 5a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 0-.5.5V2H5V.5a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 .5.5H2v13H.5a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5V21h13v1.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5H21V5h1.5zM19 1h3v3h-3V1zM1 1h3v3H1V1zm3 21H1v-3h3v3zm18 0h-3v-3h3v3zm-2-4h-1.5a.5.5 0 0 0-.5.5V20H5v-1.5a.5.5 0 0 0-.5-.5H3V5h1.5a.5.5 0 0 0 .5-.5V3h13v1.5a.5.5 0 0 0 .5.5H20v13zM16.5 6h-10a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 1 0V7h4v10h-1a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-1V7h4v1.5a.5.5 0 0 0 1 0v-2a.5.5 0 0 0-.5-.5z\"/></svg>",
    "text": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.979 22.5l-7-20.5L2 22.5m2.383-7h9.207M.5 22.5h3.021m10.958 0H17.5m5.001 0L17.903 9.035l-2.36 6.932M16.92 17.5h3.768m.828 5H23.5\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\"/></svg>",
    "ticket": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M22.748 9.358c0-.668.26-1.296.733-1.769a.5.5 0 0 0 0-.707L17.118.518a.514.514 0 0 0-.707 0c-.945.946-2.591.944-3.536 0a.499.499 0 0 0-.707 0L.147 12.539a.5.5 0 0 0 0 .707c.473.473.732 1.101.732 1.768 0 .668-.26 1.296-.732 1.769a.5.5 0 0 0 0 .708l6.364 6.363a.5.5 0 0 0 .707 0c.945-.945 2.59-.945 3.535 0a.503.503 0 0 0 .707 0l12.02-12.022a.5.5 0 0 0 0-.707 2.483 2.483 0 0 1-.732-1.767zm-.304 2.096L11.081 22.817c-1.203-.904-2.987-.904-4.192 0l-5.706-5.706c.452-.601.696-1.33.696-2.097 0-.767-.244-1.495-.696-2.098L12.545 1.555c1.205.904 2.989.905 4.194 0l5.706 5.707a3.468 3.468 0 0 0-.697 2.097c0 .765.244 1.493.696 2.095zm-6.742-6.692c-.94-.94-2.594-.941-3.536 0l-7.777 7.777a2.482 2.482 0 0 0-.73 1.767c0 .67.26 1.298.73 1.768l3.536 3.536a2.48 2.48 0 0 0 1.768.73c.669 0 1.297-.26 1.768-.73l7.778-7.777a2.505 2.505 0 0 0 0-3.536l-3.537-3.535zm2.829 6.364l-7.778 7.777c-.564.565-1.557.564-2.121 0l-3.536-3.536a1.489 1.489 0 0 1-.438-1.061c0-.401.155-.778.438-1.06l7.777-7.777a1.49 1.49 0 0 1 1.061-.438c.402 0 .779.155 1.061.438l3.536 3.535a1.504 1.504 0 0 1 0 2.122zM14.288 7.59a.5.5 0 0 0-.707 0l-6.363 6.364a.5.5 0 0 0 .706.707l6.363-6.364a.5.5 0 0 0 .001-.707zm-.353 3.889l-2.828 2.828a.5.5 0 0 0 .708.707l2.828-2.828a.5.5 0 0 0-.708-.707z\"/></svg>",
    "trash": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M30.688 4H22V.687a.694.694 0 0 0-.688-.688H10.687a.694.694 0 0 0-.688.688V4H1.311c-.375 0-.625.313-.625.688s.25.625.625.625h3.375v26c0 .375.25.688.625.688h21.375c.375 0 .625-.313.625-.688v-26h3.375c.375 0 .625-.25.625-.625S31.061 4 30.686 4zM11.313 1.313h9.375v2.688h-9.375zM26 30.688H6V5.313h20zM10.688 9.313a.694.694 0 0 0-.688.688v15.313c0 .375.313.688.688.688s.625-.313.625-.688V10.001c0-.375-.25-.688-.625-.688zm5.312 0a.694.694 0 0 0-.688.688v15.313c0 .375.313.688.688.688s.688-.313.688-.688V10.001A.694.694 0 0 0 16 9.313zm4.688.687v15.313c0 .375.25.688.625.688s.688-.313.688-.688V10c0-.375-.313-.688-.688-.688s-.625.313-.625.688z\"/></svg>",
    "trophy": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14.972 5H13.28l-.861-1.724c-.17-.339-.725-.339-.894 0L10.663 5H8.972a.5.5 0 0 0-.283.912l1.479 1.019L9.5 8.835a.501.501 0 0 0 .772.565l1.7-1.275 1.7 1.275a.503.503 0 0 0 .581.014.5.5 0 0 0 .201-.545l-.528-1.941 1.35-1.031a.502.502 0 0 0 .17-.558.502.502 0 0 0-.474-.339zm-1.866 2.726l-.835-.626a.496.496 0 0 0-.6 0l-.684.512.25-.711a.5.5 0 0 0-.189-.578L10.58 6h.392a.5.5 0 0 0 .447-.276l.553-1.105.553 1.105a.499.499 0 0 0 .447.276h.522l-.442.338a.502.502 0 0 0-.179.529l.233.859zm10.898-4.974l-.002-.252a.5.5 0 0 0-.5-.5h-2.027c.018-.482.032-.974.032-1.5a.5.5 0 0 0-.5-.5h-18a.5.5 0 0 0-.5.5c0 .526.014 1.018.032 1.5H.507a.5.5 0 0 0-.5.5l-.003.271C-.013 4.139-.059 7.772 1.87 9.725c.772.781 1.774 1.19 2.966 1.25 1.058 1.52 2.308 2.278 3.384 2.924 1.356.815 2.252 1.354 2.252 3.092C10.412 20.33 8.91 21 6.507 21a.5.5 0 0 0-.5.5v2a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 0-.5-.5c-2.866 0-4.035-1.159-4.035-4 0-1.753.907-2.298 2.28-3.125 1.075-.646 2.325-1.402 3.386-2.9 1.197-.06 2.204-.47 2.98-1.254 1.942-1.962 1.902-5.599 1.886-6.969zM2.582 9.023C1.033 7.455.989 4.386 1.002 3h1.592c.208 3.163.809 5.342 1.601 6.892-.631-.14-1.169-.42-1.613-.869zm12.655 3.996c-1.422.855-2.766 1.663-2.766 3.981 0 3.241 1.444 4.837 4.535 4.988V23h-10v-1.012c3.023-.149 4.406-1.703 4.465-4.988 0-2.312-1.329-3.111-2.736-3.958-1.038-.624-2.187-1.324-3.145-2.732l-.055-.085C4.411 8.525 3.564 5.815 3.51 1h16.994c-.006.49-.023.949-.045 1.397l-.021.103.015.075c-.404 7.55-3.053 9.143-5.216 10.444zm4.552-3.128c.806-1.548 1.418-3.726 1.63-6.891h1.587c.011 1.397-.046 4.448-1.6 6.019-.446.451-.985.731-1.617.872z\"/></svg>",
    "twitter": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z\"/></svg>",
    "user-circle": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 0C5.383 0 0 5.383 0 12c0 3.18 1.232 6.177 3.47 8.438A11.913 11.913 0 0 0 12 24c3.234 0 6.268-1.269 8.542-3.574A11.924 11.924 0 0 0 24 12c0-6.617-5.383-12-12-12zM4.655 20.17c1.029-.563 2.533-1.111 4.002-1.644.514-.186 1.027-.372 1.52-.559a.5.5 0 0 0 .323-.468V15a.511.511 0 0 0-.335-.472C10.118 14.511 9 14.072 9 12a.48.48 0 0 0-.482-.494c-.047-.032-.138-.218-.138-.506s.091-.474.12-.5A.5.5 0 0 0 9 10c0-.125-.037-.256-.118-.544-.147-.523-.537-1.913-.194-2.366.038-.051.245-.194.714-.1.26.055.518-.11.583-.369.163-.649 1.326-1.121 2.765-1.121s2.602.472 2.765 1.121c.229.917-.178 2.188-.373 2.799-.098.305-.142.443-.142.58a.48.48 0 0 0 .482.494c.046.032.137.218.137.506s-.091.474-.12.5a.5.5 0 0 0-.5.5c0 2.072-1.118 2.511-1.158 2.526A.5.5 0 0 0 13.5 15v2.5a.5.5 0 0 0 .324.468c.543.204 1.086.399 1.614.591 1.51.546 2.943 1.067 3.919 1.599A10.901 10.901 0 0 1 12 23a10.908 10.908 0 0 1-7.345-2.83zm15.453-.739c-1.047-.625-2.583-1.181-4.33-1.812l-1.278-.466v-1.848c.501-.309 1.384-1.108 1.49-2.936.386-.226.63-.727.63-1.37 0-.579-.198-1.043-.52-1.294.243-.757.681-2.144.385-3.327C16.138 4.992 14.256 4.5 12.75 4.5c-1.342 0-2.982.391-3.569 1.456-.707-.042-1.095.273-1.29.53-.635.838-.216 2.368.02 3.211-.329.249-.531.718-.531 1.303 0 .643.244 1.144.63 1.37.106 1.828.989 2.627 1.49 2.936v1.848l-1.184.433c-1.624.589-3.299 1.196-4.413 1.858A10.928 10.928 0 0 1 1 12C1 5.935 5.935 1 12 1s11 4.935 11 11c0 2.774-1.024 5.397-2.892 7.431z\"/></svg>",
    "user-group": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.5 9.993h.793l2.853 2.853a.5.5 0 0 0 .354.147l.191-.038a.5.5 0 0 0 .309-.462v-2.5h6.5c.827 0 1.5-.673 1.5-1.5v-7c0-.827-.673-1.5-1.5-1.5h-11c-.827 0-1.5.673-1.5 1.5v7c0 .827.673 1.5 1.5 1.5zm-.5-8.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-7a.5.5 0 0 0-.5.5v1.793L7.853 9.14a.496.496 0 0 0-.353-.147h-1a.5.5 0 0 1-.5-.5v-7zm17.998 18.866a4.503 4.503 0 0 0-2.697-3.967 2.986 2.986 0 0 0 1.2-2.384c0-1.654-1.346-3-3-3s-3 1.346-3 3c0 .975.475 1.834 1.198 2.383a4.493 4.493 0 0 0-2.666 3.808 4.487 4.487 0 0 0-1.231-.806 2.987 2.987 0 0 0 1.2-2.385c0-1.654-1.346-3-3-3s-3 1.346-3 3c0 .975.475 1.835 1.198 2.383a4.5 4.5 0 0 0-1.221.807 4.497 4.497 0 0 0-2.676-3.806 2.986 2.986 0 0 0 1.2-2.384c0-1.654-1.346-3-3-3s-3 1.346-3 3A2.99 2.99 0 0 0 2.7 16.391 4.497 4.497 0 0 0 0 20.507a.5.5 0 0 0 .5.5h7.762a4.474 4.474 0 0 0-.762 2.5.5.5 0 0 0 .5.5h8.02a.5.5 0 0 0 .5-.5l-.022-.148a4.461 4.461 0 0 0-.768-2.352h7.79a.5.5 0 0 0 .5-.5l-.022-.148zM17.5 14.007c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2zm-7.5 3c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2zm-7.5-3c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2zm-1.464 6c.243-1.694 1.704-3 3.464-3s3.221 1.306 3.464 3H1.036zm7.5 3c.243-1.694 1.704-3 3.464-3s3.221 1.306 3.464 3H8.536zm7.5-3c.243-1.694 1.704-3 3.464-3s3.221 1.306 3.464 3h-6.928zM8.5 2.993h6.969a.5.5 0 0 0 0-1H8.5a.5.5 0 0 0 0 1zm0 2h6.969a.5.5 0 0 0 0-1H8.5a.5.5 0 0 0 0 1zm0 2h6.969a.5.5 0 0 0 0-1H8.5a.5.5 0 0 0 0 1z\"/></svg>",
    "user-group2": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M13.338 14.604L12 14.118v-1.923c.339-.336.913-1.15.991-2.837.459-.215.759-.736.759-1.392 0-.564-.222-1.028-.576-1.284.325-.645.833-1.74.561-2.836-.332-1.334-2.253-1.808-3.798-1.808-1.368 0-3.032.372-3.624 1.383-.732-.036-1.108.26-1.304.513-.596.769-.253 2.095-.07 2.808L5 6.964v2c0 1.89 1.162 2.931 2 3.337v1.817l-1.23.448c-2.607.939-4.858 1.75-5.271 2.997C.006 19.051 0 22.36 0 22.5a.5.5 0 0 0 .5.5h18a.5.5 0 0 0 .5-.5c0-.14-.006-3.449-.499-4.938-.415-1.25-2.51-2.004-5.163-2.958zM1.007 22c.02-.971.104-3.104.441-4.124.26-.785 2.7-1.664 4.661-2.37.527-.19 1.058-.381 1.569-.575A.5.5 0 0 0 8 14.464v-2.5a.505.505 0 0 0-.349-.477C7.583 11.465 6 10.931 6 8.964v-2c0-.115-.031-.234-.092-.472-.111-.428-.404-1.564-.108-1.946.038-.049.248-.188.727-.092a.498.498 0 0 0 .584-.37c.148-.598 1.364-1.049 2.827-1.049s2.679.451 2.827 1.049c.199.802-.281 1.749-.54 2.257-.145.286-.225.443-.225.623a.5.5 0 0 0 .5.5c.172 0 .25.292.25.5 0 .207-.078.5-.25.5a.5.5 0 0 0-.5.5c0 2.009-.764 2.575-.763 2.575a.497.497 0 0 0-.237.425v2.5a.5.5 0 0 0 .324.468c.568.214 1.131.417 1.676.613 2.109.759 4.291 1.544 4.552 2.332.337 1.019.421 3.152.441 4.124H1.007zm22.494-4.438c-.388-1.167-2.337-2.352-6.501-3.943v-.924c.339-.337.913-1.15.991-2.837.192-.09.358-.235.487-.429.175-.263.271-.606.271-.965 0-.572-.228-1.041-.589-1.294.322-.694.85-1.899.575-3.01-.173-.693-.962-1.454-1.877-1.809-.893-.346-1.785-.27-2.51.215a.5.5 0 1 0 .554.832c.574-.382 1.185-.273 1.595-.115.705.273 1.197.834 1.267 1.117.203.815-.288 1.868-.55 2.433-.142.307-.214.461-.214.631a.5.5 0 0 0 .5.5c.172 0 .25.292.25.5a.77.77 0 0 1-.104.41c-.055.083-.103.09-.146.09a.5.5 0 0 0-.5.5c0 2.009-.764 2.575-.763 2.575a.497.497 0 0 0-.237.425v1.5a.5.5 0 0 0 .324.468c3.856 1.454 5.952 2.613 6.228 3.445.337 1.019.421 3.152.441 4.124H21A.5.5 0 0 0 21 23h2.5a.5.5 0 0 0 .5-.5c0-.14-.006-3.449-.499-4.938z\"/></svg>",
    "window-app": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.5 0h-19A2.502 2.502 0 0 0 0 2.5v19C0 22.879 1.121 24 2.5 24h19c1.379 0 2.5-1.121 2.5-2.5v-19C24 1.121 22.879 0 21.5 0zm-19 1h19c.827 0 1.5.673 1.5 1.5V5H1V2.5C1 1.673 1.673 1 2.5 1zM1 21.5V6h7v17H2.5c-.827 0-1.5-.673-1.5-1.5zM21.5 23H9V6h14v15.5c0 .827-.673 1.5-1.5 1.5z\"/><circle cx=\"4\" cy=\"3\" r=\"1\"/><circle cx=\"7\" cy=\"3\" r=\"1\"/><circle cx=\"10\" cy=\"3\" r=\"1\"/><path d=\"M20.5 7h-9a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5zm-.5 5h-8V8h8v4zm.5 3h-9a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5zm-.5 5h-8v-4h8v4zM2.52 8H4.5a.5.5 0 0 0 0-1H2.52a.5.5 0 0 0 0 1zm1.501 1.5a.5.5 0 0 0 .5.5H6.5a.5.5 0 0 0 0-1H4.521a.5.5 0 0 0-.5.5zM6.5 11H4.521a.5.5 0 0 0 0 1H6.5a.5.5 0 0 0 0-1zm0 2H4.521a.5.5 0 0 0 0 1H6.5a.5.5 0 0 0 0-1zM5 15.5a.5.5 0 0 0-.5-.5H2.52a.5.5 0 0 0 0 1H4.5a.5.5 0 0 0 .5-.5zM6.5 17H4.521a.5.5 0 0 0 0 1H6.5a.5.5 0 0 0 0-1zm0 2H4.521a.5.5 0 0 0 0 1H6.5a.5.5 0 0 0 0-1z\"/></svg>",
    "window-pulse": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.5 1.993h-19a2.502 2.502 0 0 0-2.5 2.5v14c0 1.379 1.121 2.5 2.5 2.5h19c1.379 0 2.5-1.121 2.5-2.5v-14c0-1.379-1.121-2.5-2.5-2.5zm-20.5 6h22v6h-4.5a.501.501 0 0 0-.416.223l-1.488 2.232-2.636-6.152a.501.501 0 0 0-.876-.08l-3.473 5.209-1.647-4.117a.495.495 0 0 0-.412-.311.496.496 0 0 0-.468.22l-1.852 2.777H1V7.993zm1.5-5h19c.827 0 1.5.673 1.5 1.5v2.5H1v-2.5c0-.827.673-1.5 1.5-1.5zm19 17h-19c-.827 0-1.5-.673-1.5-1.5v-3.5h4.5a.501.501 0 0 0 .416-.223l1.473-2.209 1.647 4.117a.498.498 0 0 0 .88.092l3.488-5.232 2.636 6.152a.501.501 0 0 0 .414.301l.046.002a.5.5 0 0 0 .416-.223l1.852-2.777H23v3.5c0 .827-.673 1.5-1.5 1.5z\"/><circle cx=\"4\" cy=\"4.993\" r=\"1\"/><circle cx=\"7\" cy=\"4.993\" r=\"1\"/><circle cx=\"10\" cy=\"4.993\" r=\"1\"/></svg>",
    "wrench-double": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M17.992 15.165L14.829 12l3.164-3.164a4.553 4.553 0 0 0 4.617-1.082c1.308-1.307 1.676-3.171.959-4.863a.5.5 0 0 0-.821-.152l-1.766 1.835h-1.408V3.012l1.769-1.768a.498.498 0 0 0-.159-.814c-1.664-.703-3.661-.318-4.939.961a4.481 4.481 0 0 0-1.083 4.616L12 9.171 8.836 6.008a4.476 4.476 0 0 0-1.082-4.616C6.446.083 4.584-.286 2.891.43a.5.5 0 0 0-.152.821l1.835 1.767v1.557H3.018L1.251 2.739a.5.5 0 0 0-.821.152 4.45 4.45 0 0 0 .96 4.9 4.474 4.474 0 0 0 4.618 1.065l3.158 3.149-3.159 3.16a4.552 4.552 0 0 0-4.617 1.081 4.48 4.48 0 0 0-.96 4.937.502.502 0 0 0 .814.159l1.768-1.767h1.563v1.408L2.739 22.75a.498.498 0 0 0 .152.82 4.437 4.437 0 0 0 4.899-.961c1.207-1.206 1.601-2.987 1.045-4.618L12 14.828l3.164 3.165a4.479 4.479 0 0 0 1.082 4.617 4.479 4.479 0 0 0 4.938.961.498.498 0 0 0 .159-.814l-1.769-1.767v-1.415h1.414l1.768 1.767a.502.502 0 0 0 .814-.159 4.484 4.484 0 0 0-.96-4.937 4.479 4.479 0 0 0-4.618-1.081zM6.486 7.92a.498.498 0 0 0-.548-.106c-1.329.562-2.837.275-3.84-.729a3.459 3.459 0 0 1-.973-3.034l1.319 1.371a.5.5 0 0 0 .36.153h2.27a.5.5 0 0 0 .5-.5v-2.27a.498.498 0 0 0-.153-.36L4.049 1.123c1.082-.189 2.18.156 2.998.976a3.482 3.482 0 0 1 .746 3.839.5.5 0 0 0 .107.548l3.392 3.392-1.419 1.42L6.486 7.92zm1.307 10.142c.566 1.337.288 2.845-.709 3.841a3.482 3.482 0 0 1-3.034.973l1.371-1.321a.498.498 0 0 0 .153-.36v-2.12a.5.5 0 0 0-.5-.5h-2.27a.496.496 0 0 0-.353.147l-1.324 1.323a3.481 3.481 0 0 1 .97-3.091 3.541 3.541 0 0 1 3.84-.746c.188.08.404.038.548-.107l9.611-9.614a.5.5 0 0 0 .107-.548 3.485 3.485 0 0 1 .748-3.839 3.53 3.53 0 0 1 3.092-.97L18.72 2.453a.499.499 0 0 0-.146.353v2.27a.5.5 0 0 0 .5.5h2.121a.498.498 0 0 0 .36-.153l1.32-1.372c.189 1.082-.155 2.179-.973 2.998a3.544 3.544 0 0 1-3.84.747.498.498 0 0 0-.548.107L7.9 17.514a.5.5 0 0 0-.107.548zm15.08 1.982l-1.324-1.323a.5.5 0 0 0-.354-.147h-2.121a.5.5 0 0 0-.5.5v2.122c0 .133.053.26.146.354l1.324 1.324a3.486 3.486 0 0 1-3.092-.97 3.485 3.485 0 0 1-.747-3.84.498.498 0 0 0-.107-.548l-3.393-3.394 1.415-1.415 3.392 3.394a.497.497 0 0 0 .548.107 3.482 3.482 0 0 1 3.84.746 3.478 3.478 0 0 1 .973 3.09z\"/></svg>",
    "zap": "<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M20.444 9.271A.496.496 0 0 0 20 9h-7.377L14.488.608a.5.5 0 0 0-.895-.399l-10 14A.498.498 0 0 0 4 15h7.377l-1.865 8.392a.5.5 0 0 0 .285.565L10 24a.502.502 0 0 0 .407-.209l10-14a.5.5 0 0 0 .037-.52zM11.021 21.21l1.467-6.602A.498.498 0 0 0 12 14H4.972l8.007-11.21-1.467 6.602A.498.498 0 0 0 12 10h7.028l-8.007 11.21z\"/></svg>"
  };
});
define("ghost-admin/templates/-contributors", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "G8WsjhtZ", "block": "{\"statements\":[[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/JohnONolan\"],[15,\"title\",\"JohnONolan\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/JohnONolan-47041b80c35c6341b9b929b03139aecc.jpeg\"],[15,\"alt\",\"JohnONolan\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/ErisDS\"],[15,\"title\",\"ErisDS\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/ErisDS-c958ccb9e3597320dee745a42f478569.jpeg\"],[15,\"alt\",\"ErisDS\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/sebgie\"],[15,\"title\",\"sebgie\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/sebgie-0fb02df00ee7834dbcc8beba84aec81e.png\"],[15,\"alt\",\"sebgie\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/frantzypants\"],[15,\"title\",\"frantzypants\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/frantzypants-637b03f85dff89700a661fde79daea5c.jpeg\"],[15,\"alt\",\"frantzypants\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/cobbspur\"],[15,\"title\",\"cobbspur\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/cobbspur-07ded67009757d12517621fc856eba62.jpeg\"],[15,\"alt\",\"cobbspur\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/kevinansfield\"],[15,\"title\",\"kevinansfield\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/kevinansfield-925606c55bc2f3f2f05c0fa58b953ad1.jpeg\"],[15,\"alt\",\"kevinansfield\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/GeorginaLusby\"],[15,\"title\",\"GeorginaLusby\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/GeorginaLusby-6cea5defddee3c4ea7320e580521e832.jpeg\"],[15,\"alt\",\"GeorginaLusby\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/AileenCGN\"],[15,\"title\",\"AileenCGN\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/AileenCGN-bf8b9ffbb34c0fd93beb8136af07771b.jpeg\"],[15,\"alt\",\"AileenCGN\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/kirrg001\"],[15,\"title\",\"kirrg001\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/kirrg001-79823418f2ca21e81719653f0286f95b.jpeg\"],[15,\"alt\",\"kirrg001\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/disordinary\"],[15,\"title\",\"disordinary\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/disordinary-b9997e5debb59b7aadc79ba90955b662.jpeg\"],[15,\"alt\",\"disordinary\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/acburdine\"],[15,\"title\",\"acburdine\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/acburdine-d9777fe2601dc215afb6723315829c89.jpeg\"],[15,\"alt\",\"acburdine\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/dbalders\"],[15,\"title\",\"dbalders\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/dbalders-452347a406c2ca23657daea9100878f3.jpeg\"],[15,\"alt\",\"dbalders\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/felixrieseberg\"],[15,\"title\",\"felixrieseberg\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/felixrieseberg-ecf29e8eadc58fab999c507049f898cf.jpeg\"],[15,\"alt\",\"felixrieseberg\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/jaswilli\"],[15,\"title\",\"jaswilli\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/jaswilli-8cc9a8d2539ca03239d113dfb25ff5c2.jpeg\"],[15,\"alt\",\"jaswilli\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/halfdan\"],[15,\"title\",\"halfdan\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/halfdan-00d6783e5fba2900ee1380939297d8ee.jpeg\"],[15,\"alt\",\"halfdan\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/kevinkucharczyk\"],[15,\"title\",\"kevinkucharczyk\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/kevinkucharczyk-3c7dfe2a103a83737b9d5ee8e19d67f8.jpeg\"],[15,\"alt\",\"kevinkucharczyk\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/mixonic\"],[15,\"title\",\"mixonic\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/mixonic-1ff87736dd02cfa080ae109b45131aa6.png\"],[15,\"alt\",\"mixonic\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/rwjblue\"],[15,\"title\",\"rwjblue\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/rwjblue-5c7cc009cda45baca2d45f0d1ed19e48.jpeg\"],[15,\"alt\",\"rwjblue\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/tgriesser\"],[15,\"title\",\"tgriesser\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/tgriesser-d871cbf74a871c0fb6d855e76a893f7e.png\"],[15,\"alt\",\"tgriesser\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"article\",[]],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/bnookala\"],[15,\"title\",\"bnookala\"],[13],[0,\"\\n        \"],[11,\"img\",[]],[15,\"src\",\"assets/img/contributors/bnookala-5896fcdd2f477495323e420efe890657.jpeg\"],[15,\"alt\",\"bnookala\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-contributors.hbs" } });
});
define("ghost-admin/templates/-user-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MSl/JcRs", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"apps-grid-cell\"],[13],[0,\"\\n\"],[6,[\"link-to\"],[\"team.user\",[28,[\"user\",\"slug\"]]],[[\"data-test-user-id\"],[[28,[\"user\",\"id\"]]]],{\"statements\":[[0,\"    \"],[11,\"article\",[]],[15,\"class\",\"apps-card-app\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"user-list-item-figure\"],[16,\"style\",[28,[\"component\",\"userImageBackground\"]],null],[13],[0,\"\\n                \"],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Photo of \"],[1,[28,[\"user\",\"name\"]],false],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[13],[1,[28,[\"user\",\"name\"]],false],[14],[0,\"\\n                \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[13],[0,\"Last seen: \"],[1,[28,[\"component\",\"lastLoginUTC\"]],false],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-card-right\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-configured\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"user\",\"isLocked\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"span\",[]],[15,\"class\",\"gh-badge author\"],[13],[0,\"Locked\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[6,[\"each\"],[[28,[\"user\",\"roles\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[16,\"class\",[34,[\"gh-badge \",[28,[\"role\",\"lowerCaseName\"]]]]],[15,\"data-test-role-name\",\"\"],[13],[1,[28,[\"role\",\"name\"]],false],[14],[0,\"\\n\"]],\"locals\":[\"role\"]},null]],\"locals\":[]},null],[0,\"                \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-user-list-item.hbs" } });
});
define("ghost-admin/templates/about", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VPq+XS3w", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas js-settings-content\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"ghost-logo\"],[[\"class\",\"alt\"],[\"gh-logo\",\"Ghost\"]]],false],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-upgrade-notification\"]],false],[0,\"\\n\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-env-details\"],[13],[0,\"\\n            \"],[11,\"ul\",[]],[15,\"class\",\"gh-env-list\"],[13],[0,\"\\n                \"],[11,\"li\",[]],[15,\"class\",\"gh-env-list-version\"],[13],[11,\"strong\",[]],[13],[0,\"Version\"],[14],[0,\" \"],[1,[28,[\"model\",\"version\"]],false],[14],[0,\"\\n                \"],[11,\"li\",[]],[13],[11,\"strong\",[]],[13],[0,\"Environment\"],[14],[0,\" \"],[1,[28,[\"model\",\"environment\"]],false],[14],[0,\"\\n                \"],[11,\"li\",[]],[15,\"class\",\"gh-env-list-database-type\"],[13],[11,\"strong\",[]],[13],[0,\"Database\"],[14],[0,\" \"],[1,[28,[\"model\",\"database\"]],false],[14],[0,\"\\n                \"],[11,\"li\",[]],[13],[11,\"strong\",[]],[13],[0,\"Mail\"],[14],[0,\" \"],[6,[\"if\"],[[28,[\"model\",\"mail\"]]],null,{\"statements\":[[1,[28,[\"model\",\"mail\"]],false]],\"locals\":[]},{\"statements\":[[0,\"Native\"]],\"locals\":[]}],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-env-help\"],[13],[0,\"\\n                \"],[11,\"a\",[]],[15,\"class\",\"gh-btn\"],[15,\"href\",\"https://help.ghost.org\"],[15,\"target\",\"_blank\"],[13],[11,\"span\",[]],[13],[0,\"User Documentation\"],[14],[14],[0,\"\\n                \"],[11,\"a\",[]],[15,\"class\",\"gh-btn\"],[15,\"href\",\"https://slack.ghost.org/\"],[15,\"target\",\"_blank\"],[13],[11,\"span\",[]],[13],[0,\"Get Help With Ghost\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-credits\"],[13],[0,\"\\n            \"],[11,\"h2\",[]],[13],[0,\"The People Who Made it Possible\"],[14],[0,\"\\n\\n            \"],[11,\"section\",[]],[15,\"class\",\"gh-contributors\"],[13],[0,\"\\n                \"],[19,\"contributors\"],[0,\"\\n            \"],[14],[0,\"\\n\\n            \"],[11,\"p\",[]],[13],[0,\"Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.\"],[14],[0,\"\\n\\n            \"],[11,\"a\",[]],[15,\"class\",\"gh-btn gh-btn-blue\"],[15,\"href\",\"https://ghost.org/developers/\"],[15,\"target\",\"_blank\"],[13],[11,\"span\",[]],[13],[0,\"Find out how you can get involved\"],[14],[14],[0,\"\\n\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"footer\",[]],[15,\"class\",\"gh-copyright-info\"],[13],[0,\"\\n            Copyright 2013 – \"],[1,[26,[\"copyrightYear\"]],false],[0,\" Ghost Foundation Ltd, released under the \"],[11,\"a\",[]],[15,\"href\",\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\"],[15,\"target\",\"_blank\"],[13],[0,\"MIT license\"],[14],[0,\".\\n            \"],[11,\"br\",[]],[13],[14],[0,\"\\n            \"],[11,\"a\",[]],[15,\"href\",\"https://ghost.org/\"],[15,\"target\",\"_blank\"],[13],[0,\"Ghost\"],[14],[0,\" is a registered trademark of \"],[11,\"a\",[]],[15,\"href\",\"https://ghost.org/trademark/\"],[15,\"target\",\"_blank\"],[13],[0,\"Ghost Foundation Ltd\"],[14],[0,\".\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/about.hbs" } });
});
define("ghost-admin/templates/application", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GkbTkaBb", "block": "{\"statements\":[[6,[\"gh-app\"],null,[[\"showSettingsMenu\"],[[28,[\"showSettingsMenu\"]]]],{\"statements\":[[0,\"    \"],[6,[\"gh-skip-link\"],null,[[\"anchor\"],[\".gh-main\"]],{\"statements\":[[0,\"Skip to main content\"]],\"locals\":[]},null],[0,\"\\n\\n    \"],[1,[33,[\"gh-alerts\"],null,[[\"notify\"],[\"topNotificationChange\"]]],false],[0,\"\\n\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-viewport \",[33,[\"if\"],[[28,[\"autoNav\"]],\"gh-autonav\"],null],\" \",[33,[\"if\"],[[28,[\"showSettingsMenu\"]],\"settings-menu-expanded\"],null],\" \",[33,[\"if\"],[[28,[\"showMobileMenu\"]],\"mobile-menu-expanded\"],null]]]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showNavMenu\"]]],null,{\"statements\":[[0,\"            \"],[1,[33,[\"gh-nav-menu\"],null,[[\"open\",\"icon\",\"toggleMaximise\",\"openAutoNav\",\"showMarkdownHelp\",\"closeMobileMenu\"],[[28,[\"autoNavOpen\"]],[28,[\"settings\",\"settledIcon\"]],\"toggleAutoNav\",\"openAutoNav\",\"toggleMarkdownHelpModal\",\"closeMobileMenu\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-main\"],null,[[\"onMouseEnter\",\"data-notification-count\"],[\"closeAutoNav\",[28,[\"topNotificationCount\"]]]],{\"statements\":[[0,\"            \"],[1,[26,[\"outlet\"]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\\n        \"],[1,[26,[\"gh-notifications\"]],false],[0,\"\\n\\n        \"],[1,[33,[\"gh-content-cover\"],null,[[\"onClick\",\"onMouseEnter\"],[\"closeMenus\",\"closeAutoNav\"]]],false],[0,\"\\n\\n        \"],[1,[33,[\"gh-mobile-nav-bar\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]]],false],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showMarkdownHelpModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"markdown-help\"],[[\"close\",\"modifier\"],[[33,[\"route-action\"],[\"toggleMarkdownHelpModal\"],null],\"wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[1,[26,[\"ember-load-remover\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/application.hbs" } });
});
define("ghost-admin/templates/components/gh-activating-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/XfmtdXL", "block": "{\"statements\":[[6,[\"link-to\"],[[28,[\"route\"]]],[[\"alternateActive\",\"class\"],[[33,[\"action\"],[[28,[null]],\"setActive\"],null],[33,[\"concat\"],[[33,[\"if\"],[[28,[\"linkClasses\"]],[33,[\"-normalize-class\"],[\"linkClasses\",[28,[\"linkClasses\"]]],null]],null],\" \"],null]]],{\"statements\":[[1,[26,[\"title\"]],false],[18,\"default\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-activating-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-alert", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "DM7DQKFS", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-alert-content\"],[13],[0,\"\\n    \"],[1,[28,[\"message\",\"message\"]],false],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"button\",[]],[15,\"class\",\"gh-alert-close\"],[5,[\"action\"],[[28,[null]],\"closeNotification\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alert.hbs" } });
});
define("ghost-admin/templates/components/gh-alerts", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RPN7WPSx", "block": "{\"statements\":[[6,[\"each\"],[[28,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-alert\"],null,[[\"message\"],[[28,[\"message\"]]]]],false],[0,\"\\n\"]],\"locals\":[\"message\"]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alerts.hbs" } });
});
define("ghost-admin/templates/components/gh-app", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "byda06Fu", "block": "{\"statements\":[[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-app.hbs" } });
});
define("ghost-admin/templates/components/gh-blog-url", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yMhTAUjO", "block": "{\"statements\":[[1,[28,[\"config\",\"blogUrl\"]],true]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-blog-url.hbs" } });
});
define("ghost-admin/templates/components/gh-date-time-picker", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "asFOf2LX", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-date-time-picker\"],[13],[0,\"\\n\"],[6,[\"power-datepicker\"],null,[[\"selected\",\"onSelect\",\"renderInPlace\",\"disabled\"],[[28,[\"_date\"]],[33,[\"action\"],[[28,[null]],\"setDate\"],[[\"value\"],[\"date\"]]],true,[28,[\"disabled\"]]]],{\"statements\":[[6,[\"component\"],[[28,[\"dp\",\"trigger\"]]],[[\"tabindex\",\"data-test-date-time-picker-datepicker\"],[\"-1\",true]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-date-time-picker-date \",[33,[\"if\"],[[28,[\"dateError\"]],\"error\"],null]]]],[13],[0,\"\\n                \"],[11,\"input\",[]],[15,\"type\",\"text\"],[15,\"readonly\",\"\"],[16,\"value\",[33,[\"moment-format\"],[[28,[\"_date\"]],\"MM/DD/YYYY\"],null],null],[16,\"disabled\",[26,[\"disabled\"]],null],[15,\"data-test-date-time-picker-date-input\",\"\"],[13],[14],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"calendar\"],null],false],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"component\"],[[28,[\"dp\",\"content\"]]],[[\"class\"],[\"dropdown-menu\"]],{\"statements\":[[0,\"            \"],[1,[28,[\"dp\",\"nav\"]],false],[0,\"\\n            \"],[1,[33,[\"component\"],[[28,[\"dp\",\"days\"]]],[[\"minDate\",\"maxDate\",\"weekdayFormat\"],[[28,[\"_minDate\"]],[28,[\"_maxDate\"]],\"min\"]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[\"dp\"]},null],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-date-time-picker-time \",[33,[\"if\"],[[28,[\"hasError\"]],\"error\"],null]]]],[13],[0,\"\\n        \"],[1,[33,[\"one-way-input\"],[[28,[\"_time\"]]],[[\"update\",\"focusOut\",\"disabled\",\"data-test-date-time-picker-time-input\"],[[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"_time\"]]],null]],null],[33,[\"action\"],[[28,[null]],\"setTime\",[28,[\"_time\"]]],null],[28,[\"disabled\"]],true]]],false],[0,\"\\n        \"],[11,\"small\",[]],[15,\"class\",\"gh-date-time-picker-timezone\"],[13],[0,\"(\"],[1,[26,[\"timezone\"]],false],[0,\")\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"hasError\"]]],null,{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"gh-date-time-picker-error\"],[15,\"data-test-date-time-picker-error\",\"\"],[13],[1,[26,[\"dateError\"]],false],[1,[26,[\"timeError\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-date-time-picker.hbs" } });
});
define("ghost-admin/templates/components/gh-datetime-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "k5Sg+r+J", "block": "{\"statements\":[[1,[33,[\"gh-input\"],[[28,[\"datetime\"]]],[[\"id\",\"class\",\"name\",\"stopEnterKeyDownPropagation\",\"update\"],[[28,[\"inputId\"]],[28,[\"inputClass\"]],[28,[\"inputName\"]],\"true\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"datetime\"]]],null]],null]]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-datetime-input.hbs" } });
});
define("ghost-admin/templates/components/gh-download-count", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "eRKeWrnX", "block": "{\"statements\":[[6,[\"if\"],[[29,\"default\"]],null,{\"statements\":[[0,\"    \"],[18,\"default\",[[28,[\"count\"]]]],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[1,[26,[\"count\"]],false],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-download-count.hbs" } });
});
define("ghost-admin/templates/components/gh-editor-post-status", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "oGivd+Il", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"_isSaving\"]]],null,{\"statements\":[[0,\"    Saving...\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"isPublished\"]]],null,{\"statements\":[[0,\"    Published\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"isScheduled\"]]],null,{\"statements\":[[0,\"    Scheduled\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"isNew\"]]],null,{\"statements\":[[0,\"    New\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    Draft\\n\"]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-editor-post-status.hbs" } });
});
define("ghost-admin/templates/components/gh-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ZlvoLRSH", "block": "{\"statements\":[[18,\"default\",[[33,[\"hash\"],null,[[\"headerClass\",\"isDraggedOver\",\"isFullScreen\",\"droppedFiles\",\"uploadedImageUrls\",\"imageMimeTypes\",\"imageExtensions\",\"toggleFullScreen\",\"togglePreview\",\"toggleSplitScreen\",\"uploadComplete\",\"uploadCancelled\",\"uploadImages\"],[[28,[\"headerClass\"]],[28,[\"isDraggedOver\"]],[28,[\"isFullScreen\"]],[28,[\"droppedFiles\"]],[28,[\"uploadedImageUrls\"]],[28,[\"imageMimeTypes\"]],[28,[\"imageExtensions\"]],[33,[\"action\"],[[28,[null]],\"toggleFullScreen\"],null],[33,[\"action\"],[[28,[null]],\"togglePreview\"],null],[33,[\"action\"],[[28,[null]],\"toggleSplitScreen\"],null],[33,[\"action\"],[[28,[null]],\"uploadComplete\"],null],[33,[\"action\"],[[28,[null]],\"uploadCancelled\"],null],[33,[\"action\"],[[28,[null]],\"uploadImages\"],null]]]]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-error-message", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wyEcTvWV", "block": "{\"statements\":[[1,[26,[\"message\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-error-message.hbs" } });
});
define("ghost-admin/templates/components/gh-feature-flag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "liWyZGT0", "block": "{\"statements\":[[1,[33,[\"one-way-checkbox\"],[[28,[\"value\"]]],[[\"id\",\"name\",\"update\"],[[28,[\"for\"]],[28,[\"name\"]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"value\"]]],null]],null]]]],false],[0,\"\\n\"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n\"],[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-feature-flag.hbs" } });
});
define("ghost-admin/templates/components/gh-file-upload", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "kaZ1DQsK", "block": "{\"statements\":[[11,\"input\",[]],[15,\"class\",\"gh-input gh-input-file q\"],[15,\"data-url\",\"upload\"],[15,\"type\",\"file\"],[15,\"name\",\"importfile\"],[16,\"accept\",[34,[[26,[\"acceptEncoding\"]]]]],[13],[14],[0,\"\\n\"],[11,\"button\",[]],[15,\"id\",\"startupload\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[15,\"type\",\"submit\"],[16,\"disabled\",[26,[\"uploadButtonDisabled\"]],null],[5,[\"action\"],[[28,[null]],\"upload\"]],[13],[0,\"\\n    \"],[11,\"span\",[]],[13],[1,[26,[\"uploadButtonText\"]],false],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-upload.hbs" } });
});
define("ghost-admin/templates/components/gh-file-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Q7ZVI2kH", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"file\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"failed\"],[13],[1,[26,[\"failureMessage\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"progress-container\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"progress\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[16,\"class\",[34,[\"bar \",[33,[\"if\"],[[28,[\"failureMessage\"]],\"fail\"],null]]]],[16,\"style\",[26,[\"progressStyle\"]],null],[13],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[15,\"data-test-upload-try-again-button\",\"\"],[5,[\"action\"],[[28,[null]],\"reset\"]],[13],[11,\"span\",[]],[13],[0,\"Try Again\"],[14],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"upload-form\"],[13],[0,\"\\n\"],[6,[\"gh-file-input\"],null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[28,[\"labelText\"]],[33,[\"action\"],[[28,[null]],\"fileSelected\"],null],[28,[\"accept\"]]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"description\"],[13],[1,[26,[\"labelText\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-fullscreen-modal", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "JeSlFSa7", "block": "{\"statements\":[[6,[\"liquid-wormhole\"],null,[[\"class\"],[\"fullscreen-modal-container\"]],{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"fullscreen-modal-background\"],[5,[\"action\"],[[28,[null]],\"clickOverlay\"]],[13],[14],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[26,[\"modalClasses\"]],null],[13],[0,\"\\n\"],[6,[\"if\"],[[29,\"default\"]],null,{\"statements\":[[0,\"          \"],[18,\"default\"],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"          \"],[1,[33,[\"component\"],[[28,[\"modalPath\"]]],[[\"model\",\"confirm\",\"closeModal\"],[[28,[\"model\"]],[33,[\"action\"],[[28,[null]],\"confirm\"],null],[33,[\"action\"],[[28,[null]],\"close\"],null]]]],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"    \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-fullscreen-modal.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader-with-preview", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "oaIArnGm", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"image\"]]],null,{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"gh-image-uploader -with-image\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[13],[11,\"img\",[]],[16,\"src\",[26,[\"image\"]],null],[13],[14],[14],[0,\"\\n        \"],[11,\"a\",[]],[15,\"class\",\"image-cancel\"],[15,\"title\",\"Delete\"],[5,[\"action\"],[[28,[null]],\"remove\"]],[13],[0,\"\\n            \"],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Delete\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[1,[33,[\"gh-image-uploader\"],null,[[\"text\",\"altText\",\"update\",\"uploadStarted\",\"uploadFinished\"],[[28,[\"text\"]],[28,[\"altText\"]],[33,[\"action\"],[[28,[null]],\"update\"],null],[33,[\"action\"],[[28,[null]],\"uploadStarted\"],null],[33,[\"action\"],[[28,[null]],\"uploadFinished\"],null]]]],false],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader-with-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "l99omRU5", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"file\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"failed\"],[13],[1,[26,[\"failureMessage\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"progress-container\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"progress\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[16,\"class\",[34,[\"bar \",[33,[\"if\"],[[28,[\"failureMessage\"]],\"fail\"],null]]]],[16,\"style\",[26,[\"progressStyle\"]],null],[13],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[5,[\"action\"],[[28,[null]],\"reset\"]],[13],[11,\"span\",[]],[13],[0,\"Try Again\"],[14],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"upload-form\"],[13],[0,\"\\n\"],[6,[\"gh-file-input\"],null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[28,[\"description\"]],[33,[\"action\"],[[28,[null]],\"fileSelected\"],null],[28,[\"accept\"]]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"gh-btn gh-btn-outline\"],[15,\"data-test-file-input-description\",\"\"],[13],[11,\"span\",[]],[13],[1,[26,[\"description\"]],false],[14],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-infinite-scroll", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ekYAAzkl", "block": "{\"statements\":[[18,\"default\",[[33,[\"action\"],[[28,[null]],\"checkScroll\"],null]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-infinite-scroll.hbs" } });
});
define("ghost-admin/templates/components/gh-loading-spinner", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PrOQPOBL", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"showSpinner\"]]],null,{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"gh-loading-content\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-loading-spinner\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-loading-spinner.hbs" } });
});
define("ghost-admin/templates/components/gh-markdown-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "FBhk6pQr", "block": "{\"statements\":[[18,\"default\",[[33,[\"hash\"],null,[[\"editor\",\"isFullScreen\",\"isSplitScreen\",\"focus\"],[[33,[\"component\"],[\"gh-simplemde\"],[[\"value\",\"placeholder\",\"autofocus\",\"onChange\",\"onEditorInit\",\"onEditorDestroy\",\"options\"],[[28,[\"markdown\"]],[28,[\"placeholder\"]],[28,[\"autofocus\"]],[33,[\"action\"],[[28,[null]],\"updateMarkdown\"],null],[33,[\"action\"],[[28,[null]],\"setEditor\"],null],[33,[\"action\"],[[28,[null]],\"destroyEditor\"],null],[28,[\"simpleMDEOptions\"]]]]],[28,[\"_isFullScreen\"]],[28,[\"_isSplitScreen\"]],[33,[\"action\"],[[28,[null]],\"focusEditor\"],null]]]]]],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"style\",\"display:none\"],[13],[0,\"\\n    \"],[1,[33,[\"gh-file-input\"],null,[[\"multiple\",\"action\",\"accept\"],[true,[33,[\"action\"],[[28,[null]],[28,[\"onImageFilesSelected\"]]],null],[28,[\"imageMimeTypes\"]]]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-markdown-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-menu-toggle", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "4FwNLsQ8", "block": "{\"statements\":[],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-menu-toggle.hbs" } });
});
define("ghost-admin/templates/components/gh-mobile-nav-bar", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "45WadHls", "block": "{\"statements\":[[6,[\"link-to\"],[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"pen\"],null],false],[0,\"New story\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[33,[\"eq\"],[[28,[\"routing\",\"currentRouteName\"]],\"posts.index\"],null]],null,{\"statements\":[[0,\"    \"],[6,[\"link-to\"],[\"posts\",[33,[\"query-params\"],null,[[\"type\"],[null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"Stories\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[6,[\"link-to\"],[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"Content\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]}],[6,[\"link-to\"],[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"account-group\"],null],false],[0,\"Team\"]],\"locals\":[]},null],[0,\"\\n\"],[11,\"div\",[]],[15,\"class\",\"gh-mobile-nav-bar-more\"],[5,[\"action\"],[[28,[null]],\"openMobileMenu\"]],[13],[1,[33,[\"inline-svg\"],[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[0,\"More\"],[14],[0,\"\\n\"],[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobile-nav-bar.hbs" } });
});
define("ghost-admin/templates/components/gh-mobiledoc", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xJNPQHGY", "block": "{\"statements\":[[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobiledoc.hbs" } });
});
define("ghost-admin/templates/components/gh-modal-dialog", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "kfO93FJ4", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"modal-container js-modal-container\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[0,\"\\n    \"],[11,\"article\",[]],[16,\"class\",[34,[[26,[\"klass\"]],\" js-modal\"]]],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"modal-content\"],[5,[\"action\"],[[28,[null]],\"noBubble\"],[[\"bubbles\",\"preventDefault\"],[false,false]]],[13],[0,\"\\n            \"],[6,[\"if\"],[[28,[\"title\"]]],null,{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[11,\"h1\",[]],[13],[1,[26,[\"title\"]],false],[14],[14]],\"locals\":[]},null],[0,\"\\n            \"],[6,[\"if\"],[[28,[\"showClose\"]]],null,{\"statements\":[[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"section\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n                \"],[18,\"default\"],[0,\"\\n            \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"confirm\"]]],null,{\"statements\":[[0,\"            \"],[11,\"footer\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n\"],[0,\"                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[16,\"class\",[34,[[26,[\"rejectButtonClass\"]],\" btn-minor\"]]],[15,\"data-test-modal-reject-button\",\"\"],[5,[\"action\"],[[28,[null]],\"confirm\",\"reject\"]],[13],[1,[28,[\"confirm\",\"reject\",\"text\"]],false],[14],[11,\"button\",[]],[15,\"type\",\"button\"],[16,\"class\",[34,[[26,[\"acceptButtonClass\"]]]]],[15,\"data-test-modal-accept-button\",\"\"],[5,[\"action\"],[[28,[null]],\"confirm\",\"accept\"]],[13],[1,[28,[\"confirm\",\"accept\",\"text\"]],false],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-background js-modal-background\"],[13],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-modal-dialog.hbs" } });
});
define("ghost-admin/templates/components/gh-nav-menu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yoxfqD0F", "block": "{\"statements\":[[1,[33,[\"gh-menu-toggle\"],null,[[\"desktopAction\",\"mobileAction\"],[\"toggleAutoNav\",\"closeMobileMenu\"]]],false],[0,\"\\n\"],[6,[\"gh-basic-dropdown\"],null,[[\"horizontalPosition\",\"calculatePosition\"],[\"right\",[28,[\"userDropdownPosition\"]]]],{\"statements\":[[6,[\"component\"],[[28,[\"dropdown\",\"trigger\"]]],[[\"tagName\",\"class\"],[\"header\",\"gh-nav-menu\"]],{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"gh-nav-menu-icon\"],[16,\"style\",[26,[\"iconStyle\"]],null],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-nav-menu-details\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-nav-menu-details-blog\"],[13],[1,[28,[\"config\",\"blogTitle\"]],false],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-nav-menu-details-user\"],[13],[1,[28,[\"session\",\"user\",\"name\"]],false],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"arrow-down-small\"],null],false],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"component\"],[[28,[\"dropdown\",\"content\"]]],[[\"class\"],[\"gh-nav-menu-dropdown\"]],{\"statements\":[[0,\"        \"],[11,\"ul\",[]],[15,\"class\",\"dropdown-menu dropdown-triangle-top\"],[15,\"role\",\"menu\"],[5,[\"action\"],[[28,[null]],[28,[\"dropdown\",\"actions\",\"close\"]]],[[\"on\",\"preventDefault\"],[\"click\",false]]],[13],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[6,[\"link-to\"],[\"about\"],[[\"classNames\",\"role\",\"tabindex\"],[\"gh-nav-menu-about dropdown-item js-nav-item\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"store\"],null],false],[0,\" About Ghost\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[6,[\"link-to\"],[\"team.user\",[28,[\"session\",\"user\",\"slug\"]]],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-profile js-nav-item\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"user-circle\"],null],false],[0,\" Your Profile\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[11,\"a\",[]],[15,\"class\",\"dropdown-item help-menu-support\"],[15,\"role\",\"menuitem\"],[15,\"tabindex\",\"-1\"],[15,\"href\",\"https://help.ghost.org/\"],[15,\"target\",\"_blank\"],[13],[1,[33,[\"inline-svg\"],[\"ambulance\"],null],false],[0,\" Support Center\"],[14],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[11,\"a\",[]],[15,\"class\",\"dropdown-item help-menu-tweet\"],[15,\"role\",\"menuitem\"],[15,\"tabindex\",\"-1\"],[15,\"href\",\"https://twitter.com/intent/tweet?text=%40TryGhost+Hi%21+Can+you+help+me+with+&related=TryGhost\"],[15,\"target\",\"_blank\"],[15,\"onclick\",\"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;\"],[13],[1,[33,[\"inline-svg\"],[\"twitter\"],null],false],[0,\" Tweet @TryGhost!\"],[14],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[11,\"a\",[]],[15,\"class\",\"dropdown-item help-menu-how-to\"],[15,\"role\",\"menuitem\"],[15,\"tabindex\",\"-1\"],[15,\"href\",\"https://ghosthelp.zendesk.com/hc/en-us/categories/203268947-Ghost-Pro-\"],[15,\"target\",\"_blank\"],[13],[1,[33,[\"inline-svg\"],[\"book-open\"],null],false],[0,\" How to Use Ghost\"],[14],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[11,\"a\",[]],[15,\"class\",\"dropdown-item help-menu-wishlist\"],[15,\"role\",\"menuitem\"],[15,\"tabindex\",\"-1\"],[15,\"href\",\"http://ideas.ghost.org/\"],[15,\"target\",\"_blank\"],[13],[1,[33,[\"inline-svg\"],[\"idea\"],null],false],[0,\" Wishlist\"],[14],[14],[0,\"\\n            \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDropdownExtension\"]]],null,{\"statements\":[[6,[\"each\"],[[28,[\"config\",\"clientExtensions\",\"dropdown\",\"items\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"menuItem\",\"divider\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[0,\"\\n                          \"],[11,\"a\",[]],[16,\"href\",[34,[[28,[\"menuItem\",\"href\"]]]]],[15,\"target\",\"_blank\"],[16,\"class\",[34,[\"dropdown-item js-nav-item \",[28,[\"menuItem\",\"classes\"]]]]],[15,\"role\",\"menuitem\"],[15,\"tabindex\",\"-1\"],[13],[1,[33,[\"inline-svg\"],[[28,[\"menuItem\",\"icon\"]]],null],false],[1,[28,[\"menuItem\",\"text\"]],false],[14],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[\"menuItem\"]},null],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[11,\"li\",[]],[15,\"role\",\"presentation\"],[13],[6,[\"link-to\"],[\"signout\"],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-signout\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"signout\"],null],false],[0,\" Sign Out\"]],\"locals\":[]},null],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[\"dropdown\"]},null],[11,\"section\",[]],[15,\"class\",\"gh-nav-body\"],[13],[0,\"\\n    \"],[11,\"section\",[]],[15,\"class\",\"gh-nav-search\"],[13],[0,\"\\n        \"],[1,[33,[\"gh-search-input\"],null,[[\"class\"],[\"gh-nav-search-input\"]]],false],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"ul\",[]],[15,\"class\",\"gh-nav-list gh-nav-main\"],[13],[0,\"\\n        \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"pen\"],null],false],[0,\"New story\"]],\"locals\":[]},null],[14],[0,\"\\n        \"],[11,\"li\",[]],[13],[0,\"\\n\"],[6,[\"if\"],[[33,[\"eq\"],[[28,[\"routing\",\"currentRouteName\"]],\"posts.index\"],null]],null,{\"statements\":[[0,\"                \"],[6,[\"link-to\"],[\"posts\",[33,[\"query-params\"],null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,null,null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"Stories\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[6,[\"link-to\"],[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"Stories\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]}],[0,\"        \"],[14],[0,\"\\n        \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"account-group\"],null],false],[0,\"Team\"]],\"locals\":[]},null],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"feature\",\"subscribers\"]]],null,{\"statements\":[[6,[\"if\"],[[33,[\"gh-user-can-admin\"],[[28,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"                \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"subscribers\"],[[\"classNames\"],[\"gh-nav-main-subscribers\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"email\"],null],false],[0,\"Subscribers\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\"],[6,[\"if\"],[[33,[\"gh-user-can-admin\"],[[28,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"        \"],[11,\"ul\",[]],[15,\"class\",\"gh-nav-list gh-nav-settings\"],[13],[0,\"\\n            \"],[11,\"li\",[]],[15,\"class\",\"gh-nav-list-h\"],[13],[0,\"Settings\"],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.general\"],[[\"classNames\"],[\"gh-nav-settings-general\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"settings\"],null],false],[0,\"General\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.design\"],[[\"classNames\"],[\"gh-nav-settings-navigation\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"compass\"],null],false],[0,\"Design\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.tags\"],[[\"classNames\"],[\"gh-nav-settings-tags\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"tag\"],null],false],[0,\"Tags\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.code-injection\"],[[\"classNames\"],[\"gh-nav-settings-code-injection\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"brackets\"],null],false],[0,\"Code injection\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.apps\"],[[\"classNames\"],[\"gh-nav-settings-apps\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"box\"],null],false],[0,\"Apps\"]],\"locals\":[]},null],[14],[0,\"\\n            \"],[11,\"li\",[]],[13],[6,[\"link-to\"],[\"settings.labs\"],[[\"classNames\"],[\"gh-nav-settings-labs\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"wrench-double\"],null],false],[0,\"Labs\"]],\"locals\":[]},null],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showMenuExtension\"]]],null,{\"statements\":[[0,\"        \"],[11,\"ul\",[]],[15,\"class\",\"gh-nav-list gh-nav-settings\"],[13],[0,\"\\n            \"],[6,[\"if\"],[[28,[\"config\",\"clientExtensions\",\"menu\",\"title\"]]],null,{\"statements\":[[11,\"li\",[]],[15,\"class\",\"gh-nav-list-h\"],[13],[1,[28,[\"config\",\"clientExtensions\",\"menu\",\"title\"]],false],[14]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"each\"],[[28,[\"config\",\"clientExtensions\",\"menu\",\"items\"]]],null,{\"statements\":[[0,\"                \"],[11,\"li\",[]],[13],[0,\"\\n                    \"],[11,\"a\",[]],[16,\"href\",[34,[[28,[\"menuItem\",\"href\"]]]]],[15,\"target\",\"_blank\"],[13],[1,[33,[\"inline-svg\"],[[28,[\"menuItem\",\"icon\"]]],null],false],[1,[28,[\"menuItem\",\"text\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[\"menuItem\"]},null],[0,\"        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showScriptExtension\"]]],null,{\"statements\":[[0,\"        \"],[1,[28,[\"config\",\"clientExtensions\",\"script\",\"container\"]],true],[0,\"\\n        \"],[11,\"script\",[]],[16,\"src\",[34,[[28,[\"config\",\"clientExtensions\",\"script\",\"src\"]]]]],[13],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"footer\",[]],[15,\"class\",\"gh-nav-foot\"],[13],[0,\"\\n    \"],[11,\"a\",[]],[15,\"class\",\"gh-nav-foot-sitelink\"],[16,\"href\",[34,[[28,[\"config\",\"blogUrl\"]],\"/\"]]],[15,\"target\",\"_blank\"],[13],[0,\"View site \"],[1,[33,[\"inline-svg\"],[\"external\"],null],false],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"div\",[]],[15,\"class\",\"gh-autonav-toggle\"],[5,[\"action\"],[[28,[null]],\"openAutoNav\"],[[\"on\"],[\"mouseEnter\"]]],[13],[14],[0,\"\\n\\n\"],[1,[33,[\"gh-tour-item\"],[\"getting-started\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\".gh-menu-toggle\",\"bottom middle\",\"0 4px\",\"left-top\"]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-nav-menu.hbs" } });
});
define("ghost-admin/templates/components/gh-navigation", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vAUyUhVa", "block": "{\"statements\":[[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-navigation.hbs" } });
});
define("ghost-admin/templates/components/gh-navitem", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XQPohvZq", "block": "{\"statements\":[[6,[\"unless\"],[[28,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[11,\"span\",[]],[15,\"class\",\"gh-blognav-grab\"],[13],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"grab\"],null],false],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Reorder\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[11,\"div\",[]],[15,\"class\",\"gh-blognav-line\"],[13],[0,\"\\n\"],[6,[\"gh-validation-status-container\"],null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-label\",[28,[\"navItem\",\"errors\"]],\"label\",[28,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"        \"],[1,[33,[\"gh-trim-focus-input\"],[[28,[\"navItem\",\"label\"]]],[[\"shouldFocus\",\"placeholder\",\"keyPress\",\"update\"],[[28,[\"navItem\",\"last\"]],\"Label\",[33,[\"action\"],[[28,[null]],\"clearLabelErrors\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"navItem\",\"label\"]]],null]],null]]]],false],[0,\"\\n        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"navItem\",\"errors\"]],\"label\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"gh-validation-status-container\"],null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-url\",[28,[\"navItem\",\"errors\"]],\"url\",[28,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"        \"],[1,[33,[\"gh-navitem-url-input\"],null,[[\"baseUrl\",\"url\",\"isNew\",\"change\",\"clearErrors\"],[[28,[\"baseUrl\"]],[28,[\"navItem\",\"url\"]],[28,[\"navItem\",\"isNew\"]],\"updateUrl\",[33,[\"action\"],[[28,[null]],\"clearUrlErrors\"],null]]]],false],[0,\"\\n        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"navItem\",\"errors\"]],\"url\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-blognav-add\"],[5,[\"action\"],[[28,[null]],\"addItem\"]],[13],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"add\"],null],false],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Add\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-blognav-delete\"],[5,[\"action\"],[[28,[null]],\"deleteItem\",[28,[\"navItem\"]]]],[13],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Delete\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-navitem.hbs" } });
});
define("ghost-admin/templates/components/gh-notification", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "r9ahCceU", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-notification-content\"],[13],[0,\"\\n    \"],[1,[28,[\"message\",\"message\"]],false],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"button\",[]],[15,\"class\",\"gh-notification-close\"],[5,[\"action\"],[[28,[null]],\"closeNotification\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notification.hbs" } });
});
define("ghost-admin/templates/components/gh-notifications", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qHNFcJ7z", "block": "{\"statements\":[[6,[\"each\"],[[28,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-notification\"],null,[[\"message\"],[[28,[\"message\"]]]]],false],[0,\"\\n\"]],\"locals\":[\"message\"]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notifications.hbs" } });
});
define("ghost-admin/templates/components/gh-post-settings-menu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dgaJqa76", "block": "{\"statements\":[[6,[\"gh-tabs-manager\"],null,[[\"selected\",\"id\",\"class\"],[[33,[\"action\"],[[28,[null]],\"showSubview\"],null],\"entry-controls\",\"settings-menu-container\"]],{\"statements\":[[11,\"div\",[]],[15,\"id\",\"entry-controls\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[[33,[\"if\"],[[28,[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-header\"],[13],[0,\"\\n            \"],[11,\"h4\",[]],[13],[0,\"Post Settings\"],[14],[0,\"\\n            \"],[11,\"button\",[]],[15,\"class\",\"close settings-menu-header-action\"],[15,\"data-test-close-settings-menu\",\"\"],[5,[\"action\"],[[28,[null]],\"closeMenus\"]],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-content\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-image-uploader-with-preview\"],null,[[\"image\",\"text\",\"update\",\"remove\"],[[28,[\"model\",\"featureImage\"]],\"Add post image\",[33,[\"action\"],[[28,[null]],\"setCoverImage\"],null],[33,[\"action\"],[[28,[null]],\"clearCoverImage\"],null]]]],false],[0,\"\\n            \"],[11,\"form\",[]],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[15,\"for\",\"url\"],[13],[0,\"Post URL\"],[14],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"model\",\"isNew\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"model\",\"isPublished\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"a\",[]],[15,\"class\",\"post-view-link\"],[15,\"target\",\"_blank\"],[16,\"href\",[34,[[28,[\"model\",\"absoluteUrl\"]]]]],[13],[0,\"\\n                        View post \"],[1,[33,[\"inline-svg\"],[\"external\"],null],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                    \"],[11,\"a\",[]],[15,\"class\",\"post-view-link\"],[15,\"target\",\"_blank\"],[16,\"href\",[34,[[28,[\"model\",\"previewUrl\"]]]]],[13],[0,\"\\n                        Preview \"],[1,[33,[\"inline-svg\"],[\"external\"],null],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]},null],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-input-icon gh-icon-link\"],[13],[0,\"\\n                    \"],[1,[33,[\"inline-svg\"],[\"link\"],null],false],[0,\"\\n                    \"],[1,[33,[\"gh-input\"],[[28,[\"slugValue\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-slug\",\"url\",\"post-setting-slug\",[33,[\"action\"],[[28,[null]],\"updateSlug\",[28,[\"slugValue\"]]],null],\"true\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"slugValue\"]]],null]],null]]]],false],[0,\"\\n                \"],[14],[0,\"\\n                \"],[1,[33,[\"gh-url-preview\"],null,[[\"slug\",\"tagName\",\"classNames\"],[[28,[\"slugValue\"]],\"p\",\"description\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n\"],[6,[\"if\"],[[33,[\"or\"],[[28,[\"model\",\"isDraft\"]],[28,[\"model\",\"isPublished\"]],[28,[\"model\",\"pastScheduledTime\"]]],null]],null,{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[13],[0,\"Publish Date\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[13],[0,\"Scheduled Date\"],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Use the publish menu to re-schedule\"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                \"],[1,[33,[\"gh-date-time-picker\"],null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"maxDate\",\"disabled\",\"static\"],[[28,[\"model\",\"publishedAtBlogDate\"]],[28,[\"model\",\"publishedAtBlogTime\"]],[33,[\"action\"],[[28,[null]],\"setPublishedAtBlogDate\"],null],[33,[\"action\"],[[28,[null]],\"setPublishedAtBlogTime\"],null],[28,[\"model\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",\"now\",[28,[\"model\",\"isScheduled\"]],true]]],false],[0,\"\\n            \"],[14],[0,\"\\n\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[15,\"for\",\"tag-input\"],[13],[0,\"Tags\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-selectize\"],null,[[\"id\",\"multiple\",\"selection\",\"content\",\"optionValuePath\",\"optionLabelPath\",\"openOnFocus\",\"create-item\",\"remove-item\",\"plugins\"],[\"tag-input\",true,[28,[\"model\",\"tags\"]],[28,[\"availableTags\"]],\"content.uuid\",\"content.name\",false,\"addTag\",\"removeTag\",\"remove_button, drag_drop\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"form-group for-select\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[15,\"for\",\"author-list\"],[13],[0,\"Author\"],[14],[0,\"\\n                \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-user\"],[13],[0,\"\\n                    \"],[1,[33,[\"inline-svg\"],[\"user-circle\"],null],false],[0,\"\\n                    \"],[11,\"span\",[]],[15,\"class\",\"gh-select\"],[15,\"tabindex\",\"0\"],[13],[0,\"\\n                    \"],[1,[33,[\"one-way-select\"],[[28,[\"selectedAuthor\"]]],[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"update\"],[\"author-list\",\"post-setting-author\",[28,[\"authors\"]],\"id\",\"name\",[33,[\"action\"],[[28,[null]],\"changeAuthor\"],null]]]],false],[0,\"\\n                    \"],[1,[33,[\"inline-svg\"],[\"arrow-down-small\"],null],false],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"ul\",[]],[15,\"class\",\"nav-list nav-list-block\"],[13],[0,\"\\n\"],[6,[\"gh-tab\"],null,[[\"tagName\",\"classNames\"],[\"li\",\"nav-list-item\"]],{\"statements\":[[0,\"                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[13],[0,\"\\n                        \"],[11,\"b\",[]],[13],[0,\"Meta Data\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"Extra content for SEO and social media.\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                     \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group for-checkbox\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[15,\"class\",\"checkbox\"],[15,\"for\",\"static-page\"],[5,[\"action\"],[[28,[null]],\"togglePage\"],[[\"bubbles\"],[\"false\"]]],[13],[0,\"\\n                    \"],[1,[33,[\"one-way-checkbox\"],[[28,[\"model\",\"page\"]]],[[\"type\",\"name\",\"id\",\"class\",\"update\"],[\"checkbox\",\"static-page\",\"static-page\",\"gh-input post-setting-static-page\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"page\"]]],null]],null]]]],false],[0,\"\\n                    \"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Turn this post into a page\"],[14],[0,\"\\n                \"],[14],[0,\"\\n\\n                \"],[11,\"label\",[]],[15,\"class\",\"checkbox\"],[15,\"for\",\"featured\"],[5,[\"action\"],[[28,[null]],\"toggleFeatured\"],[[\"bubbles\"],[\"false\"]]],[13],[0,\"\\n                    \"],[1,[33,[\"one-way-checkbox\"],[[28,[\"model\",\"featured\"]]],[[\"type\",\"name\",\"id\",\"class\",\"update\"],[\"checkbox\",\"featured\",\"featured\",\"gh-input post-setting-featured\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"featured\"]]],null]],null]]]],false],[0,\"\\n                    \"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Feature this post\"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\\n\"],[6,[\"unless\"],[[28,[\"model\",\"isNew\"]]],null,{\"statements\":[[0,\"                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-link gh-btn-icon settings-menu-delete-button\"],[5,[\"action\"],[[28,[null]],\"deletePost\"]],[13],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[0,\" Delete Post\"],[14],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[[33,[\"if\"],[[28,[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane\"]]],[13],[0,\"\\n\"],[6,[\"gh-tab-pane\"],null,null,{\"statements\":[[6,[\"if\"],[[28,[\"isViewingSubview\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-header subview\"],[13],[0,\"\\n            \"],[11,\"button\",[]],[15,\"class\",\"back settings-menu-header-action\"],[5,[\"action\"],[[28,[null]],\"closeSubview\"]],[13],[1,[33,[\"inline-svg\"],[\"arrow-left\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Back\"],[14],[14],[0,\"\\n            \"],[11,\"h4\",[]],[13],[0,\"Meta Data\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"style\",\"width:23px;\"],[13],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-content\"],[13],[0,\"\\n            \"],[11,\"form\",[]],[5,[\"action\"],[[28,[null]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"meta-title\"],[13],[0,\"Meta Title\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"metaTitleScratch\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-meta-title\",\"meta-title\",\"post-setting-meta-title\",[33,[\"action\"],[[28,[null]],\"setMetaTitle\",[28,[\"metaTitleScratch\"]]],null],\"true\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"metaTitleScratch\"]]],null]],null]]]],false],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Recommended: \"],[11,\"b\",[]],[13],[0,\"70\"],[14],[0,\" characters. You’ve used \"],[1,[33,[\"gh-count-down-characters\"],[[28,[\"metaTitleScratch\"]],70],null],false],[14],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"metaTitle\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"meta-description\"],[13],[0,\"Meta Description\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-textarea\"],[[28,[\"metaDescriptionScratch\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-meta-description\",\"meta-description\",\"post-setting-meta-description\",[33,[\"action\"],[[28,[null]],\"setMetaDescription\",[28,[\"metaDescriptionScratch\"]]],null],\"true\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"metaDescriptionScratch\"]]],null]],null]]]],false],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Recommended: \"],[11,\"b\",[]],[13],[0,\"156\"],[14],[0,\" characters. You’ve used \"],[1,[33,[\"gh-count-down-characters\"],[[28,[\"metaDescriptionScratch\"]],156],null],false],[14],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"metaDescription\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[13],[0,\"Search Engine Result Preview\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"seo-preview\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-title\"],[13],[1,[26,[\"seoTitle\"]],false],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-link\"],[13],[1,[26,[\"seoURL\"]],false],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-description\"],[13],[1,[26,[\"seoDescription\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"_showThrobbers\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-tour-item\"],[\"static-post\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\"label[for='static-page'] p\",\"middle middle\",\"0px 33px\",\"bottom-right\"]]],false],[0,\"\\n\\n    \"],[1,[33,[\"gh-tour-item\"],[\"featured-post\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\"label[for='featured'] p\",\"middle middle\",\"0px -20px\",\"bottom-right\"]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-post-settings-menu.hbs" } });
});
define("ghost-admin/templates/components/gh-posts-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3zHL+ucx", "block": "{\"statements\":[[11,\"h3\",[]],[15,\"class\",\"gh-content-entry-title\"],[13],[6,[\"link-to\"],[\"editor.edit\",[28,[\"post\",\"id\"]]],[[\"class\",\"title\"],[\"permalink\",\"Edit this post\"]],{\"statements\":[[1,[28,[\"post\",\"title\"]],false]],\"locals\":[]},null],[14],[0,\"\\n\"],[11,\"p\",[]],[13],[1,[26,[\"subText\"]],false],[14],[0,\"\\n\\n\"],[11,\"section\",[]],[15,\"class\",\"gh-content-entry-meta\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"isPublished\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"post\",\"page\"]]],null,{\"statements\":[[0,\"                \"],[11,\"span\",[]],[15,\"class\",\"gh-content-status-draft gh-badge gh-badge-black\"],[13],[0,\"Page\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[11,\"span\",[]],[15,\"class\",\"gh-content-status-published\"],[13],[0,\"Published\"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"isScheduled\"]]],null,{\"statements\":[[0,\"                \"],[11,\"span\",[]],[15,\"class\",\"gh-content-status-draft gh-badge\"],[13],[0,\"Scheduled\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[11,\"span\",[]],[15,\"class\",\"gh-content-status-draft gh-badge gh-badge-red\"],[13],[0,\"Draft\"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]}],[0,\"\\n        by \"],[11,\"span\",[]],[15,\"class\",\"gh-content-entry-author\"],[13],[1,[26,[\"authorName\"]],false],[14],[0,\" —\\n        Last edited \"],[1,[33,[\"gh-format-timeago\"],[[28,[\"post\",\"updatedAtUTC\"]]],null],false],[0,\"\\n\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-posts-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-profile-image", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "x4VF857K", "block": "{\"statements\":[[11,\"figure\",[]],[15,\"class\",\"account-image js-file-upload\"],[13],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"hasUploadedImage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"placeholder-img\"],[16,\"style\",[26,[\"placeholderStyle\"]],null],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"id\",\"account-image\"],[15,\"class\",\"gravatar-img\"],[16,\"style\",[26,[\"avatarStyle\"]],null],[13],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"User image\"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"js-img-preview\"],[13],[14],[0,\"\\n\\n    \"],[11,\"span\",[]],[15,\"class\",\"edit-account-image js-img-dropzone\"],[13],[0,\"\\n        \"],[1,[33,[\"inline-svg\"],[\"photos\"],null],false],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Upload an image\"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"input\",[]],[15,\"type\",\"file\"],[15,\"class\",\"file-uploader js-file-input\"],[15,\"name\",\"uploadimage\"],[13],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-profile-image.hbs" } });
});
define("ghost-admin/templates/components/gh-progress-bar", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "dRrT7pPz", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-progress-container\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-progress-container-progress\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-progress-bar \",[33,[\"if\"],[[28,[\"isError\"]],\"-error\"],null]]]],[16,\"style\",[26,[\"progressStyle\"]],null],[15,\"data-test-progress-bar\",\"\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-progress-bar.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-draft", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "FMy/NMX7", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"gh-publishmenu-heading\"],[13],[0,\"Ready to publish your post?\"],[14],[0,\"\\n\"],[11,\"section\",[]],[15,\"class\",\"gh-publishmenu-content\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],\"setSaveType\",\"publish\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-published-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Set it live now\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Publish this post immediately\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-scheduled-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Schedule it for later\"],[14],[0,\"\\n            \"],[1,[33,[\"gh-date-time-picker\"],null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"minDate\"],[[28,[\"post\",\"publishedAtBlogDate\"]],[28,[\"post\",\"publishedAtBlogTime\"]],[33,[\"action\"],[[28,[null]],\"setDate\"],null],[33,[\"action\"],[[28,[null]],\"setTime\"],null],[28,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[28,[\"_minDate\"]]]]],false],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Set automatic future publish date\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-draft.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-published", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xu/44Z98", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"gh-publishmenu-heading\"],[13],[0,\"Update post status\"],[14],[0,\"\\n\"],[11,\"section\",[]],[15,\"class\",\"gh-publishmenu-content\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],[28,[\"setSaveType\"]],\"draft\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-unpublished-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Unpublished\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Revert this post to a private draft\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],[28,[\"setSaveType\"]],\"publish\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-published-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Published\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Display this post publicly\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-published.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-scheduled", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "L/Vv7NDi", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"gh-publishmenu-heading\"],[13],[0,\"Will be published in \"],[1,[26,[\"timeToPublished\"]],false],[14],[0,\"\\n\"],[11,\"section\",[]],[15,\"class\",\"gh-publishmenu-content\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],\"setSaveType\",\"draft\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-draft-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Revert to draft\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Do not publish\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-publishmenu-radio \",[33,[\"if\"],[[33,[\"eq\"],[[28,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[5,[\"action\"],[[28,[null]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-button\"],[15,\"data-test-publishmenu-scheduled-option\",\"\"],[13],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-content\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-label\"],[13],[0,\"Schedule for later\"],[14],[0,\"\\n            \"],[1,[33,[\"gh-date-time-picker\"],null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"minDate\"],[[28,[\"post\",\"publishedAtBlogDate\"]],[28,[\"post\",\"publishedAtBlogTime\"]],[33,[\"action\"],[[28,[null]],\"setDate\"],null],[33,[\"action\"],[[28,[null]],\"setTime\"],null],[28,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[28,[\"_minDate\"]]]]],false],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-publishmenu-radio-desc\"],[13],[0,\"Set automatic future publish date\"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-scheduled.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "02MsXZBJ", "block": "{\"statements\":[[6,[\"basic-dropdown\"],null,[[\"verticalPosition\",\"onOpen\",\"onClose\"],[\"below\",[33,[\"action\"],[[28,[null]],\"open\"],null],[33,[\"action\"],[[28,[null]],\"close\"],null]]],{\"statements\":[[6,[\"component\"],[[28,[\"dd\",\"trigger\"]]],[[\"class\"],[\"gh-btn gh-btn-outline gh-publishmenu-trigger\"]],{\"statements\":[[0,\"        \"],[11,\"span\",[]],[15,\"data-test-publishmenu-trigger\",\"\"],[13],[1,[26,[\"triggerText\"]],false],[0,\" \"],[1,[33,[\"inline-svg\"],[\"arrow-down\"],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"component\"],[[28,[\"dd\",\"content\"]]],[[\"class\"],[\"gh-publishmenu-dropdown\"]],{\"statements\":[[6,[\"if\"],[[33,[\"eq\"],[[28,[\"postState\"]],\"published\"],null]],null,{\"statements\":[[0,\"        \"],[1,[33,[\"gh-publishmenu-published\"],null,[[\"saveType\",\"setSaveType\"],[[28,[\"saveType\"]],[33,[\"action\"],[[28,[null]],\"setSaveType\"],null]]]],false],[0,\"\\n\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[33,[\"eq\"],[[28,[\"postState\"]],\"scheduled\"],null]],null,{\"statements\":[[0,\"        \"],[1,[33,[\"gh-publishmenu-scheduled\"],null,[[\"post\",\"saveType\",\"isClosing\",\"setSaveType\"],[[28,[\"post\"]],[28,[\"saveType\"]],[28,[\"isClosing\"]],[33,[\"action\"],[[28,[null]],\"setSaveType\"],null]]]],false],[0,\"\\n\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[1,[33,[\"gh-publishmenu-draft\"],null,[[\"post\",\"saveType\",\"setSaveType\"],[[28,[\"post\"]],[28,[\"saveType\"]],[33,[\"action\"],[[28,[null]],\"setSaveType\"],null]]]],false],[0,\"\\n        \"]],\"locals\":[]}]],\"locals\":[]}],[0,\"\\n\"],[0,\"        \"],[11,\"footer\",[]],[15,\"class\",\"gh-publishmenu-footer\"],[13],[0,\"\\n            \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-outline gh-btn-link\"],[15,\"data-test-publishmenu-cancel\",\"\"],[5,[\"action\"],[[28,[null]],[28,[\"dd\",\"actions\",\"close\"]]]],[13],[0,\"\\n                \"],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],[[28,[\"buttonText\"]]],[[\"task\",\"successText\",\"runningText\",\"class\",\"data-test-publishmenu-save\"],[[28,[\"save\"]],[28,[\"successText\"]],[28,[\"runningText\"]],\"gh-btn gh-btn-blue gh-publishmenu-button gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[\"dd\"]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "BacCiGKO", "block": "{\"statements\":[[6,[\"power-select\"],null,[[\"search\",\"onchange\",\"placeholder\",\"onopen\",\"onclose\",\"searchEnabled\",\"triggerComponent\",\"renderInPlace\",\"loadingMessage\"],[[33,[\"action\"],[[28,[null]],\"search\"],null],[33,[\"action\"],[[28,[null]],\"openSelected\"],null],\"Search\",[33,[\"action\"],[[28,[null]],\"onFocus\"],null],[33,[\"action\"],[[28,[null]],\"onBlur\"],null],false,\"gh-search-input/trigger\",true,\"Loading\"]],{\"statements\":[[0,\"    \"],[1,[33,[\"highlighted-text\"],[[28,[\"name\",\"title\"]],[28,[\"select\",\"searchText\"]]],null],false],[0,\"\\n\"]],\"locals\":[\"name\",\"select\"]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input/trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2o2LTwVk", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"ember-power-select-search\"],[16,\"onmousedown\",[33,[\"action\"],[[28,[null]],\"captureMouseDown\"],null],null],[13],[0,\"\\n    \"],[11,\"input\",[]],[15,\"type\",\"search\"],[15,\"autocomplete\",\"off\"],[15,\"autocorrect\",\"off\"],[15,\"autocapitalize\",\"off\"],[16,\"value\",[33,[\"if\"],[[28,[\"extra\",\"labelPath\"]],[33,[\"get\"],[[28,[\"selected\"]],[28,[\"extra\",\"labelPath\"]]],null],[28,[\"selected\"]]],null],null],[15,\"spellcheck\",\"false\"],[15,\"role\",\"combobox\"],[16,\"placeholder\",[26,[\"placeholder\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],\"search\"],[[\"value\"],[\"target.value\"]]],null],[16,\"onmousedown\",[33,[\"action\"],[[28,[null]],\"captureMouseDown\"],null],null],[16,\"onkeydown\",[33,[\"action\"],[[28,[null]],\"handleKeydown\"],null],null],[16,\"onblur\",[33,[\"action\"],[[28,[null]],\"resetInput\"],null],null],[13],[14],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-nav-search-button\"],[5,[\"action\"],[[28,[null]],\"focusInput\"]],[13],[1,[33,[\"inline-svg\"],[\"search\"],null],false],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Search\"],[14],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input/trigger.hbs" } });
});
define("ghost-admin/templates/components/gh-simplemde", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LShp+F6y", "block": "{\"statements\":[[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-simplemde.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table-delete-cell", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yCteFyZh", "block": "{\"statements\":[[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-link gh-btn-sm\"],[5,[\"action\"],[[28,[null]],[28,[\"tableActions\",\"delete\"]],[28,[\"row\",\"content\"]]]],[13],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[14],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table-delete-cell.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "fOqujhoU", "block": "{\"statements\":[[6,[\"light-table\"],[[28,[\"table\"]]],[[\"scrollBuffer\"],[100]],{\"statements\":[[0,\"    \"],[1,[33,[\"component\"],[[28,[\"t\",\"head\"]]],[[\"onColumnClick\",\"iconAscending\",\"iconDescending\"],[[33,[\"action\"],[[28,[null]],[28,[\"sortByColumn\"]]],null],\"gh-icon-ascending\",\"gh-icon-descending\"]]],false],[0,\"\\n\\n\"],[6,[\"component\"],[[28,[\"t\",\"body\"]]],[[\"canSelect\",\"tableActions\",\"scrollBuffer\",\"onScrolledToBottom\"],[false,[33,[\"hash\"],null,[[\"delete\"],[[28,[\"delete\"]]]]],100,[33,[\"action\"],[[28,[null]],\"onScrolledToBottom\"],null]]],{\"statements\":[[6,[\"if\"],[[28,[\"isLoading\"]]],null,{\"statements\":[[6,[\"component\"],[[28,[\"body\",\"loader\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"gh-loading-content\"],[15,\"style\",\"margin-top: 2em;\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-loading-spinner\"],[13],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"table\",\"isEmpty\"]]],null,{\"statements\":[[6,[\"component\"],[[28,[\"body\",\"no-data\"]]],null,{\"statements\":[[0,\"                    No subscribers found.\\n\"]],\"locals\":[]},null]],\"locals\":[]},null]],\"locals\":[]}]],\"locals\":[\"body\"]},null]],\"locals\":[\"t\"]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table.hbs" } });
});
define("ghost-admin/templates/components/gh-tag-settings-form", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Pxw1I0z+", "block": "{\"statements\":[[11,\"div\",[]],[16,\"class\",[34,[[33,[\"if\"],[[28,[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane tag-settings-pane\"]]],[13],[0,\"\\n    \"],[11,\"div\",[]],[16,\"class\",[34,[\"settings-menu-header \",[33,[\"if\"],[[28,[\"isMobile\"]],\"subview\"],null]]]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"isMobile\"]]],null,{\"statements\":[[0,\"            \"],[6,[\"link-to\"],[\"settings.tags\"],[[\"class\"],[\"back settings-menu-header-action\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"arrow-left\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Back\"],[14]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"h4\",[]],[13],[1,[26,[\"title\"]],false],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"style\",\"width:23px;\"],[13],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            \"],[11,\"h4\",[]],[13],[1,[26,[\"title\"]],false],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-content\"],[13],[0,\"\\n        \"],[1,[33,[\"gh-image-uploader-with-preview\"],null,[[\"image\",\"text\",\"update\",\"remove\"],[[28,[\"tag\",\"featureImage\"]],\"Add tag image\",[33,[\"action\"],[[28,[null]],\"setCoverImage\"],null],[33,[\"action\"],[[28,[null]],\"clearCoverImage\"],null]]]],false],[0,\"\\n        \"],[11,\"form\",[]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"tag\",\"errors\"]],[28,[\"tag\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"tag-name\"],[13],[0,\"Name\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"scratchName\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"tag-name\",\"name\",\"text\",[33,[\"action\"],[[28,[null]],\"setProperty\",\"name\",[28,[\"scratchName\"]]],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"scratchName\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"tag\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"tag\",\"errors\"]],[28,[\"tag\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"tag-slug\"],[13],[0,\"URL\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"scratchSlug\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"tag-slug\",\"slug\",\"text\",[33,[\"action\"],[[28,[null]],\"setProperty\",\"slug\",[28,[\"scratchSlug\"]]],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"scratchSlug\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[33,[\"gh-url-preview\"],null,[[\"prefix\",\"slug\",\"tagName\",\"classNames\"],[\"tag\",[28,[\"scratchSlug\"]],\"p\",\"description\"]]],false],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"activeTag\",\"errors\"]],\"slug\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"tag\",\"errors\"]],[28,[\"tag\",\"hasValidated\"]],\"description\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"tag-description\"],[13],[0,\"Description\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-textarea\"],[[28,[\"scratchDescription\"]]],[[\"id\",\"name\",\"focusOut\",\"update\"],[\"tag-description\",\"description\",[33,[\"action\"],[[28,[null]],\"setProperty\",\"description\",[28,[\"scratchDescription\"]]],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"scratchDescription\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"tag\",\"errors\"]],\"description\"]]],false],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Maximum: \"],[11,\"b\",[]],[13],[0,\"200\"],[14],[0,\" characters. You’ve used \"],[1,[33,[\"gh-count-down-characters\"],[[28,[\"scratchDescription\"]],200],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"ul\",[]],[15,\"class\",\"nav-list nav-list-block\"],[13],[0,\"\\n                \"],[11,\"li\",[]],[15,\"class\",\"nav-list-item\"],[5,[\"action\"],[[28,[null]],\"openMeta\"]],[13],[0,\"\\n                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"meta-data-button\"],[13],[0,\"\\n                        \"],[11,\"b\",[]],[13],[0,\"Meta Data\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"Extra content for SEO and social media.\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                    \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\\n\"],[6,[\"unless\"],[[28,[\"tag\",\"isNew\"]]],null,{\"statements\":[[0,\"                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-link gh-btn-sm gh-btn-icon settings-menu-delete-button\"],[5,[\"action\"],[[28,[null]],\"deleteTag\"]],[13],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[0,\" Delete Tag\"],[14],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[16,\"class\",[34,[[33,[\"if\"],[[28,[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane tag-meta-settings-pane\"]]],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-header subview\"],[13],[0,\"\\n        \"],[11,\"button\",[]],[15,\"class\",\"back settings-menu-header-action\"],[5,[\"action\"],[[28,[null]],\"closeMeta\"]],[13],[1,[33,[\"inline-svg\"],[\"arrow-left\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Back\"],[14],[14],[0,\"\\n        \"],[11,\"h4\",[]],[13],[0,\"Meta Data\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"style\",\"width:23px;\"],[13],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"settings-menu-content\"],[13],[0,\"\\n        \"],[11,\"form\",[]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"tag\",\"errors\"]],[28,[\"tag\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"meta-title\"],[13],[0,\"Meta Title\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"scratchMetaTitle\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"meta-title\",\"metaTitle\",\"text\",[33,[\"action\"],[[28,[null]],\"setProperty\",\"metaTitle\",[28,[\"scratchMetaTitle\"]]],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"scratchMetaTitle\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"tag\",\"errors\"]],\"metaTitle\"]]],false],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Recommended: \"],[11,\"b\",[]],[13],[0,\"70\"],[14],[0,\" characters. You’ve used \"],[1,[33,[\"gh-count-down-characters\"],[[28,[\"scratchMetaTitle\"]],70],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"tag\",\"errors\"]],[28,[\"tag\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"                \"],[11,\"label\",[]],[15,\"for\",\"meta-description\"],[13],[0,\"Meta Description\"],[14],[0,\"\\n                \"],[1,[33,[\"gh-textarea\"],[[28,[\"scratchMetaDescription\"]]],[[\"id\",\"name\",\"focusOut\",\"update\"],[\"meta-description\",\"metaDescription\",[33,[\"action\"],[[28,[null]],\"setProperty\",\"metaDescription\",[28,[\"scratchMetaDescription\"]]],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"scratchMetaDescription\"]]],null]],null]]]],false],[0,\"\\n                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"tag\",\"errors\"]],\"metaDescription\"]]],false],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Recommended: \"],[11,\"b\",[]],[13],[0,\"156\"],[14],[0,\" characters. You’ve used \"],[1,[33,[\"gh-count-down-characters\"],[[28,[\"scratchMetaDescription\"]],156],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                \"],[11,\"label\",[]],[13],[0,\"Search Engine Result Preview\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"seo-preview\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-title\"],[13],[1,[26,[\"seoTitle\"]],false],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-link\"],[13],[1,[26,[\"seoURL\"]],false],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"seo-preview-description\"],[13],[1,[26,[\"seoDescription\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag-settings-form.hbs" } });
});
define("ghost-admin/templates/components/gh-tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ULiBJsWW", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"settings-tag\"],[16,\"id\",[34,[\"gh-tag-\",[28,[\"tag\",\"id\"]]]]],[13],[0,\"\\n\"],[6,[\"link-to\"],[\"settings.tags.tag\",[28,[\"tag\"]]],[[\"class\"],[\"tag-edit-button\"]],{\"statements\":[[0,\"        \"],[11,\"span\",[]],[15,\"class\",\"tag-title\"],[13],[1,[28,[\"tag\",\"name\"]],false],[14],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"label label-default\"],[13],[0,\"/\"],[1,[28,[\"tag\",\"slug\"]],false],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"tag\",\"isInternal\"]]],null,{\"statements\":[[0,\"            \"],[11,\"span\",[]],[15,\"class\",\"label label-blue\"],[13],[0,\"internal\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n        \"],[11,\"p\",[]],[15,\"class\",\"tag-description\"],[13],[1,[28,[\"tag\",\"description\"]],false],[14],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"tags-count\"],[13],[1,[28,[\"tag\",\"count\",\"posts\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag.hbs" } });
});
define("ghost-admin/templates/components/gh-tags-management-container", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HmE/UkX3", "block": "{\"statements\":[[18,\"default\",[[28,[null]]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tags-management-container.hbs" } });
});
define("ghost-admin/templates/components/gh-task-button", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "c0cBxcuP", "block": "{\"statements\":[[6,[\"if\"],[[29,\"default\"]],null,{\"statements\":[[0,\"    \"],[18,\"default\",[[33,[\"hash\"],null,[[\"isIdle\",\"isRunning\",\"isSuccess\",\"isFailure\"],[[28,[\"isIdle\"]],[28,[\"isRunning\"]],[28,[\"isSuccess\"]],[28,[\"isFailure\"]]]]]]],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[11,\"span\",[]],[13],[0,\"\\n    \"],[6,[\"if\"],[[28,[\"isRunning\"]]],null,{\"statements\":[[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner\"]]],false],[1,[26,[\"runningText\"]],false]],\"locals\":[]},null],[0,\"\\n    \"],[6,[\"if\"],[[28,[\"isIdle\"]]],null,{\"statements\":[[1,[26,[\"buttonText\"]],false]],\"locals\":[]},null],[0,\"\\n    \"],[6,[\"if\"],[[28,[\"isSuccess\"]]],null,{\"statements\":[[1,[33,[\"inline-svg\"],[\"check-circle\"],null],false],[0,\" \"],[1,[26,[\"successText\"]],false]],\"locals\":[]},null],[0,\"\\n    \"],[6,[\"if\"],[[28,[\"isFailure\"]]],null,{\"statements\":[[1,[33,[\"inline-svg\"],[\"retry\"],null],false],[0,\" \"],[1,[26,[\"failureText\"]],false]],\"locals\":[]},null],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-task-button.hbs" } });
});
define("ghost-admin/templates/components/gh-theme-error-li", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "r8/v0kzl", "block": "{\"statements\":[[11,\"a\",[]],[15,\"href\",\"\"],[15,\"class\",\"theme-validation-toggle-details\"],[15,\"data-test-toggle-details\",\"\"],[5,[\"action\"],[[28,[null]],\"toggleDetails\"]],[13],[0,\"\\n    \"],[11,\"h4\",[]],[15,\"class\",\"theme-validation-rule-text\"],[13],[0,\"\\n        \"],[1,[28,[\"error\",\"rule\"]],true],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-rule-icon\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showDetails\"]]],null,{\"statements\":[[0,\"            \"],[1,[33,[\"inline-svg\"],[\"arrow-down\"],null],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDetails\"]]],null,{\"statements\":[[0,\"    \"],[11,\"p\",[]],[15,\"class\",\"theme-validation-details\"],[13],[0,\"\\n        \"],[1,[28,[\"error\",\"details\"]],true],[0,\"\\n    \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-list\"],[13],[0,\"\\n            \"],[11,\"h6\",[]],[13],[0,\"Affected files:\"],[14],[0,\"\\n            \"],[11,\"ul\",[]],[13],[0,\"\\n\"],[6,[\"each\"],[[28,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"li\",[]],[13],[11,\"code\",[]],[13],[1,[28,[\"failure\",\"ref\"]],false],[14],[6,[\"if\"],[[28,[\"failure\",\"message\"]]],null,{\"statements\":[[0,\": \"],[1,[28,[\"failure\",\"message\"]],false]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[\"failure\"]},null],[0,\"            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-theme-error-li.hbs" } });
});
define("ghost-admin/templates/components/gh-theme-table", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xV045GDr", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"apps-grid\"],[15,\"data-test-themes-list\",\"\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"\\n\"],[6,[\"each\"],[[28,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"apps-grid-cell\"],[16,\"data-test-theme-id\",[34,[[28,[\"theme\",\"name\"]]]]],[16,\"data-test-theme-active\",[34,[[28,[\"theme\",\"active\"]]]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[16,\"class\",[34,[\"apps-card-app \",[33,[\"if\"],[[28,[\"theme\",\"active\"]],\"theme-list-item--active\"],null]]]],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                    \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[15,\"data-test-theme-title\",\"\"],[13],[1,[28,[\"theme\",\"label\"]],false],[14],[0,\"\\n                    \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[15,\"data-test-theme-description\",\"\"],[13],[11,\"span\",[]],[15,\"class\",\"description\"],[13],[0,\"Version \"],[1,[28,[\"theme\",\"version\"]],false],[14],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-card-right\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"apps-configured\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"theme\",\"isDeletable\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"a\",[]],[15,\"href\",\"#\"],[16,\"disabled\",[28,[\"theme\",\"active\"]],null],[15,\"class\",\"apps-configured-action red-hover\"],[15,\"data-test-theme-delete-button\",\"\"],[5,[\"action\"],[[28,[null]],[28,[\"deleteTheme\"]],[28,[\"theme\"]]]],[13],[0,\"Delete\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                    \"],[11,\"a\",[]],[15,\"href\",\"#\"],[15,\"class\",\"apps-configured-action darkgrey-hover\"],[15,\"data-test-theme-download-button\",\"\"],[5,[\"action\"],[[28,[null]],[28,[\"downloadTheme\"]],[28,[\"theme\"]]]],[13],[0,\"Download\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"theme\",\"active\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[15,\"class\",\"gh-badge gh-badge-black apps-configured-action\"],[15,\"data-test-theme-badge\",\"\"],[13],[0,\"Active\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        \"],[11,\"a\",[]],[15,\"href\",\"#\"],[15,\"class\",\"apps-configured-action apps-configured-action-activate green-hover\"],[15,\"data-test-theme-activate-button\",\"\"],[5,[\"action\"],[[28,[null]],[28,[\"activateTheme\"]],[28,[\"theme\",\"model\"]]]],[13],[0,\"\\n                            Activate\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[\"theme\"]},null],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"    \"],[11,\"div\",[]],[15,\"class\",\"apps-card-app\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[13],[0,\"No themes found\"],[14],[0,\"\\n                \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[13],[11,\"span\",[]],[15,\"class\",\"description\"],[13],[0,\"Please upload a theme to continue\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]}],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-theme-table.hbs" } });
});
define("ghost-admin/templates/components/gh-timezone-select", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "nAvgcVI9", "block": "{\"statements\":[[11,\"span\",[]],[15,\"class\",\"gh-select\"],[16,\"data-select-text\",[34,[[28,[\"selectedTimezone\",\"label\"]]]]],[15,\"tabindex\",\"0\"],[13],[0,\"\\n    \"],[1,[33,[\"one-way-select\"],null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"activeTimezone\",\"general[activeTimezone]\",[28,[\"selectableTimezones\"]],\"name\",\"label\",[28,[\"selectedTimezone\"]],[33,[\"action\"],[[28,[null]],\"setTimezone\"],null]]]],false],[0,\"\\n    \"],[1,[33,[\"inline-svg\"],[\"arrow-down-small\"],null],false],[0,\"\\n\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"hasTimezoneOverride\"]]],null,{\"statements\":[[0,\"    \"],[11,\"p\",[]],[13],[0,\"Your timezone has been automatically set to \"],[1,[26,[\"activeTimezone\"]],false],[0,\".\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[11,\"p\",[]],[13],[0,\"The local time here is currently \"],[1,[26,[\"localTime\"]],false],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-timezone-select.hbs" } });
});
define("ghost-admin/templates/components/gh-tour-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uzaM3YkN", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"isVisible\"]]],null,{\"statements\":[[6,[\"liquid-tether\"],null,[[\"class\",\"target\",\"attachment\",\"targetAttachment\",\"targetOffset\"],[\"throbber-container\",[28,[\"target\"]],\"middle center\",[28,[\"throbberAttachment\"]],[28,[\"throbberOffset\"]]]],{\"statements\":[[0,\"        \"],[11,\"a\",[]],[15,\"class\",\"throbber-trigger\"],[15,\"href\",\"#\"],[16,\"id\",[26,[\"_throbberElementId\"]],null],[5,[\"action\"],[[28,[null]],\"open\"]],[13],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"throbber\"],[13],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"isOpen\"]]],null,{\"statements\":[[6,[\"liquid-wormhole\"],null,[[\"class\"],[\"tour-container\"]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"tour-background\"],[5,[\"action\"],[[28,[null]],\"close\"],[[\"on\"],[\"click\"]]],[13],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"liquid-tether\"],null,[[\"class\",\"target\",\"attachment\",\"targetAttachment\",\"offset\"],[\"tour\",[28,[\"_throbberElementSelector\"]],[28,[\"_popoverAttachment\"]],[28,[\"_popoverTargetAttachment\"]],[28,[\"_popoverOffset\"]]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[16,\"class\",[34,[\"popover-item popover-triangle-\",[26,[\"popoverTriangleClass\"]]]]],[13],[0,\"\\n                \"],[11,\"h3\",[]],[15,\"class\",\"popover-title\"],[13],[1,[28,[\"_throbber\",\"title\"]],false],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"popover-body\"],[13],[0,\"\\n                    \"],[1,[28,[\"_throbber\",\"message\"]],true],[0,\"\\n                \"],[14],[0,\"\\n                \"],[11,\"footer\",[]],[15,\"class\",\"popover-foot\"],[13],[0,\"\\n                    \"],[11,\"a\",[]],[15,\"class\",\"tour-optout\"],[15,\"href\",\"#\"],[5,[\"action\"],[[28,[null]],\"optOut\"]],[13],[0,\"Not your first time? \"],[11,\"em\",[]],[13],[0,\"Skip these tips\"],[14],[14],[0,\"\\n                    \"],[11,\"a\",[]],[15,\"class\",\"tour-dismiss gh-btn gh-btn-black\"],[15,\"href\",\"#\"],[5,[\"action\"],[[28,[null]],\"markAsViewed\"]],[13],[11,\"span\",[]],[13],[0,\"Ok, got it\"],[14],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tour-item.hbs" } });
});
define("ghost-admin/templates/components/gh-upgrade-notification", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "w1lx6gAm", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"message\"]]],null,{\"statements\":[[0,\"    \"],[11,\"span\",[]],[13],[1,[33,[\"gh-format-html\"],[[28,[\"message\"]]],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-upgrade-notification.hbs" } });
});
define("ghost-admin/templates/components/gh-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LLd7znkU", "block": "{\"statements\":[[18,\"default\",[[33,[\"hash\"],null,[[\"cancel\",\"errors\",\"files\",\"isUploading\",\"progressBar\"],[[33,[\"action\"],[[28,[null]],\"cancel\"],null],[28,[\"errors\"]],[28,[\"files\"]],[28,[\"_uploadFiles\",\"isRunning\"]],[33,[\"component\"],[\"gh-progress-bar\"],[[\"percentage\"],[[28,[\"uploadPercentage\"]]]]]]]]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-url-preview", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pVbILQPS", "block": "{\"statements\":[[1,[26,[\"url\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-url-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-user-active", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "jxkU8NlS", "block": "{\"statements\":[[18,\"default\",[[28,[null]]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-active.hbs" } });
});
define("ghost-admin/templates/components/gh-user-invited", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "l+jjCImX", "block": "{\"statements\":[[18,\"default\",[[28,[null]]]],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-invited.hbs" } });
});
define("ghost-admin/templates/components/gh-view-title", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5Nt4TiTO", "block": "{\"statements\":[[11,\"button\",[]],[15,\"class\",\"gh-mobilemenu-button\"],[15,\"role\",\"presentation\"],[5,[\"action\"],[[28,[null]],\"openMobileMenu\"]],[13],[1,[33,[\"inline-svg\"],[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[11,\"span\",[]],[15,\"class\",\"sr-only\"],[13],[0,\"Menu\"],[14],[14],[0,\"\\n\"],[18,\"default\"],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-view-title.hbs" } });
});
define("ghost-admin/templates/components/infinity-loader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MbXQ5BMf", "block": "{\"statements\":[[6,[\"if\"],[[29,\"default\"]],null,{\"statements\":[[0,\"    \"],[18,\"default\"],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"infinityModel\",\"reachedInfinity\"]]],null,{\"statements\":[],\"locals\":[]},{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"gh-loading-spinner\"],[13],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/infinity-loader.hbs" } });
});
define("ghost-admin/templates/components/modals/copy-html", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MRzn0sUA", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Generated HTML\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[1,[33,[\"textarea\"],null,[[\"value\",\"rows\"],[[28,[\"generatedHtml\"]],\"6\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/copy-html.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-all", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iBSCDSKp", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Would you really like to delete all content from your blog?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"This is permanent! No backups, no restores, no magic undo button. We warned you, k?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[28,[\"deleteAll\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-all.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-post", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+naEeR8s", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to delete this post?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"\\n        You're about to delete \\\"\"],[11,\"strong\",[]],[13],[1,[28,[\"post\",\"title\"]],false],[14],[0,\"\\\". This is permanent! We warned you, k?\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[28,[\"deletePost\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-post.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-subscriber", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "C+pFxJP5", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"strong\",[]],[13],[0,\"WARNING:\"],[14],[0,\" All data for this subscriber will be deleted. There is no way to recover this.\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[28,[\"deleteSubscriber\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "68h/vjwY", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to delete this tag?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"tag\",\"post_count\"]]],null,{\"statements\":[[0,\"        \"],[11,\"span\",[]],[15,\"class\",\"red\"],[13],[0,\"This tag is attached to \"],[1,[28,[\"tag\",\"count\",\"posts\"]],false],[0,\" \"],[1,[26,[\"postInflection\"]],false],[0,\".\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    You're about to delete \\\"\"],[11,\"strong\",[]],[13],[1,[28,[\"tag\",\"name\"]],false],[14],[0,\"\\\". This is permanent! We warned you, k?\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[28,[\"deleteTag\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-tag.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-theme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Qilzk77q", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[15,\"data-test-delete-theme-modal\",\"\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to delete this\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"You're about to delete \\\"\"],[11,\"strong\",[]],[13],[1,[28,[\"theme\",\"label\"]],false],[14],[0,\"\\\". This is permanent! We warned you, k? Maybe \"],[11,\"a\",[]],[15,\"href\",\"#\"],[5,[\"action\"],[[28,[null]],[28,[\"download\"]]]],[13],[0,\"Download your theme before continuing\"],[14],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[15,\"data-test-cancel-button\",\"\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\",\"data-test-delete-button\"],[\"Deleted\",[28,[\"deleteTheme\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-theme.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "G5hTGaB2", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to delete this user?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"user\",\"count\",\"posts\"]]],null,{\"statements\":[[0,\"        \"],[11,\"strong\",[]],[13],[0,\"WARNING:\"],[14],[0,\" \"],[11,\"span\",[]],[15,\"class\",\"red\"],[13],[0,\"This user is the author of \"],[1,[33,[\"pluralize\"],[[28,[\"user\",\"count\",\"posts\"]],\"post\"],null],false],[0,\".\"],[14],[0,\" All posts and user data will be deleted. There is no way to recover this.\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[11,\"strong\",[]],[13],[0,\"WARNING:\"],[14],[0,\" All user data will be deleted. There is no way to recover this.\\n\"]],\"locals\":[]}],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[28,[\"deleteUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-user.hbs" } });
});
define("ghost-admin/templates/components/modals/import-subscribers", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ab0jXqyI", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"response\"]]],null,{\"statements\":[[0,\"            Import Successful\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            Import Subscribers\\n\"]],\"locals\":[]}],[0,\"    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"response\"]]],null,{\"statements\":[[0,\"        \"],[11,\"table\",[]],[15,\"class\",\"subscribers-import-results\"],[13],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Imported:\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[15,\"align\",\"left\"],[13],[1,[28,[\"response\",\"imported\"]],false],[14],[0,\"\\n            \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"response\",\"duplicates\"]]],null,{\"statements\":[[0,\"                \"],[11,\"tr\",[]],[13],[0,\"\\n                    \"],[11,\"td\",[]],[13],[0,\"Duplicates:\"],[14],[0,\"\\n                    \"],[11,\"td\",[]],[15,\"align\",\"left\"],[13],[1,[28,[\"response\",\"duplicates\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"response\",\"invalid\"]]],null,{\"statements\":[[0,\"                \"],[11,\"tr\",[]],[13],[0,\"\\n                    \"],[11,\"td\",[]],[13],[0,\"Invalid:\"],[14],[0,\"\\n                    \"],[11,\"td\",[]],[15,\"align\",\"left\"],[13],[1,[28,[\"response\",\"invalid\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[1,[33,[\"gh-file-uploader\"],null,[[\"url\",\"paramName\",\"labelText\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\"],[[28,[\"uploadUrl\"]],\"subscribersfile\",\"Select or drag-and-drop a CSV file.\",[33,[\"action\"],[[28,[null]],\"uploadStarted\"],null],[33,[\"action\"],[[28,[null]],\"uploadFinished\"],null],[33,[\"action\"],[[28,[null]],\"uploadSuccess\"],null]]]],false],[0,\"\\n\"]],\"locals\":[]}],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[16,\"disabled\",[26,[\"closeDisabled\"]],null],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[0,\"\\n        \"],[11,\"span\",[]],[13],[6,[\"if\"],[[28,[\"response\"]]],null,{\"statements\":[[0,\"Close\"]],\"locals\":[]},{\"statements\":[[0,\"Cancel\"]],\"locals\":[]}],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/import-subscribers.hbs" } });
});
define("ghost-admin/templates/components/modals/invite-new-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "INj7cW14", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Invite a New User\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"fieldset\",[]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"new-user-email\"],[13],[0,\"Email Address\"],[14],[0,\"\\n            \"],[1,[33,[\"gh-input\"],[[28,[\"email\"]]],[[\"enter\",\"class\",\"id\",\"type\",\"placeholder\",\"name\",\"autofocus\",\"autocapitalize\",\"autocorrect\",\"focusOut\",\"update\"],[\"sendInvite\",\"email\",\"new-user-email\",\"email\",\"Email Address\",\"email\",\"autofocus\",\"off\",\"off\",[33,[\"action\"],[[28,[null]],\"validate\",\"email\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"email\"]]],null]],null]]]],false],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"form-group for-select\"],[13],[0,\"\\n            \"],[11,\"label\",[]],[15,\"for\",\"new-user-role\"],[13],[0,\"Role\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-select\"],[15,\"tabindex\",\"0\"],[13],[0,\"\\n                \"],[1,[33,[\"one-way-select\"],null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",\"role\",[28,[\"roles\"]],\"id\",\"name\",[28,[\"role\"]],[33,[\"action\"],[[28,[null]],\"setRole\"],null]]]],false],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Send invitation now\"],[[\"successText\",\"task\",\"class\"],[\"Sent\",[28,[\"sendInvitation\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/invite-new-user.hbs" } });
});
define("ghost-admin/templates/components/modals/leave-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "laulYJMX", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to leave this page?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"\\n        Hey there! It looks like you're in the middle of writing something and\\n        you haven't saved all of your content.\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"p\",[]],[13],[0,\"Save before you go!\"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Stay\"],[14],[14],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-red\"],[5,[\"action\"],[[28,[null]],\"confirm\"]],[13],[11,\"span\",[]],[13],[0,\"Leave\"],[14],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/leave-editor.hbs" } });
});
define("ghost-admin/templates/components/modals/markdown-help", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tauXUKTD", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Markdown Help\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"section\",[]],[15,\"class\",\"markdown-help-container\"],[13],[0,\"\\n        \"],[11,\"table\",[]],[15,\"class\",\"modal-markdown-help-table\"],[13],[0,\"\\n            \"],[11,\"thead\",[]],[13],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"th\",[]],[13],[0,\"Markdown\"],[14],[0,\"\\n                \"],[11,\"th\",[]],[13],[0,\"Result\"],[14],[0,\"\\n                \"],[11,\"th\",[]],[13],[0,\"Shortcut\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tbody\",[]],[13],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"**text**\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"strong\",[]],[13],[0,\"Bold\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + B\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"*text*\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"em\",[]],[13],[0,\"Emphasize\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + I\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"~~text~~\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"del\",[]],[13],[0,\"Strike-through\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"[title](http://)\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"a\",[]],[15,\"href\",\"#\"],[13],[0,\"Link\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + K\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"`code`\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"code\",[]],[13],[0,\"Inline Code\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + Alt + C\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"![alt](http://)\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Image\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + Shift + I\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"* item\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"List\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + L\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"1. item\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ordered List\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + Alt + L\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"> quote\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Blockquote\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + '\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"==Highlight==\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[11,\"mark\",[]],[13],[0,\"Highlight\"],[14],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"# Heading\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"H1\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"## Heading\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"H2\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + H\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"tr\",[]],[13],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"### Heading\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"H3\"],[14],[0,\"\\n                \"],[11,\"td\",[]],[13],[0,\"Ctrl/⌘ + H (x2)\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        For further Markdown syntax reference: \"],[11,\"a\",[]],[15,\"href\",\"https://help.ghost.org/hc/en-us/articles/224410728-Markdown-Guide\"],[15,\"target\",\"_blank\"],[13],[0,\"Markdown Documentation\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/markdown-help.hbs" } });
});
define("ghost-admin/templates/components/modals/new-subscriber", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "C0TDUwzE", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Add a Subscriber\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"fieldset\",[]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"new-subscriber-email\"],[13],[0,\"Email Address\"],[14],[0,\"\\n            \"],[11,\"input\",[]],[15,\"type\",\"email\"],[16,\"value\",[28,[\"model\",\"email\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],\"updateEmail\"],[[\"value\"],[\"target.value\"]]],null],[15,\"id\",\"new-subscriber-email\"],[15,\"class\",\"gh-input email\"],[15,\"placeholder\",\"Email Address\"],[15,\"name\",\"email\"],[15,\"autofocus\",\"autofocus\"],[15,\"autocapitalize\",\"off\"],[15,\"autocorrect\",\"off\"],[13],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Add\"],[[\"successText\",\"task\",\"class\"],[\"Added\",[28,[\"addSubscriber\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/new-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modals/re-authenticate", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ExKG30Ku", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Please re-authenticate\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[16,\"class\",[34,[\"modal-body \",[33,[\"if\"],[[28,[\"authenticationError\"]],\"error\"],null]]]],[13],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"config\",\"ghostOAuth\"]]],null,{\"statements\":[[0,\"        \"],[1,[33,[\"gh-task-button\"],[\"Sign in with Ghost\"],[[\"task\",\"class\",\"tabindex\",\"autoWidth\"],[[28,[\"reauthenticate\"]],\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"3\",\"false\"]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[11,\"form\",[]],[15,\"id\",\"login\"],[15,\"class\",\"login-form\"],[15,\"method\",\"post\"],[15,\"novalidate\",\"novalidate\"],[5,[\"action\"],[[28,[null]],\"confirm\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"gh-validation-status-container\"],null,[[\"class\",\"errors\",\"property\",\"hasValidated\"],[\"password-wrap\",[28,[\"errors\"]],\"password\",[28,[\"hasValidated\"]]]],{\"statements\":[[0,\"                \"],[1,[33,[\"gh-input\"],[[28,[\"password\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"update\"],[\"password\",\"password\",\"Password\",\"password\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"password\"]]],null]],null]]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[11,\"div\",[]],[13],[0,\"\\n                \"],[1,[33,[\"gh-task-button\"],[\"Log in\"],[[\"task\",\"class\",\"type\"],[[28,[\"reauthenticate\"]],\"gh-btn gh-btn-blue gh-btn-icon\",\"submit\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"\\n\"],[6,[\"if\"],[[28,[\"authenticationError\"]]],null,{\"statements\":[[0,\"     \"],[11,\"p\",[]],[15,\"class\",\"response\"],[13],[1,[26,[\"authenticationError\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/re-authenticate.hbs" } });
});
define("ghost-admin/templates/components/modals/suspend-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RSbH7CXT", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to suspend this user?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"strong\",[]],[13],[0,\"WARNING:\"],[14],[0,\" This user will no longer be able to log in but their posts will be kept.\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Suspend\"],[[\"successText\",\"task\",\"class\",\"data-test-modal-confirm\"],[\"Suspended\",[28,[\"suspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/suspend-user.hbs" } });
});
define("ghost-admin/templates/components/modals/theme-warnings", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7WnZ6vU2", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[15,\"data-test-theme-warnings-title\",\"\"],[13],[1,[26,[\"title\"]],false],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"#\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"ul\",[]],[15,\"class\",\"theme-validation-errors\"],[15,\"data-test-theme-warnings\",\"\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"message\"]]],null,{\"statements\":[[0,\"            \"],[11,\"li\",[]],[13],[0,\"\\n                \"],[11,\"p\",[]],[15,\"data-test-theme-warnings-message\",\"\"],[13],[1,[26,[\"message\"]],false],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype fatal\"],[13],[0,\"Fatal Errors\"],[14],[0,\"\\n                \"],[11,\"p\",[]],[13],[11,\"em\",[]],[13],[0,\"(Must-fix to activate theme)\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"            \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"errors\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype\"],[13],[0,\"Errors\"],[14],[0,\"\\n                \"],[11,\"p\",[]],[13],[11,\"em\",[]],[13],[0,\"(Very recommended to fix, functionality \"],[11,\"span\",[]],[13],[0,\"could\"],[14],[0,\" be restricted)\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"errors\"]]],null,{\"statements\":[[0,\"            \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"warnings\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype\"],[13],[0,\"Warnings\"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"warnings\"]]],null,{\"statements\":[[0,\"            \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[15,\"data-test-modal-close-button\",\"\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[0,\"\\n        \"],[11,\"span\",[]],[13],[0,\"Close\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/theme-warnings.hbs" } });
});
define("ghost-admin/templates/components/modals/transfer-owner", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8dp/TLdC", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Transfer Ownership\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"\\n        Are you sure you want to transfer the ownership of this blog?\\n        You will not be able to undo this action.\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Yep - I'm sure\"],[[\"task\",\"class\"],[[28,[\"transferOwnership\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/transfer-owner.hbs" } });
});
define("ghost-admin/templates/components/modals/unsuspend-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "aU/bb+u2", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Are you sure you want to un-suspend this user?\"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n    \"],[11,\"strong\",[]],[13],[0,\"WARNING:\"],[14],[0,\" This user will be able to log in again and will have the same permissions they had previously.\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],[\"Un-suspend\"],[[\"successText\",\"task\",\"class\",\"data-test-modal-confirm\"],[\"Suspended\",[28,[\"unsuspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/unsuspend-user.hbs" } });
});
define("ghost-admin/templates/components/modals/upload-image", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8wO/F+t6", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"url\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"gh-image-uploader -with-image\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[13],[11,\"img\",[]],[16,\"src\",[26,[\"url\"]],null],[13],[14],[14],[0,\"\\n            \"],[11,\"a\",[]],[15,\"class\",\"image-cancel\"],[15,\"title\",\"Delete\"],[5,[\"action\"],[[28,[null]],\"removeImage\"]],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"trash\"],null],false],[0,\"\\n                \"],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Delete\"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[1,[33,[\"gh-image-uploader\"],null,[[\"image\",\"saveButton\",\"update\",\"accept\",\"extensions\",\"uploadUrl\"],[[28,[\"newUrl\"]],false,[33,[\"action\"],[[28,[null]],\"fileUploaded\"],null],[28,[\"model\",\"accept\"]],[28,[\"model\",\"extensions\"]],[28,[\"model\",\"uploadUrl\"]]]]],false],[0,\"\\n\"]],\"locals\":[]}],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[15,\"class\",\"gh-btn\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[11,\"span\",[]],[13],[0,\"Cancel\"],[14],[14],[0,\"\\n    \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"data-test-modal-accept-button\"],[[28,[\"uploadImage\"]],\"gh-btn gh-btn-blue right gh-btn-icon\",true]]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/upload-image.hbs" } });
});
define("ghost-admin/templates/components/modals/upload-theme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "d+TM4LBx", "block": "{\"statements\":[[11,\"header\",[]],[15,\"class\",\"modal-header\"],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"theme\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"                Upload successful with warnings/errors!\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                Upload successful!\\n\"]],\"locals\":[]}]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"            Invalid theme\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            Upload a theme\\n        \"]],\"locals\":[]}]],\"locals\":[]}],[0,\"    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"],[11,\"a\",[]],[15,\"class\",\"close\"],[15,\"href\",\"#\"],[15,\"title\",\"Close\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"Close\"],[14],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-body\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"theme\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"             \"],[11,\"ul\",[]],[15,\"class\",\"theme-validation-errors\"],[13],[0,\"\\n                \"],[11,\"li\",[]],[13],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"\\n                        \\\"\"],[1,[26,[\"themeName\"]],false],[0,\"\\\" uploaded successfully but some warnings/errors were detected.\\n                        You are still able to use and activate the theme. Here is your report...\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                        \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype\"],[13],[0,\"Errors\"],[14],[0,\"\\n                        \"],[11,\"p\",[]],[13],[11,\"em\",[]],[13],[0,\"(Very recommended to fix, functionality \"],[11,\"span\",[]],[13],[0,\"could\"],[14],[0,\" be restricted)\"],[14],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                        \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                        \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype\"],[13],[0,\"Warnings\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                        \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"            \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            \"],[11,\"p\",[]],[13],[0,\"\\n                \\\"\"],[1,[26,[\"themeName\"]],false],[0,\"\\\" uploaded successfully.\\n                \"],[6,[\"if\"],[[28,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"Do you want to activate it now?\"]],\"locals\":[]},null],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"        \"],[11,\"p\",[]],[13],[0,\"\\n            \\\"\"],[1,[26,[\"fileThemeName\"]],false],[0,\"\\\" will overwrite an existing theme of the same name. Are you sure?\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[33,[\"or\"],[[28,[\"validationErrors\"]],[28,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"        \"],[11,\"ul\",[]],[15,\"class\",\"theme-validation-errors\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                    \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype fatal\"],[13],[0,\"Fatal Errors\"],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[11,\"em\",[]],[13],[0,\"(Must-fix to activate theme)\"],[14],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"theme-validation-errordescription\"],[13],[0,\"\\n                    \"],[11,\"h2\",[]],[15,\"class\",\"theme-validation-errortype\"],[13],[0,\"Errors\"],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[11,\"em\",[]],[13],[0,\"(Very recommended to fix, functionality \"],[11,\"span\",[]],[13],[0,\"could\"],[14],[0,\" be restricted)\"],[14],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"each\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                \"],[11,\"li\",[]],[15,\"class\",\"theme-validation-item\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-theme-error-li\"],null,[[\"error\"],[[28,[\"error\"]]]]],false],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"        \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[1,[33,[\"gh-file-uploader\"],null,[[\"url\",\"paramName\",\"accept\",\"labelText\",\"validate\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\",\"uploadFailed\",\"listenTo\"],[[28,[\"uploadUrl\"]],\"theme\",[28,[\"accept\"]],\"Click to select or drag-and-drop your theme zip file here.\",[33,[\"action\"],[[28,[null]],\"validateTheme\"],null],[33,[\"action\"],[[28,[null]],\"uploadStarted\"],null],[33,[\"action\"],[[28,[null]],\"uploadFinished\"],null],[33,[\"action\"],[[28,[null]],\"uploadSuccess\"],null],[33,[\"action\"],[[28,[null]],\"uploadFailed\"],null],\"themeUploader\"]]],false],[0,\"\\n    \"]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[]}],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[15,\"class\",\"modal-footer\"],[13],[0,\"\\n    \"],[11,\"button\",[]],[16,\"disabled\",[26,[\"closeDisabled\"]],null],[15,\"class\",\"gh-btn\"],[15,\"data-test-close-button\",\"\"],[5,[\"action\"],[[28,[null]],\"closeModal\"]],[13],[0,\"\\n        \"],[11,\"span\",[]],[13],[6,[\"if\"],[[28,[\"theme\"]]],null,{\"statements\":[[0,\"Close\"]],\"locals\":[]},{\"statements\":[[0,\"Cancel\"]],\"locals\":[]}],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-red\"],[15,\"data-test-overwrite-button\",\"\"],[5,[\"action\"],[[28,[null]],\"confirmOverwrite\"]],[13],[0,\"\\n            \"],[11,\"span\",[]],[13],[0,\"Overwrite\"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"validationErrors\"]]],null,{\"statements\":[[0,\"        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[15,\"data-test-try-again-button\",\"\"],[5,[\"action\"],[[28,[null]],\"reset\"]],[13],[0,\"\\n            \"],[11,\"span\",[]],[13],[0,\"Try Again\"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[15,\"data-test-activate-now-button\",\"\"],[5,[\"action\"],[[28,[null]],\"activate\"]],[13],[0,\"\\n            \"],[11,\"span\",[]],[13],[0,\"Activate Now\"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/upload-theme.hbs" } });
});
define("ghost-admin/templates/components/power-select-vertical-collection-options", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XKicMQaZ", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"select\",\"loading\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"loadingMessage\"]]],null,{\"statements\":[[0,\"        \"],[11,\"li\",[]],[15,\"class\",\"ember-power-select-option ember-power-select-option--loading-message\"],[15,\"role\",\"option\"],[13],[1,[26,[\"loadingMessage\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"vertical-collection\"],[[28,[\"options\"]]],[[\"minHeight\",\"staticHeight\",\"bufferSize\"],[30,true,10]],{\"statements\":[[0,\"    \"],[11,\"li\",[]],[15,\"class\",\"ember-power-select-option\"],[16,\"aria-selected\",[34,[[33,[\"ember-power-select-is-selected\"],[[28,[\"opt\"]],[28,[\"select\",\"selected\"]]],null]]]],[16,\"aria-disabled\",[33,[\"ember-power-select-true-string-if-present\"],[[28,[\"opt\",\"disabled\"]]],null],null],[16,\"aria-current\",[34,[[33,[\"eq\"],[[28,[\"opt\"]],[28,[\"select\",\"highlighted\"]]],null]]]],[16,\"data-option-index\",[34,[[26,[\"groupIndex\"]],[28,[\"index\"]]]]],[15,\"role\",\"option\"],[13],[0,\"\\n        \"],[18,\"default\",[[28,[\"opt\"]],[28,[\"select\"]]]],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[\"opt\",\"index\"]},null]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/power-select-vertical-collection-options.hbs" } });
});
define("ghost-admin/templates/components/power-select/trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cXB3+MdZ", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"select\",\"selected\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"        \"],[1,[33,[\"component\"],[[28,[\"selectedItemComponent\"]]],[[\"option\",\"select\"],[[33,[\"readonly\"],[[28,[\"select\",\"selected\"]]],null],[33,[\"readonly\"],[[28,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"        \"],[11,\"span\",[]],[15,\"class\",\"ember-power-select-selected-item\"],[13],[18,\"default\",[[28,[\"select\",\"selected\"]],[28,[\"select\"]]]],[14],[0,\"\\n\"]],\"locals\":[]}],[6,[\"if\"],[[33,[\"and\"],[[28,[\"allowClear\"]],[33,[\"not\"],[[28,[\"select\",\"disabled\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[11,\"span\",[]],[15,\"class\",\"ember-power-select-clear-btn\"],[16,\"onmousedown\",[33,[\"action\"],[[28,[null]],\"clear\"],null],null],[16,\"ontouchstart\",[33,[\"action\"],[[28,[null]],\"clear\"],null],null],[13],[0,\"×\"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},{\"statements\":[[0,\"    \"],[1,[33,[\"component\"],[[28,[\"placeholderComponent\"]]],[[\"placeholder\"],[[28,[\"placeholder\"]]]]],false],[0,\"\\n\"]],\"locals\":[]}],[1,[33,[\"inline-svg\"],[\"arrow-down-small\"],null],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/power-select/trigger.hbs" } });
});
define("ghost-admin/templates/editor/edit-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zGxnN/Ud", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-view\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/editor/edit-loading.hbs" } });
});
define("ghost-admin/templates/editor/edit", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8uuaqGwe", "block": "{\"statements\":[[6,[\"gh-editor\"],null,[[\"tagName\",\"class\",\"navIsClosed\"],[\"section\",\"gh-editor gh-view\",[28,[\"navIsClosed\"]]]],{\"statements\":[[0,\"    \"],[11,\"header\",[]],[16,\"class\",[34,[\"gh-editor-header \",[28,[\"editor\",\"headerClass\"]]]]],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-editor-status\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-editor-post-status\"],null,[[\"post\",\"isSaving\"],[[28,[\"model\"]],[28,[\"autosave\",\"isRunning\"]]]]],false],[0,\"\\n        \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"scheduleCountdown\"]]],null,{\"statements\":[[0,\"            \"],[11,\"time\",[]],[16,\"datetime\",[34,[[28,[\"post\",\"publishedAtUTC\"]]]]],[15,\"class\",\"gh-notification gh-notification-schedule\"],[15,\"data-test-schedule-countdown\",\"\"],[13],[0,\"\\n                Post will be published \"],[1,[26,[\"scheduleCountdown\"]],false],[0,\".\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"model\",\"isNew\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-publishmenu\"],null,[[\"post\",\"saveTask\",\"setSaveType\",\"onOpen\"],[[28,[\"model\"]],[28,[\"save\"]],[33,[\"action\"],[[28,[null]],\"setSaveType\"],null],[33,[\"action\"],[[28,[null]],\"cancelAutosave\"],null]]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"post-settings\"],[15,\"title\",\"Settings\"],[15,\"data-test-psm-trigger\",\"\"],[5,[\"action\"],[[28,[null]],\"openSettingsMenu\"]],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"settings\"],null],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n\"],[6,[\"gh-markdown-editor\"],null,[[\"tabindex\",\"placeholder\",\"autofocus\",\"uploadedImageUrls\",\"mobiledoc\",\"isFullScreen\",\"onChange\",\"onFullScreenToggle\",\"onPreviewToggle\",\"onSplitScreenToggle\",\"onImageFilesSelected\",\"showMarkdownHelp\",\"imageMimeTypes\"],[\"2\",\"Begin writing your story...\",[28,[\"shouldFocusEditor\"]],[28,[\"editor\",\"uploadedImageUrls\"]],[33,[\"readonly\"],[[28,[\"model\",\"scratch\"]]],null],[28,[\"editor\",\"isFullScreen\"]],[33,[\"action\"],[[28,[null]],\"updateScratch\"],null],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"toggleFullScreen\"]]],null],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"togglePreview\"]]],null],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"toggleSplitScreen\"]]],null],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"uploadImages\"]]],null],[33,[\"route-action\"],[\"toggleMarkdownHelpModal\"],null],[28,[\"editor\",\"imageMimeTypes\"]]]],{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"gh-markdown-editor-pane\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-textarea\"],[[28,[\"model\",\"titleScratch\"]]],[[\"class\",\"placeholder\",\"tabindex\",\"autoExpand\",\"update\",\"focusOut\",\"keyEvents\",\"data-test-editor-title-input\"],[\"gh-editor-title\",\"Post Title\",\"1\",\".gh-markdown-editor-pane\",[33,[\"action\"],[[28,[null]],\"updateTitle\"],null],[33,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"saveTitle\"]]],null]],null],[33,[\"hash\"],null,[[\"9\",\"13\"],[[33,[\"action\"],[[28,[null]],[28,[\"markdown\",\"focus\"]],\"bottom\"],null],[33,[\"action\"],[[28,[null]],[28,[\"markdown\",\"focus\"]],\"top\"],null]]]],true]]],false],[0,\"\\n            \"],[1,[28,[\"markdown\",\"editor\"]],false],[0,\"\\n        \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"markdown\",\"isSplitScreen\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"gh-markdown-editor-preview\"],[13],[0,\"\\n                \"],[11,\"h1\",[]],[15,\"class\",\"gh-markdown-editor-preview-title\"],[13],[1,[28,[\"model\",\"titleScratch\"]],false],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-markdown-editor-preview-content\"],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n        \"],[1,[33,[\"gh-tour-item\"],[\"using-the-editor\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\".gh-editor-footer\",\"top left\",\"0 20%\",\"bottom\"]]],false],[0,\"\\n\"]],\"locals\":[\"markdown\"]},null],[0,\"\\n\"],[0,\"    \"],[11,\"footer\",[]],[15,\"class\",\"gh-editor-footer\"],[13],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"editor\",\"isDraggedOver\"]]],null,{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"drop-target gh-editor-drop-target\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"drop-target-message\"],[13],[0,\"\\n                \"],[11,\"h3\",[]],[13],[0,\"Drop image(s) here to upload\"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"editor\",\"droppedFiles\"]]],null,{\"statements\":[[6,[\"gh-uploader\"],null,[[\"files\",\"accept\",\"extensions\",\"onComplete\",\"onCancel\"],[[28,[\"editor\",\"droppedFiles\"]],[28,[\"editor\",\"imageMimeTypes\"]],[28,[\"editor\",\"imageExtensions\"]],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"uploadComplete\"]]],null],[33,[\"action\"],[[28,[null]],[28,[\"editor\",\"uploadCancelled\"]]],null]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-editor-image-upload \",[33,[\"if\"],[[28,[\"upload\",\"errors\"]],\"-error\"],null]]]],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-editor-image-upload-content\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"upload\",\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"h3\",[]],[13],[0,\"Upload failed\"],[14],[0,\"\\n\\n\"],[6,[\"each\"],[[28,[\"upload\",\"errors\"]]],null,{\"statements\":[[0,\"                            \"],[11,\"div\",[]],[15,\"class\",\"failed\"],[13],[1,[28,[\"error\",\"fileName\"]],false],[0,\" - \"],[1,[28,[\"error\",\"message\"]],false],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"\\n                        \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-grey gh-btn-icon\"],[5,[\"action\"],[[28,[null]],[28,[\"upload\",\"cancel\"]]]],[13],[0,\"\\n                            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"close\"],null],false],[0,\" Close\"],[14],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"\\n                        \"],[11,\"h3\",[]],[13],[0,\"Uploading \"],[1,[33,[\"pluralize\"],[[28,[\"upload\",\"files\",\"length\"]],\"image\"],null],false],[0,\"...\"],[14],[0,\"\\n                        \"],[1,[28,[\"upload\",\"progressBar\"]],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"upload\"]},null]],\"locals\":[]},null]],\"locals\":[\"editor\"]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showDeletePostModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-post\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"post\",\"onSuccess\"],[[28,[\"model\"]],[33,[\"route-action\"],[\"redirectToContentScreen\"],null]]]],[33,[\"action\"],[[28,[null]],\"toggleDeletePostModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showLeaveEditorModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"leave-editor\"],[[\"confirm\",\"close\",\"modifier\"],[[33,[\"action\"],[[28,[null]],\"leaveEditor\"],null],[33,[\"action\"],[[28,[null]],\"toggleLeaveEditorModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showReAuthenticateModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"re-authenticate\"],[[\"close\",\"modifier\"],[[33,[\"action\"],[[28,[null]],\"toggleReAuthenticateModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"liquid-wormhole\"],null,null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-post-settings-menu\"],null,[[\"model\",\"showSettingsMenu\",\"closeNavMenu\",\"closeMenus\",\"deletePost\",\"updateSlug\"],[[28,[\"model\"]],[28,[\"application\",\"showSettingsMenu\"]],[33,[\"action\"],[[28,[null]],\"closeNavMenu\"],null],[33,[\"action\"],[[28,[null]],\"closeMenus\"],null],[33,[\"action\"],[[28,[null]],\"toggleDeletePostModal\"],null],[28,[\"updateSlug\"]]]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/editor/edit.hbs" } });
});
define("ghost-admin/templates/error", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "FrocYlbp", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-view\"],[13],[0,\"\\n    \"],[11,\"section\",[]],[15,\"class\",\"error-content error-404 js-error-container\"],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"error-details\"],[13],[0,\"\\n             \"],[11,\"img\",[]],[15,\"class\",\"error-ghost\"],[15,\"src\",\"assets/img/404-ghost@2x-ebb9fb38ad8ffff4c3f23500f4583fb8.png\"],[15,\"srcset\",\"assets/img/404-ghost-651b3fdcf3b50d842e14183baee4de38.png 1x, assets/img/404-ghost@2x-ebb9fb38ad8ffff4c3f23500f4583fb8.png 2x\"],[13],[14],[0,\"\\n             \"],[11,\"section\",[]],[15,\"class\",\"error-message\"],[13],[0,\"\\n                 \"],[11,\"h1\",[]],[15,\"class\",\"error-code\"],[13],[1,[26,[\"code\"]],false],[14],[0,\"\\n                 \"],[11,\"h2\",[]],[15,\"class\",\"error-description\"],[13],[1,[26,[\"message\"]],false],[14],[0,\"\\n             \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"stack\"]]],null,{\"statements\":[[0,\"        \"],[11,\"section\",[]],[15,\"class\",\"error-stack\"],[13],[0,\"\\n            \"],[11,\"h3\",[]],[13],[0,\"Stack Trace\"],[14],[0,\"\\n            \"],[11,\"p\",[]],[13],[11,\"strong\",[]],[13],[1,[26,[\"message\"]],false],[14],[14],[0,\"\\n            \"],[11,\"ul\",[]],[15,\"class\",\"error-stack-list\"],[13],[0,\"\\n\"],[6,[\"each\"],[[28,[\"stack\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"li\",[]],[13],[0,\"\\n                        at\\n                        \"],[6,[\"if\"],[[28,[\"item\",\"function\"]]],null,{\"statements\":[[11,\"em\",[]],[15,\"class\",\"error-stack-function\"],[13],[1,[28,[\"item\",\"function\"]],false],[14]],\"locals\":[]},null],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"error-stack-file\"],[13],[0,\"(\"],[1,[28,[\"item\",\"at\"]],false],[0,\")\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[\"item\"]},null],[0,\"            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/error.hbs" } });
});
define("ghost-admin/templates/posts-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XTim6Enu", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Your stories\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"editor.new\"],[[\"class\",\"data-test-new-post-button\"],[\"gh-btn gh-btn-green\",true]],{\"statements\":[[11,\"span\",[]],[13],[0,\"New story\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter-left\"],[13],[0,\"\\n\"],[6,[\"power-select\"],null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-type-select\"],[\"All posts\",[28,[\"selectedType\"]],[28,[\"availableTypes\"]],\"name\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-type\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"type\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"type\"]},null],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[6,[\"power-select\"],null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-author-select\"],[\"All authors\",[28,[\"selectedAuthor\"]],[28,[\"availableAuthors\"]],\"name\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-author\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"author\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"author\"]},null]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"power-select\"],null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"data-test-tag-select\"],[\"All tags\",[28,[\"selectedTag\"]],[28,[\"availableTags\"]],\"name\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-tag\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"tag\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"tag\"]},null],[0,\"        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter-right\"],[13],[0,\"\\n            Sort by:\\n\"],[6,[\"power-select\"],null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"horizontalPosition\",\"matchTriggerWidth\",\"data-test-order-select\"],[[28,[\"selectedOrder\"]],[28,[\"availableOrders\"]],false,[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-sort\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"right\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"order\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"order\"]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/posts-loading.hbs" } });
});
define("ghost-admin/templates/posts", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OllpjRXo", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Your stories\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"editor.new\"],[[\"class\",\"data-test-new-post-button\"],[\"gh-btn gh-btn-green\",true]],{\"statements\":[[11,\"span\",[]],[13],[0,\"New story\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter-left\"],[13],[0,\"\\n\"],[6,[\"power-select\"],null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-type-select\"],[[28,[\"selectedType\"]],[28,[\"availableTypes\"]],false,[33,[\"action\"],[[28,[null]],\"changeType\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-type\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"type\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"type\"]},null],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[6,[\"power-select\"],null,[[\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"data-test-author-select\"],[[28,[\"selectedAuthor\"]],[28,[\"availableAuthors\"]],\"name\",[33,[\"action\"],[[28,[null]],\"changeAuthor\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-author\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search authors\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"author\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"author\"]},null]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"power-select\"],null,[[\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"optionsComponent\",\"data-test-tag-select\"],[[28,[\"selectedTag\"]],[28,[\"availableTags\"]],\"name\",[33,[\"action\"],[[28,[null]],\"changeTag\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-tag\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,\"power-select-vertical-collection-options\",true]],{\"statements\":[[0,\"                \"],[1,[28,[\"tag\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"tag\"]},null],[0,\"        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-contentfilter-right\"],[13],[0,\"\\n            Sort by:\\n\"],[6,[\"power-select\"],null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"horizontalPosition\",\"matchTriggerWidth\",\"data-test-order-select\"],[[28,[\"selectedOrder\"]],[28,[\"availableOrders\"]],false,[33,[\"action\"],[[28,[null]],\"changeOrder\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-sort\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"right\",false,true]],{\"statements\":[[0,\"                \"],[1,[28,[\"order\",\"name\"]],false],[0,\"\\n\"]],\"locals\":[\"order\"]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"content-list\"],[13],[0,\"\\n        \"],[11,\"ol\",[]],[15,\"class\",\"posts-list\"],[13],[0,\"\\n\"],[6,[\"each\"],[[28,[\"model\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-posts-list-item\"],null,[[\"post\",\"onDoubleClick\",\"data-test-post-id\"],[[28,[\"post\"]],[33,[\"action\"],[[28,[null]],\"openEditor\"],null],[28,[\"post\",\"id\"]]]]],false],[0,\"\\n\"]],\"locals\":[\"post\"]},{\"statements\":[[0,\"                \"],[11,\"li\",[]],[15,\"class\",\"no-posts-box\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"no-posts\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showingAll\"]]],null,{\"statements\":[[0,\"                            \"],[11,\"h3\",[]],[13],[0,\"You haven't written any stories yet!\"],[14],[0,\"\\n                            \"],[6,[\"link-to\"],[\"editor.new\"],null,{\"statements\":[[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-green gh-btn-lg\"],[13],[11,\"span\",[]],[13],[0,\"Write a new Story\"],[14],[14]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                            \"],[11,\"h3\",[]],[13],[0,\"No stories match the current filter\"],[14],[0,\"\\n                            \"],[6,[\"link-to\"],[\"posts.index\",[33,[\"query-params\"],null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]],null,{\"statements\":[[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-lg\"],[13],[11,\"span\",[]],[13],[0,\"Show all stories\"],[14],[14]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]}],[0,\"                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"        \"],[14],[0,\"\\n\\n        \"],[1,[33,[\"infinity-loader\"],null,[[\"infinityModel\",\"scrollable\",\"triggerOffset\"],[[28,[\"model\"]],\".gh-main\",1000]]],false],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[1,[26,[\"outlet\"]],false],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/posts.hbs" } });
});
define("ghost-admin/templates/reset", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+NALniQ+", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-flow\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-flow-content-wrap\"],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-flow-content fade-in\"],[13],[0,\"\\n            \"],[11,\"form\",[]],[15,\"id\",\"reset\"],[15,\"class\",\"gh-signin\"],[15,\"method\",\"post\"],[15,\"novalidate\",\"novalidate\"],[5,[\"action\"],[[28,[null]],\"submit\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"                    \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-lock\"],[13],[0,\"\\n                        \"],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\"\\n                        \"],[1,[33,[\"gh-input\"],[[28,[\"newPassword\"]]],[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"update\"],[\"password\",\"newpassword\",\"Password\",\"password\",\"off\",\"autofocus\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"newPassword\"]]],null]],null]]]],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"                    \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-lock\"],[13],[0,\"\\n                        \"],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\"\\n                        \"],[1,[33,[\"gh-input\"],[[28,[\"ne2Password\"]]],[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"update\"],[\"password\",\"ne2password\",\"Confirm Password\",\"password\",\"off\",\"autofocus\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"ne2Password\"]]],null]],null]]]],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n                \"],[1,[33,[\"gh-task-button\"],[\"Reset Password\"],[[\"task\",\"class\",\"type\",\"autoWidth\"],[[28,[\"resetPassword\"]],\"gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"false\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n\\n            \"],[11,\"p\",[]],[15,\"class\",\"main-error\"],[13],[1,[26,[\"flowErrors\"]],true],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/reset.hbs" } });
});
define("ghost-admin/templates/settings/apps-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "m+CMQMyB", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps-loading.hbs" } });
});
define("ghost-admin/templates/settings/apps", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uGL+Jr99", "block": "{\"statements\":[[1,[26,[\"outlet\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps.hbs" } });
});
define("ghost-admin/templates/settings/apps/amp", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PwRJR2Vc", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[14],[0,\"\\n            AMP\\n        \"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n        \"],[11,\"br\",[]],[13],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"app-grid\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"app-cell\"],[13],[0,\"\\n                \"],[11,\"img\",[]],[15,\"class\",\"app-icon\"],[15,\"src\",\"assets/img/ampicon-5ce435966fd374ee1bbb9d6df810da6a.png\"],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"app-cell\"],[13],[0,\"\\n                \"],[11,\"h3\",[]],[13],[0,\"AMP\"],[14],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"Accelerated Mobile Pages\"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"AMP configuration\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Enable AMP\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Enable \"],[11,\"a\",[]],[15,\"href\",\"https://ampproject.org\"],[15,\"target\",\"_blank\"],[13],[0,\"Google Accelerated Mobile Pages\"],[14],[0,\" for your posts\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[0,\"\\n                    \"],[11,\"label\",[]],[15,\"for\",\"amp\"],[15,\"class\",\"checkbox\"],[13],[0,\"\\n                        \"],[1,[33,[\"one-way-checkbox\"],[[28,[\"model\"]]],[[\"id\",\"name\",\"type\",\"update\",\"data-test-amp-checkbox\"],[\"amp\",\"amp\",\"checkbox\",[33,[\"action\"],[[28,[null]],\"update\"],null],true]]],false],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/amp.hbs" } });
});
define("ghost-admin/templates/settings/apps/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "bnfIOss9", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Apps\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"apps-grid-container\"],[13],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"apps-grid-title\"],[13],[0,\"Available integrations\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-grid\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-grid-cell\"],[13],[0,\"\\n\"],[6,[\"link-to\"],[\"settings.apps.slack\"],[[\"id\"],[\"slack-link\"]],{\"statements\":[[0,\"                \"],[11,\"article\",[]],[15,\"class\",\"apps-card-app\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n                        \"],[11,\"figure\",[]],[15,\"class\",\"apps-card-app-icon\"],[15,\"style\",\"background-image:url(assets/img/slackicon-202e5894fe22e16be014e72b5f7785a1.png)\"],[13],[14],[0,\"\\n                        \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                            \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[13],[0,\"Slack\"],[14],[0,\"\\n                            \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[13],[0,\"A team communication tool\"],[14],[0,\"\\n                        \"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-card-right\"],[13],[0,\"\\n                        \"],[11,\"div\",[]],[15,\"class\",\"apps-configured\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"slack\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[11,\"span\",[]],[15,\"class\",\"green\"],[13],[0,\"Active\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                                \"],[11,\"span\",[]],[13],[0,\"Configure\"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                            \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n                        \"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-grid-cell\"],[13],[0,\"\\n\"],[6,[\"link-to\"],[\"settings.apps.amp\"],[[\"id\"],[\"amp-link\"]],{\"statements\":[[0,\"                \"],[11,\"article\",[]],[15,\"class\",\"apps-card-app\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n                        \"],[11,\"figure\",[]],[15,\"class\",\"apps-card-app-icon\"],[15,\"style\",\"background-image:url(assets/img/ampicon-5ce435966fd374ee1bbb9d6df810da6a.png)\"],[13],[14],[0,\"\\n                        \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                            \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[13],[0,\"AMP\"],[14],[0,\"\\n                            \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[13],[0,\"Google Accelerated Mobile Pages\"],[14],[0,\"\\n                        \"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-card-right\"],[13],[0,\"\\n                        \"],[11,\"div\",[]],[15,\"class\",\"apps-configured\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"amp\"]]],null,{\"statements\":[[0,\"                                \"],[11,\"span\",[]],[15,\"class\",\"green\"],[13],[0,\"Active\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                                \"],[11,\"span\",[]],[13],[0,\"Configure\"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                            \"],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[0,\"\\n                        \"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"p\",[]],[15,\"class\",\"apps-grid-note\"],[13],[0,\"(More coming soon!)\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/index.hbs" } });
});
define("ghost-admin/templates/settings/apps/slack", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OaSxa3Zb", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[14],[0,\"\\n            Slack\\n        \"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n        \"],[11,\"br\",[]],[13],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"app-grid\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"app-cell\"],[13],[0,\"\\n                \"],[11,\"img\",[]],[15,\"class\",\"app-icon\"],[15,\"src\",\"assets/img/slackicon-202e5894fe22e16be014e72b5f7785a1.png\"],[13],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"app-cell\"],[13],[0,\"\\n                \"],[11,\"h3\",[]],[13],[0,\"Slack\"],[14],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"A messaging app for teams\"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"form\",[]],[15,\"class\",\"app-config-form\"],[15,\"id\",\"slack-settings\"],[15,\"novalidate\",\"novalidate\"],[5,[\"action\"],[[28,[null]],\"save\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Slack configuration\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Webhook URL\"],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Automatically send newly published posts to a channel in Slack\"],[14],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content-extended\"],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"url\"]],{\"statements\":[[0,\"                            \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"url\"]]],[[\"name\",\"update\",\"onenter\",\"placeholder\",\"data-test-slack-url-input\"],[\"slack[url]\",[33,[\"action\"],[[28,[null]],\"updateURL\"],null],[33,[\"action\"],[[28,[null]],\"save\"],null],\"https://hooks.slack.com/services/...\",true]]],false],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"model\",\"errors\",\"url\"]]],null,{\"statements\":[[0,\"                                \"],[11,\"p\",[]],[13],[0,\"Set up a new incoming webhook \"],[11,\"a\",[]],[15,\"href\",\"https://my.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks\"],[15,\"target\",\"_blank\"],[13],[0,\"here\"],[14],[0,\", and grab the URL.\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                                \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"url\"]]],false],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]},null],[0,\"                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[1,[33,[\"gh-task-button\"],[\"Send Test Notification\"],[[\"task\",\"successText\",\"class\",\"disabled\",\"data-test-send-notification-button\"],[[28,[\"sendTestNotification\"]],\"Sent\",\"gh-btn gh-btn-grey gh-btn-icon\",[28,[\"testNotificationDisabled\"]],true]]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/slack.hbs" } });
});
define("ghost-admin/templates/settings/code-injection-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "t6uiAnOD", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Code injection\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"disabled\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true,true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection-loading.hbs" } });
});
define("ghost-admin/templates/settings/code-injection", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "lp3TPJ+B", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Code injection\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-continer\"],[13],[0,\"\\n        \"],[11,\"form\",[]],[15,\"id\",\"settings-code\"],[15,\"novalidate\",\"novalidate\"],[13],[0,\"\\n            \"],[11,\"fieldset\",[]],[13],[0,\"\\n                \"],[11,\"p\",[]],[13],[0,\"\\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n                \"],[14],[0,\"\\n\\n                \"],[11,\"div\",[]],[15,\"class\",\"form-group settings-code\"],[13],[0,\"\\n                    \"],[11,\"label\",[]],[15,\"for\",\"ghost-head\"],[13],[0,\"Blog Header\"],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Code here will be injected into the \"],[11,\"code\",[]],[13],[0,\"{{ghost_head}}\"],[14],[0,\" tag on every page of your blog\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-cm-editor\"],[[28,[\"model\",\"ghostHead\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-head\",\"gh-input settings-code-editor\",\"codeInjection[ghost_head]\",\"text\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"ghostHead\"]]],null]],null]]]],false],[0,\"\\n                \"],[14],[0,\"\\n\\n                \"],[11,\"div\",[]],[15,\"class\",\"form-group settings-code\"],[13],[0,\"\\n                    \"],[11,\"label\",[]],[15,\"for\",\"ghost-foot\"],[13],[0,\"Blog Footer\"],[14],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Code here will be injected into the \"],[11,\"code\",[]],[13],[0,\"{{ghost_foot}}\"],[14],[0,\" tag on every page of your blog\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-cm-editor\"],[[28,[\"model\",\"ghostFoot\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-foot\",\"gh-input settings-code-editor\",\"codeInjection[ghost_foot]\",\"text\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"ghostFoot\"]]],null]],null]]]],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection.hbs" } });
});
define("ghost-admin/templates/settings/design-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HMQUpS64", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Design\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"disabled\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design-loading.hbs" } });
});
define("ghost-admin/templates/settings/design", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HhvGCYRH", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Design\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"task\",\"class\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Navigation\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-blognav-container\"],[13],[0,\"\\n            \"],[11,\"form\",[]],[15,\"id\",\"settings-navigation\"],[15,\"class\",\"gh-blognav\"],[15,\"novalidate\",\"novalidate\"],[13],[0,\"\\n\"],[6,[\"sortable-group\"],null,[[\"onChange\"],[[33,[\"action\"],[[28,[null]],\"reorderItems\"],null]]],{\"statements\":[[6,[\"each\"],[[28,[\"model\",\"navigation\"]]],null,{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-navitem\"],null,[[\"navItem\",\"baseUrl\",\"addItem\",\"deleteItem\",\"updateUrl\",\"group\"],[[28,[\"navItem\"]],[28,[\"blogUrl\"]],\"addNavItem\",\"deleteNavItem\",\"updateUrl\",[28,[\"group\"]]]]],false],[0,\"\\n\"]],\"locals\":[\"navItem\"]},null]],\"locals\":[\"group\"]},null],[0,\"                \"],[1,[33,[\"gh-navitem\"],null,[[\"navItem\",\"baseUrl\",\"addItem\",\"updateUrl\"],[[28,[\"newNavItem\"]],[28,[\"blogUrl\"]],\"addNavItem\",\"updateUrl\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Themes\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-themes-container\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-theme-table\"],null,[[\"themes\",\"activateTheme\",\"downloadTheme\",\"deleteTheme\"],[[28,[\"themes\"]],[33,[\"action\"],[[28,[null]],\"activateTheme\"],null],[33,[\"action\"],[[28,[null]],\"downloadTheme\"],null],[33,[\"action\"],[[28,[null]],\"deleteTheme\"],null]]]],false],[0,\"\\n\\n\"],[6,[\"link-to\"],[\"settings.design.uploadtheme\"],[[\"class\",\"data-test-upload-theme-button\"],[\"gh-btn gh-btn-green gh-themes-uploadbtn\",true]],{\"statements\":[[0,\"                \"],[11,\"span\",[]],[13],[0,\"Upload a theme\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDeleteThemeModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-theme\"],[[\"model\",\"close\",\"confirm\",\"modifier\"],[[33,[\"hash\"],null,[[\"theme\",\"download\"],[[28,[\"themeToDelete\"]],[33,[\"action\"],[[28,[null]],\"downloadTheme\",[28,[\"themeToDelete\"]]],null]]]],[33,[\"action\"],[[28,[null]],\"hideDeleteThemeModal\"],null],[33,[\"action\"],[[28,[null]],\"deleteTheme\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showThemeWarningsModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"theme-warnings\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"title\",\"warnings\",\"errors\",\"message\"],[\"Activated successful with warnings/errors!\",[28,[\"themeWarnings\"]],[28,[\"themeErrors\"]],[28,[\"message\"]]]]],[33,[\"action\"],[[28,[null]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showThemeErrorsModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"theme-warnings\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"title\",\"errors\",\"fatalErrors\"],[\"Activation failed\",[28,[\"themeErrors\"]],[28,[\"themeFatalErrors\"]]]]],[33,[\"action\"],[[28,[null]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[1,[26,[\"outlet\"]],false],[0,\"\\n\\n\"],[1,[33,[\"gh-tour-item\"],[\"upload-a-theme\"],[[\"target\",\"throbberAttachment\",\"popoverTriangleClass\"],[\".gh-themes-uploadbtn\",\"top middle\",\"bottom\"]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design.hbs" } });
});
define("ghost-admin/templates/settings/design/uploadtheme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6iQhkXp3", "block": "{\"statements\":[[1,[33,[\"gh-fullscreen-modal\"],[\"upload-theme\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"themes\",\"activate\"],[[28,[\"model\"]],[33,[\"route-action\"],[\"activateTheme\"],null]]]],[33,[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design/uploadtheme.hbs" } });
});
define("ghost-admin/templates/settings/general-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6yLAIb6r", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"General\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],[\"Save settings\"],[[\"task\",\"class\",\"disabled\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true,true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general-loading.hbs" } });
});
define("ghost-admin/templates/settings/general", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EmVg6Owl", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"General\"],[14],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],[\"Save settings\"],[[\"task\",\"class\",\"data-test-save-button\"],[[28,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Publication info\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Title & description\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"The details used to identify your publication around the web\"],[14],[0,\"\\n\"],[6,[\"liquid-if\"],[[28,[\"pubInfoOpen\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content-extended\"],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"title\"]],{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"title\"]]],[[\"type\",\"focusOut\",\"update\",\"data-test-title-input\"],[\"text\",[33,[\"action\"],[[28,[null]],\"validate\",\"title\"],[[\"target\"],[[28,[\"model\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"title\"]]],null]],null],true]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"title\"]]],false],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"The name of your site\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"description\",\"description-container\"]],{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"description\"]]],[[\"type\",\"focusOut\",\"update\",\"data-test-description-input\"],[\"text\",[33,[\"action\"],[[28,[null]],\"validate\",\"description\"],[[\"target\"],[[28,[\"model\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"description\"]]],null]],null],true]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"description\"]]],false],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"Used in your theme, meta data and search results\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[15,\"data-test-toggle-pub-info\",\"\"],[5,[\"action\"],[[28,[null]],[33,[\"toggle\"],[\"pubInfoOpen\",[28,[null]]],null]]],[13],[11,\"span\",[]],[13],[1,[33,[\"if\"],[[28,[\"pubInfoOpen\"]],\"Close\",\"Expand\"],null],false],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Site timezone\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Set the time and date of your publication, used for all published posts\"],[14],[0,\"\\n\"],[6,[\"liquid-if\"],[[28,[\"timezoneOpen\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content-extended\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-timezone-select\"],null,[[\"activeTimezone\",\"availableTimezones\",\"update\"],[[28,[\"model\",\"activeTimezone\"]],[28,[\"availableTimezones\"]],[33,[\"action\"],[[28,[null]],\"setTimezone\"],null]]]],false],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[15,\"data-test-toggle-timezone\",\"\"],[5,[\"action\"],[[28,[null]],[33,[\"toggle\"],[\"timezoneOpen\",[28,[null]]],null]]],[13],[11,\"span\",[]],[13],[1,[33,[\"if\"],[[28,[\"timezoneOpen\"]],\"Close\",\"Expand\"],null],false],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Publication identity\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[15,\"data-test-setting\",\"icon\"],[13],[0,\"\\n\"],[6,[\"gh-uploader\"],null,[[\"files\",\"extensions\",\"uploadUrl\",\"onComplete\"],[[28,[\"iconUpload\"]],[28,[\"iconExtensions\"]],\"/uploads/icon/\",[33,[\"action\"],[[28,[null]],\"imageUploaded\",\"icon\"],null]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Publication icon\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"A square, social icon used in the UI of your publication, at least 60x60px\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[6,[\"each\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-error\"],[15,\"data-test-error\",\"icon\"],[13],[1,[28,[\"error\",\"message\"]],false],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[28,[\"uploader\",\"progressBar\"]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"model\",\"icon\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"img\",[]],[15,\"class\",\"blog-icon\"],[16,\"src\",[34,[[28,[\"model\",\"icon\"]]]]],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"alt\",\"icon\"],[15,\"data-test-icon-img\",\"\"],[13],[14],[0,\"\\n                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-setting-action-smallimg-delete\"],[15,\"data-test-delete-image\",\"icon\"],[5,[\"action\"],[[28,[null]],\"removeImage\",\"icon\"]],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"delete\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn\"],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"data-test-image-upload-btn\",\"icon\"],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"Upload Image\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"]],\"locals\":[]}]],\"locals\":[]}],[0,\"                \"],[11,\"div\",[]],[15,\"style\",\"display:none\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-file-input\"],null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"iconUpload\"]]],null]],null],[28,[\"iconMimeTypes\"]],\"icon\"]]],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"uploader\"]},null],[0,\"        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[15,\"data-test-setting\",\"logo\"],[13],[0,\"\\n\"],[6,[\"gh-uploader\"],null,[[\"files\",\"extensions\",\"onComplete\"],[[28,[\"logoUpload\"]],[28,[\"imageExtensions\"]],[33,[\"action\"],[[28,[null]],\"imageUploaded\",\"logo\"],null]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Publication logo\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"The primary logo for your brand displayed across your theme, should be transparent and at least 600px x 72px\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[6,[\"each\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-error\"],[15,\"data-test-error\",\"logo\"],[13],[1,[28,[\"error\",\"message\"]],false],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[28,[\"uploader\",\"progressBar\"]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"model\",\"logo\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"img\",[]],[15,\"class\",\"blog-logo\"],[16,\"src\",[34,[[28,[\"model\",\"logo\"]]]]],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"alt\",\"logo\"],[15,\"data-test-logo-img\",\"\"],[13],[14],[0,\"\\n                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-setting-action-smallimg-delete\"],[15,\"data-test-delete-image\",\"logo\"],[5,[\"action\"],[[28,[null]],\"removeImage\",\"logo\"]],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"delete\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn\"],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"data-test-image-upload-btn\",\"logo\"],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"Upload Image\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"]],\"locals\":[]}]],\"locals\":[]}],[0,\"                \"],[11,\"div\",[]],[15,\"style\",\"display:none\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-file-input\"],null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"logoUpload\"]]],null]],null],[28,[\"imageMimeTypes\"]],\"logo\"]]],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"uploader\"]},null],[0,\"        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[15,\"data-test-setting\",\"coverImage\"],[13],[0,\"\\n\"],[6,[\"gh-uploader\"],null,[[\"files\",\"extensions\",\"onComplete\"],[[28,[\"coverImageUpload\"]],[28,[\"imageExtensions\"]],[33,[\"action\"],[[28,[null]],\"imageUploaded\",\"coverImage\"],null]]],{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Publication cover\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"An optional large background image for your site\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[6,[\"each\"],[[28,[\"uploader\",\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-error\"],[15,\"data-test-error\",\"coverImage\"],[13],[1,[28,[\"error\",\"message\"]],false],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action gh-setting-action-largeimg\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"uploader\",\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[28,[\"uploader\",\"progressBar\"]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"model\",\"coverImage\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"img\",[]],[15,\"class\",\"blog-cover\"],[16,\"src\",[34,[[28,[\"model\",\"coverImage\"]]]]],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"alt\",\"cover photo\"],[15,\"data-test-cover-img\",\"\"],[13],[14],[0,\"\\n                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-setting-action-largeimg-delete\"],[15,\"data-test-delete-image\",\"coverImage\"],[5,[\"action\"],[[28,[null]],\"removeImage\",\"coverImage\"]],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"delete\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                    \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn\"],[16,\"onclick\",[33,[\"action\"],[[28,[null]],\"triggerFileDialog\"],null],null],[15,\"data-test-image-upload-btn\",\"coverImage\"],[13],[0,\"\\n                        \"],[11,\"span\",[]],[13],[0,\"Upload Image\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"]],\"locals\":[]}]],\"locals\":[]}],[0,\"                \"],[11,\"div\",[]],[15,\"style\",\"display:none\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-file-input\"],null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"coverImageUpload\"]]],null]],null],[28,[\"imageMimeTypes\"]],\"coverImage\"]]],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[\"uploader\"]},null],[0,\"        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Social accounts\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Social accounts\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Link your social accounts for full structured data and rich card support\"],[14],[0,\"\\n\"],[6,[\"liquid-if\"],[[28,[\"socialOpen\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content-extended\"],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"                        \"],[11,\"input\",[]],[16,\"value\",[28,[\"model\",\"facebook\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[15,\"type\",\"url\"],[15,\"class\",\"gh-input\"],[15,\"placeholder\",\"https://www.facebook.com/ghost\"],[15,\"autocorrect\",\"off\"],[15,\"data-test-facebook-input\",\"\"],[5,[\"action\"],[[28,[null]],\"validateFacebookUrl\"],[[\"on\"],[\"focusOut\"]]],[13],[14],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\",\"data-test-facebook-error\"],[[28,[\"model\",\"errors\"]],\"facebook\",true]]],false],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"URL of your publication's Facebook Page\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"                        \"],[11,\"input\",[]],[16,\"value\",[28,[\"model\",\"twitter\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[15,\"type\",\"url\"],[15,\"class\",\"gh-input\"],[15,\"placeholder\",\"https://twitter.com/tryghost\"],[15,\"autocorrect\",\"off\"],[15,\"data-test-twitter-input\",\"\"],[5,[\"action\"],[[28,[null]],\"validateTwitterUrl\"],[[\"on\"],[\"focusOut\"]]],[13],[14],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\",\"data-test-twitter-error\"],[[28,[\"model\",\"errors\"]],\"twitter\",true]]],false],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"URL of your publication's Twitter profile\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[15,\"data-test-toggle-social\",\"\"],[5,[\"action\"],[[28,[null]],[33,[\"toggle\"],[\"socialOpen\",[28,[null]]],null]]],[13],[11,\"span\",[]],[13],[1,[33,[\"if\"],[[28,[\"socialOpen\"]],\"Close\",\"Expand\"],null],false],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Advanced settings\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Use dated permalinks\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Include the date in your post URLs, eg. \"],[11,\"strong\",[]],[13],[0,\"blogurl.com/2017/01/post-title/\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[0,\"\\n                    \"],[11,\"label\",[]],[15,\"class\",\"checkbox\"],[15,\"for\",\"settings-dated-permalinks\"],[13],[0,\"\\n                        \"],[1,[33,[\"one-way-checkbox\"],[[28,[\"isDatedPermalinks\"]]],[[\"id\",\"type\",\"update\",\"data-test-dated-permalinks-checkbox\"],[\"settings-dated-permalinks\",\"checkbox\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"isDatedPermalinks\"]]],null]],null],true]]],false],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Make this site private\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Enable protection with simple shared password, All search engine optimization and social features will be disabled.\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"model\",\"isPrivate\"]]],null,{\"statements\":[[0,\"                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content-extended\"],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"model\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"password\"]]],[[\"name\",\"type\",\"focusOut\",\"update\",\"data-test-password-input\"],[\"general[password]\",\"text\",[33,[\"action\"],[[28,[null]],\"validate\",\"password\"],[[\"target\"],[[28,[\"model\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"password\"]]],null]],null],true]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\",\"data-test-password-error\"],[[28,[\"model\",\"errors\"]],\"password\",true]]],false],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"Set the password for this site\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[0,\"\\n                    \"],[11,\"label\",[]],[15,\"class\",\"checkbox\"],[15,\"for\",\"settings-private\"],[13],[0,\"\\n                        \"],[1,[33,[\"one-way-checkbox\"],[[28,[\"model\",\"isPrivate\"]]],[[\"id\",\"type\",\"update\",\"data-test-private-checkbox\"],[\"settings-private\",\"checkbox\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"isPrivate\"]]],null]],null],true]]],false],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"input-toggle-component\"],[13],[14],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[1,[26,[\"outlet\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general.hbs" } });
});
define("ghost-admin/templates/settings/labs-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "E0ftQ9OV", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Labs\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/labs-loading.hbs" } });
});
define("ghost-admin/templates/settings/labs", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "c8qCc3Ew", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Labs\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container settings-debug\"],[13],[0,\"\\n        \"],[11,\"p\",[]],[15,\"class\",\"gh-box gh-box-info\"],[13],[1,[33,[\"inline-svg\"],[\"idea\"],null],false],[0,\"This is a testing ground for experimental features which aren't quite ready for primetime. They may change, break or inexplicably disappear at any time.\"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Migration options\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Import content\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Import posts from another Ghost installation\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"form\",[]],[15,\"id\",\"settings-import\"],[15,\"enctype\",\"multipart/form-data\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-file-upload\"],null,[[\"id\",\"classNames\",\"uploadButtonText\",\"onUpload\",\"acceptEncoding\"],[\"importfile\",\"flex\",[28,[\"uploadButtonText\"]],\"onUpload\",[28,[\"importMimeType\"]]]]],false],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"importErrors\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[16,\"class\",[34,[\"gh-import-errors \",[33,[\"if\"],[[28,[\"importSuccessful\"]],\"gh-import-errors-warning\"],null]]]],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-import-errors-title\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"importSuccessful\"]]],null,{\"statements\":[[0,\"                        Import successful with warnings\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        Import failed\\n\"]],\"locals\":[]}],[0,\"                \"],[14],[0,\"\\n\\n\"],[6,[\"each\"],[[28,[\"importErrors\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"div\",[]],[15,\"class\",\"gh-import-error\"],[13],[0,\"\\n                        \"],[11,\"p\",[]],[15,\"class\",\"gh-import-error-message\"],[13],[0,\"\\n                            \"],[6,[\"if\"],[[28,[\"error\",\"help\"]]],null,{\"statements\":[[1,[28,[\"error\",\"help\"]],false],[0,\": \"]],\"locals\":[]},null],[1,[28,[\"error\",\"message\"]],false],[0,\"\\n                        \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"error\",\"context\"]]],null,{\"statements\":[[0,\"                            \"],[11,\"div\",[]],[15,\"class\",\"gh-import-error-entry\"],[13],[0,\"\\n                                \"],[11,\"pre\",[]],[13],[1,[28,[\"error\",\"context\"]],false],[14],[0,\"\\n                            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                    \"],[14],[0,\"\\n\"]],\"locals\":[\"error\"]},null],[0,\"            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Export your content\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Download all of your posts and settings in a single, glorious JSON file\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[5,[\"action\"],[[28,[null]],\"exportData\"]],[13],[11,\"span\",[]],[13],[0,\"Export\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Delete all content\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Permanently delete all posts and tags from the database, a hard reset\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-hover-red js-delete\"],[5,[\"action\"],[[28,[null]],\"toggleDeleteAllModal\"]],[13],[11,\"span\",[]],[13],[0,\"Delete\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Testing tools\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Test email configuration\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Send yourself a test email to make sure everything is working\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[1,[33,[\"gh-task-button\"],[\"Send\"],[[\"successText\",\"task\",\"class\"],[\"Sent\",[28,[\"sendTestEmail\"]],\"gh-btn gh-btn-hover-blue gh-btn-icon\"]]],false],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-header\"],[13],[0,\"Beta features\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Public API\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"For full instructions, read the \"],[11,\"a\",[]],[15,\"href\",\"https://help.ghost.org/hc/en-us/articles/115000301672-Public-API-Beta\"],[13],[0,\"developer guide\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[1,[33,[\"gh-feature-flag\"],[\"publicAPI\"],null],false],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Night shift\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Swap Ghost admin's colours to a dark background which is easy on the eyes\"],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[1,[33,[\"gh-feature-flag\"],[\"nightShift\"],null],false],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"gh-setting\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-content\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-title\"],[13],[0,\"Subscribers\"],[14],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-desc\"],[13],[0,\"Collect email addresses from your readers, more info in \"],[11,\"a\",[]],[15,\"href\",\"https://help.ghost.org/hc/en-us/articles/224089787-Subscribers-Beta\"],[13],[0,\"the docs\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-setting-action\"],[13],[0,\"\\n                \"],[11,\"div\",[]],[15,\"class\",\"for-checkbox\"],[13],[1,[33,[\"gh-feature-flag\"],[\"subscribers\"],null],false],[14],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDeleteAllModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-all\"],[[\"close\",\"modifier\"],[[33,[\"action\"],[[28,[null]],\"toggleDeleteAllModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/labs.hbs" } });
});
define("ghost-admin/templates/settings/tags-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "0WlvoXWL", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-view\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"view-header\"],[13],[0,\"\\n        \"],[6,[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"Tags\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"New Tag\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags-loading.hbs" } });
});
define("ghost-admin/templates/settings/tags", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VDz9mrv6", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-view\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"view-header\"],[13],[0,\"\\n        \"],[6,[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"Tags\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"New Tag\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n\"],[6,[\"gh-tags-management-container\"],null,[[\"tags\",\"selectedTag\",\"enteredMobile\",\"leftMobile\"],[[28,[\"tags\"]],[28,[\"selectedTag\"]],\"enteredMobile\",\"leftMobile\"]],{\"statements\":[[0,\"        \"],[11,\"div\",[]],[15,\"class\",\"tag-list\"],[13],[0,\"\\n            \"],[11,\"section\",[]],[16,\"class\",[34,[\"tag-list-content settings-tags \",[33,[\"if\"],[[28,[\"tagListFocused\"]],\"keyboard-focused\"],null]]]],[13],[0,\"\\n\"],[6,[\"vertical-collection\"],[[28,[\"sortedTags\"]]],[[\"minHeight\",\"staticHeight\",\"bufferSize\",\"containerSelector\"],[67,true,5,\".tag-list\"]],{\"statements\":[[0,\"                    \"],[1,[33,[\"gh-tag\"],null,[[\"tag\"],[[28,[\"tag\"]]]]],false],[0,\"\\n\"]],\"locals\":[\"tag\"]},null],[0,\"            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n        \"],[11,\"section\",[]],[16,\"class\",[34,[\"settings-menu-container tag-settings \",[33,[\"if\"],[[28,[\"tagContentFocused\"]],\"keyboard-focused\"],null],\" \",[33,[\"if\"],[[28,[\"container\",\"displaySettingsPane\"]],\"tag-settings-in\"],null]]]],[13],[0,\"\\n            \"],[1,[26,[\"outlet\"]],false],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[\"container\"]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags.hbs" } });
});
define("ghost-admin/templates/settings/tags/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zgaLWZip", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"no-posts-box\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"no-posts\"],[13],[0,\"\\n        \"],[11,\"h3\",[]],[13],[0,\"You haven't added any tags yet!\"],[14],[0,\"\\n        \"],[6,[\"link-to\"],[\"settings.tags.new\"],null,{\"statements\":[[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"gh-btn gh-btn-green btn-lg\"],[15,\"title\",\"New Tag\"],[13],[11,\"span\",[]],[13],[0,\"Add a tag\"],[14],[14]],\"locals\":[]},null],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/index.hbs" } });
});
define("ghost-admin/templates/settings/tags/tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "igFwQ/Xt", "block": "{\"statements\":[[1,[33,[\"gh-tag-settings-form\"],null,[[\"tag\",\"setProperty\",\"showDeleteTagModal\"],[[28,[\"tag\"]],[33,[\"action\"],[[28,[null]],\"setProperty\"],null],[33,[\"action\"],[[28,[null]],\"toggleDeleteTagModal\"],null]]]],false],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDeleteTagModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-tag\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"tag\"]],[33,[\"action\"],[[28,[null]],\"deleteTag\"],null],[33,[\"action\"],[[28,[null]],\"toggleDeleteTagModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/tag.hbs" } });
});
define("ghost-admin/templates/setup", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EVZr1Def", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-flow\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-flow-head\"],[13],[0,\"\\n        \"],[11,\"nav\",[]],[15,\"class\",\"gh-flow-nav\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showBackLink\"]]],null,{\"statements\":[[0,\"                \"],[6,[\"link-to\"],[[28,[\"backRoute\"]]],[[\"classNames\"],[\"gh-flow-back\"]],{\"statements\":[[1,[33,[\"inline-svg\"],[\"arrow-left-small\"],null],false],[0,\" Back\"]],\"locals\":[]},null],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[11,\"ol\",[]],[13],[0,\"\\n\"],[6,[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.one\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[33,[\"inline-svg\"],[\"check-circle\"],null],false],[11,\"span\",[]],[15,\"class\",\"num\"],[13],[0,\"1\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n\"],[6,[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.two\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[33,[\"inline-svg\"],[\"check-circle\"],null],false],[11,\"span\",[]],[15,\"class\",\"num\"],[13],[0,\"2\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[11,\"li\",[]],[15,\"class\",\"divider\"],[13],[14],[0,\"\\n\"],[6,[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.three\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[33,[\"inline-svg\"],[\"check-circle\"],null],false],[11,\"span\",[]],[15,\"class\",\"num\"],[13],[0,\"3\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-flow-content-wrap\"],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-flow-content\"],[13],[0,\"\\n            \"],[1,[26,[\"outlet\"]],false],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup.hbs" } });
});
define("ghost-admin/templates/setup/one", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "s+bka6fp", "block": "{\"statements\":[[11,\"header\",[]],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Welcome to \"],[11,\"strong\",[]],[13],[0,\"Ghost\"],[14],[0,\"!\"],[14],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"All over the world, people have started \"],[11,\"em\",[]],[13],[1,[26,[\"gh-download-count\"]],false],[14],[0,\" incredible blogs with Ghost. Today, we’re starting yours.\"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"figure\",[]],[15,\"class\",\"gh-flow-screenshot\"],[13],[0,\"\\n    \"],[11,\"img\",[]],[15,\"src\",\"assets/img/install-welcome-3e448684378da60f50541b9c4ab7f33f.png\"],[15,\"alt\",\"Ghost screenshot\"],[13],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[6,[\"link-to\"],[\"setup.two\"],[[\"classNames\"],[\"gh-btn gh-btn-green gh-btn-lg gh-btn-icon gh-btn-icon-right\"]],{\"statements\":[[0,\"    \"],[11,\"span\",[]],[13],[0,\"Create your account \"],[1,[33,[\"inline-svg\"],[\"arrow-right-small\"],null],false],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/one.hbs" } });
});
define("ghost-admin/templates/setup/three", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "NxNY90gE", "block": "{\"statements\":[[11,\"header\",[]],[13],[0,\"\\n    \"],[11,\"h1\",[]],[13],[0,\"Invite your team\"],[14],[0,\"\\n    \"],[11,\"p\",[]],[13],[0,\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[11,\"div\",[]],[13],[11,\"img\",[]],[15,\"class\",\"gh-flow-faces\"],[15,\"src\",\"assets/img/users-62c43224a1127a52d2c49eb07fd2fd53.png\"],[15,\"alt\",\"\"],[13],[14],[14],[0,\"\\n\\n\"],[11,\"form\",[]],[15,\"class\",\"gh-flow-invite\"],[5,[\"action\"],[[28,[null]],\"invite\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"users\"]],{\"statements\":[[0,\"        \"],[11,\"label\",[]],[15,\"for\",\"users\"],[13],[0,\"Enter one email address per line, we’ll handle the rest! \"],[1,[33,[\"inline-svg\"],[\"email\"],null],false],[14],[0,\"\\n        \"],[1,[33,[\"gh-textarea\"],[[28,[\"users\"]]],[[\"name\",\"required\",\"focusOut\",\"update\"],[\"users\",\"required\",[33,[\"action\"],[[28,[null]],\"validate\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"users\"]]],null]],null]]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-task-button\"],null,[[\"task\",\"type\",\"successClass\",\"failureClass\",\"class\"],[[28,[\"invite\"]],\"submit\",\"\",\"\",[33,[\"concat\"],[\"gh-btn\",\" \",\"gh-btn-default\",\" \",\"gh-btn-lg\",\" \",\"gh-btn-block\",\" \",[33,[\"if\"],[[28,[\"buttonClass\"]],[33,[\"-normalize-class\"],[\"buttonClass\",[28,[\"buttonClass\"]]],null]],null],\" \"],null]]],{\"statements\":[[0,\"        \"],[11,\"span\",[]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"no-margin\"]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[1,[26,[\"buttonText\"]],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"        \"],[14],[0,\"\\n\"]],\"locals\":[\"task\"]},null],[14],[0,\"\\n\\n\"],[11,\"button\",[]],[15,\"class\",\"gh-flow-skip\"],[5,[\"action\"],[[28,[null]],\"skipInvite\"]],[13],[0,\"\\n    I'll do this later, take me to my blog!\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/three.hbs" } });
});
define("ghost-admin/templates/setup/two", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "SS9m3aX8", "block": "{\"statements\":[[6,[\"if\"],[[28,[\"config\",\"ghostOAuth\"]]],null,{\"statements\":[[0,\"    \"],[11,\"header\",[]],[13],[0,\"\\n        \"],[11,\"h1\",[]],[13],[0,\"Setup your blog\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"form\",[]],[15,\"id\",\"setup\"],[15,\"class\",\"gh-flow-create\"],[5,[\"action\"],[[28,[null]],\"setup\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"session\"]],{\"statements\":[[6,[\"gh-task-button\"],null,[[\"task\",\"class\",\"type\",\"successClass\"],[[28,[\"authenticateWithGhostOrg\"]],\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"button\",\"\"]],{\"statements\":[[6,[\"if\"],[[28,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]],false],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"if\"],[[28,[\"session\",\"isAuthenticated\"]]],null,{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[13],[0,\"Connected: \"],[1,[28,[\"session\",\"user\",\"email\"]],false],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[13],[0,\"Sign in with Ghost\"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]}]],\"locals\":[\"task\"]},null],[0,\"            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"session\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"blogTitle\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"blog-title\"],[13],[0,\"Blog title\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-content\"],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"blogTitle\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"onenter\"],[\"4\",\"text\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[33,[\"action\"],[[28,[null]],\"preValidate\",\"blogTitle\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"blogTitle\"]]],null]],null],[33,[\"action\"],[[28,[null]],\"setup\"],null]]]],false],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"blogTitle\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\\n\"],[6,[\"gh-task-button\"],null,[[\"task\",\"type\",\"tabindex\",\"class\",\"disabled\",\"data-test-submit-button\"],[[28,[\"setup\"]],\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\",[28,[\"submitDisabled\"]],true]],{\"statements\":[[6,[\"if\"],[[28,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]],false],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"            \"],[11,\"span\",[]],[13],[0,\"Last step: Invite your team \"],[1,[33,[\"inline-svg\"],[\"arrow-right-small\"],[[\"class\"],[\"gh-btn-icon-right\"]]],false],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[\"task\"]},null]],\"locals\":[]},{\"statements\":[[0,\"\\n    \"],[11,\"header\",[]],[13],[0,\"\\n        \"],[11,\"h1\",[]],[13],[0,\"Create your account\"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"form\",[]],[15,\"id\",\"setup\"],[15,\"class\",\"gh-flow-create\"],[13],[0,\"\\n\"],[0,\"        \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"text\"],[15,\"name\",\"username\"],[13],[14],[0,\"\\n        \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"password\"],[15,\"name\",\"password\"],[13],[14],[0,\"\\n\\n        \"],[1,[33,[\"gh-profile-image\"],null,[[\"email\",\"setImage\"],[[28,[\"email\"]],[33,[\"action\"],[[28,[null]],\"setImage\"],null]]]],false],[0,\"\\n\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"email\"],[13],[0,\"Email address\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-mail\"],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"email\"],null],false],[0,\"\\n                \"],[1,[33,[\"gh-trim-focus-input\"],[[28,[\"email\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"data-test-email-input\"],[\"1\",\"email\",\"email\",\"Eg. john@example.com\",\"off\",[33,[\"action\"],[[28,[null]],\"preValidate\",\"email\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"email\"]]],null]],null],true]]],false],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"name\"],[13],[0,\"Full name\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-user\"],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"user-circle\"],null],false],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"name\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"data-test-name-input\"],[\"2\",\"text\",\"name\",\"Eg. John H. Watson\",\"off\",[33,[\"action\"],[[28,[null]],\"preValidate\",\"name\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"name\"]]],null]],null],true]]],false],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"password\"],[13],[0,\"Password\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-lock\"],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"password\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"data-test-password-input\"],[\"3\",\"password\",\"password\",\"At least 8 characters\",\"off\",[33,[\"action\"],[[28,[null]],\"preValidate\",\"password\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"password\"]]],null]],null],true]]],false],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"errors\"]],[28,[\"hasValidated\"]],\"blogTitle\"]],{\"statements\":[[0,\"            \"],[11,\"label\",[]],[15,\"for\",\"blog-title\"],[13],[0,\"Blog title\"],[14],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-content\"],[13],[0,\"\\n                \"],[1,[33,[\"inline-svg\"],[\"content\"],null],false],[0,\"\\n                \"],[1,[33,[\"gh-input\"],[[28,[\"blogTitle\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"data-test-blog-title-input\"],[\"4\",\"text\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[33,[\"action\"],[[28,[null]],\"preValidate\",\"blogTitle\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"blogTitle\"]]],null]],null],true]]],false],[0,\"\\n            \"],[14],[0,\"\\n            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"errors\"]],\"blogTitle\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-task-button\"],null,[[\"task\",\"type\",\"tabindex\",\"class\"],[[28,[\"setup\"]],\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\"]],{\"statements\":[[6,[\"if\"],[[28,[\"task\",\"isRunning\"]]],null,{\"statements\":[[0,\"                \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]],false],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[11,\"span\",[]],[13],[0,\"Last step: Invite your team \"],[1,[33,[\"inline-svg\"],[\"arrow-right-small\"],[[\"class\"],[\"gh-btn-icon-right\"]]],false],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[\"task\"]},null],[0,\"    \"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"\\n\"],[11,\"p\",[]],[15,\"class\",\"main-error\"],[13],[1,[26,[\"flowErrors\"]],true],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/two.hbs" } });
});
define("ghost-admin/templates/signin", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+mH4cfDz", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-flow\"],[13],[0,\"\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-flow-content-wrap\"],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-flow-content\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"config\",\"ghostOAuth\"]]],null,{\"statements\":[[0,\"                \"],[11,\"header\",[]],[13],[0,\"\\n                    \"],[11,\"h1\",[]],[13],[1,[28,[\"config\",\"blogTitle\"]],false],[14],[0,\"\\n                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"form\",[]],[15,\"id\",\"login\"],[15,\"method\",\"post\"],[15,\"class\",\"gh-signin\"],[15,\"novalidate\",\"novalidate\"],[5,[\"action\"],[[28,[null]],\"authenticate\"],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"config\",\"ghostOAuth\"]]],null,{\"statements\":[[0,\"                    \"],[1,[33,[\"gh-task-button\"],[\"Sign in with Ghost\"],[[\"task\",\"class\",\"tabindex\"],[[28,[\"authenticateWithGhostOrg\"]],\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"3\"]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"hasValidated\"]],\"identification\"]],{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-mail\"],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"email\"],null],false],[0,\"\\n                            \"],[1,[33,[\"gh-trim-focus-input\"],[[28,[\"model\",\"identification\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"autocapitalize\",\"autocorrect\",\"tabindex\",\"focusOut\",\"update\"],[\"email\",\"email\",\"Email Address\",\"identification\",\"off\",\"off\",\"1\",[33,[\"action\"],[[28,[null]],\"validate\",\"identification\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"identification\"]]],null]],null]]]],false],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-lock forgotten-wrap\"],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\"\\n                            \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"password\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"tabindex\",\"autocorrect\",\"update\"],[\"password\",\"password\",\"Password\",\"password\",\"2\",\"off\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"password\"]]],null]],null]]]],false],[0,\"\\n\\n\"],[6,[\"gh-task-button\"],null,[[\"task\",\"class\",\"tabindex\",\"type\",\"successClass\",\"failureClass\"],[[28,[\"forgotten\"]],\"forgotten-link gh-btn gh-btn-link gh-btn-icon\",\"4\",\"button\",\"\",\"\"]],{\"statements\":[[0,\"                                \"],[11,\"span\",[]],[13],[6,[\"if\"],[[28,[\"task\",\"isRunning\"]]],null,{\"statements\":[[1,[33,[\"inline-svg\"],[\"spinner\"],[[\"class\"],[\"gh-spinner\"]]],false]],\"locals\":[]},{\"statements\":[[0,\"Forgot?\"]],\"locals\":[]}],[14],[0,\"\\n\"]],\"locals\":[\"task\"]},null],[0,\"                        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n                    \"],[1,[33,[\"gh-task-button\"],[\"Sign in\"],[[\"task\",\"class\",\"type\",\"tabindex\"],[[28,[\"validateAndAuthenticate\"]],\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"3\"]]],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"            \"],[14],[0,\"\\n\\n            \"],[11,\"p\",[]],[15,\"class\",\"main-error\"],[13],[1,[33,[\"if\"],[[28,[\"flowErrors\"]],[28,[\"flowErrors\"]],\"&nbsp;\"],null],true],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/signin.hbs" } });
});
define("ghost-admin/templates/signup", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "OtJvjNk/", "block": "{\"statements\":[[11,\"div\",[]],[15,\"class\",\"gh-flow\"],[13],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-flow-content-wrap\"],[13],[0,\"\\n        \"],[11,\"section\",[]],[15,\"class\",\"gh-flow-content\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"config\",\"ghostOAuth\"]]],null,{\"statements\":[[0,\"                \"],[11,\"header\",[]],[13],[0,\"\\n                        \"],[11,\"h1\",[]],[13],[1,[28,[\"config\",\"blogTitle\"]],false],[14],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"\\n\"],[0,\"                            Accept your invite from \"],[11,\"strong\",[]],[13],[1,[28,[\"model\",\"invitedBy\"]],false],[14],[0,\"\\n                        \"],[14],[0,\"\\n                \"],[14],[0,\"\\n\\n                \"],[11,\"form\",[]],[15,\"id\",\"signup\"],[15,\"class\",\"gh-signin\"],[15,\"method\",\"post\"],[15,\"novalidate\",\"novalidate\"],[13],[0,\"\\n                    \"],[1,[33,[\"gh-task-button\"],[\"Sign in with Ghost to accept\"],[[\"task\",\"type\",\"class\",\"tabindex\"],[[28,[\"authenticateWithGhostOrg\"]],\"submit\",\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"3\"]]],false],[0,\"\\n                \"],[14],[0,\"\\n\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                \"],[11,\"header\",[]],[13],[0,\"\\n                    \"],[11,\"h1\",[]],[13],[0,\"Create your account\"],[14],[0,\"\\n                \"],[14],[0,\"\\n\\n                \"],[11,\"form\",[]],[15,\"id\",\"signup\"],[15,\"class\",\"gh-flow-create\"],[15,\"method\",\"post\"],[15,\"novalidate\",\"novalidate\"],[13],[0,\"\\n\"],[0,\"                    \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"text\"],[15,\"name\",\"fakeusernameremembered\"],[13],[14],[0,\"\\n                    \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"password\"],[15,\"name\",\"fakepasswordremembered\"],[13],[14],[0,\"\\n\\n                    \"],[1,[33,[\"gh-profile-image\"],null,[[\"email\",\"setImage\"],[[28,[\"model\",\"email\"]],[33,[\"action\"],[[28,[null]],\"setImage\"],null]]]],false],[0,\"\\n\\n\"],[6,[\"gh-form-group\"],null,null,{\"statements\":[[0,\"                        \"],[11,\"label\",[]],[15,\"for\",\"email-address\"],[13],[0,\"Email address\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-mail\"],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"email\"],null],false],[0,\"\\n                            \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"email\"]]],[[\"type\",\"name\",\"placeholder\",\"disabled\",\"autocorrect\"],[\"email\",\"email\",\"Eg. john@example.com\",\"disabled\",\"off\"]]],false],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"                        \"],[11,\"label\",[]],[15,\"for\",\"full-name\"],[13],[0,\"Full name\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-user\"],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"user-circle\"],null],false],[0,\"\\n                            \"],[1,[33,[\"gh-trim-focus-input\"],[[28,[\"model\",\"name\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"onenter\",\"focusOut\",\"update\"],[\"1\",\"text\",\"name\",\"Eg. John H. Watson\",\"off\",[33,[\"action\"],[[28,[null]],\"signup\"],null],[33,[\"action\"],[[28,[null]],\"validate\",\"name\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"name\"]]],null]],null]]]],false],[0,\"\\n                        \"],[14],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"model\",\"errors\"]],[28,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                        \"],[11,\"label\",[]],[15,\"for\",\"password\"],[13],[0,\"Password\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"gh-input-icon gh-icon-lock\"],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\"\\n                            \"],[1,[33,[\"gh-input\"],[[28,[\"model\",\"password\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"onenter\",\"autocorrect\",\"focusOut\",\"update\"],[\"2\",\"password\",\"password\",\"At least 8 characters\",[33,[\"action\"],[[28,[null]],\"signup\"],null],\"off\",[33,[\"action\"],[[28,[null]],\"validate\",\"password\"],null],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"model\",\"password\"]]],null]],null]]]],false],[0,\"\\n                        \"],[14],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"model\",\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                \"],[14],[0,\"\\n\\n                \"],[1,[33,[\"gh-task-button\"],[\"Create Account\"],[[\"runningText\",\"task\",\"class\",\"tabindex\"],[\"Creating\",[28,[\"signup\"]],\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\",\"3\"]]],false],[0,\"\\n\"]],\"locals\":[]}],[0,\"\\n            \"],[11,\"p\",[]],[15,\"class\",\"main-error\"],[13],[1,[33,[\"if\"],[[28,[\"flowErrors\"]],[28,[\"flowErrors\"]],\"&nbsp;\"],null],true],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/signup.hbs" } });
});
define("ghost-admin/templates/subscribers", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "9gz6lFld", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Subscribers \"],[11,\"span\",[]],[15,\"style\",\"font-weight:200;margin-left:10px;display:inline-block;\"],[15,\"data-test-total-subscribers\",\"\"],[13],[0,\" (\"],[1,[26,[\"total\"]],false],[0,\")\"],[14],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"subscribers.import\"],[[\"class\"],[\"gh-btn gh-btn-hover-green\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"Import CSV\"],[14]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"a\",[]],[15,\"href\",\"#\"],[15,\"class\",\"gh-btn gh-btn-hover-blue\"],[5,[\"action\"],[[28,[null]],\"exportData\"]],[13],[11,\"span\",[]],[13],[0,\"Export CSV\"],[14],[14],[0,\"\\n            \"],[6,[\"link-to\"],[\"subscribers.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[11,\"span\",[]],[13],[0,\"Add Subscriber\"],[14]],\"locals\":[]},null],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"section\",[]],[15,\"class\",\"view-container\"],[13],[0,\"\\n        \"],[1,[33,[\"gh-subscribers-table\"],null,[[\"table\",\"isLoading\",\"loadNextPage\",\"sortByColumn\",\"delete\"],[[28,[\"table\"]],[28,[\"isLoading\"]],[33,[\"action\"],[[28,[null]],\"loadNextPage\"],null],[33,[\"action\"],[[28,[null]],\"sortByColumn\"],null],[33,[\"action\"],[[28,[null]],\"deleteSubscriber\"],null]]]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"subscriberToDelete\"]]],null,{\"statements\":[[0,\"    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"subscriberToDelete\"]],[33,[\"action\"],[[28,[null]],\"confirmDeleteSubscriber\"],null],[33,[\"action\"],[[28,[null]],\"cancelDeleteSubscriber\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[1,[26,[\"outlet\"]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers.hbs" } });
});
define("ghost-admin/templates/subscribers/import", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "l72YEcOE", "block": "{\"statements\":[[1,[33,[\"gh-fullscreen-modal\"],[\"import-subscribers\"],[[\"confirm\",\"close\",\"modifier\"],[[33,[\"route-action\"],[\"reset\"],null],[33,[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/import.hbs" } });
});
define("ghost-admin/templates/subscribers/new", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "xFrDZx6+", "block": "{\"statements\":[[1,[33,[\"gh-fullscreen-modal\"],[\"new-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"model\"]],[33,[\"route-action\"],[\"save\"],null],[33,[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/new.hbs" } });
});
define("ghost-admin/templates/team/index-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "geBRUq+g", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Team members\"],[14],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[0,\"            \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[5,[\"action\"],[[28,[null]],\"toggleInviteUserModal\"]],[13],[11,\"span\",[]],[13],[0,\"Invite People\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/index-loading.hbs" } });
});
define("ghost-admin/templates/team/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Us5c6OJp", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"Team members\"],[14],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[0,\"            \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n                \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-green\"],[5,[\"action\"],[[28,[null]],\"toggleInviteUserModal\"]],[13],[11,\"span\",[]],[13],[0,\"Invite People\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showInviteUserModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[33,[\"gh-fullscreen-modal\"],[\"invite-new-user\"],[[\"close\",\"modifier\"],[[33,[\"action\"],[[28,[null]],\"toggleInviteUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-infinite-scroll\"],null,[[\"fetch\",\"isLoading\",\"tagName\",\"classNames\"],[\"loadNextPage\",[28,[\"isLoading\"]],\"section\",\"gh-team\"]],{\"statements\":[[0,\"\\n\"],[6,[\"unless\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[6,[\"if\"],[[28,[\"invites\"]]],null,{\"statements\":[[0,\"        \"],[11,\"section\",[]],[15,\"class\",\"apps-grid-container gh-invited-users\"],[15,\"data-test-invited-users\",\"\"],[13],[0,\"\\n            \"],[11,\"span\",[]],[15,\"class\",\"apps-grid-title\"],[13],[0,\"Invited users\"],[14],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"apps-grid\"],[13],[0,\"\\n\\n\"],[6,[\"each\"],[[28,[\"sortedInvites\"]]],null,{\"statements\":[[6,[\"gh-user-invited\"],null,[[\"invite\",\"reload\"],[[28,[\"invite\"]],\"reload\"]],{\"statements\":[[0,\"                        \"],[11,\"div\",[]],[15,\"class\",\"apps-grid-cell\"],[16,\"data-test-invite-id\",[34,[[28,[\"invite\",\"id\"]]]]],[13],[0,\"\\n                            \"],[11,\"article\",[]],[15,\"class\",\"apps-card-app\"],[13],[0,\"\\n                                \"],[11,\"div\",[]],[15,\"class\",\"apps-card-left\"],[13],[0,\"\\n                                    \"],[11,\"span\",[]],[15,\"class\",\"user-list-item-icon\"],[13],[1,[33,[\"inline-svg\"],[\"email\"],null],false],[0,\"ic\"],[14],[0,\"\\n                                    \"],[11,\"div\",[]],[15,\"class\",\"apps-card-meta\"],[13],[0,\"\\n                                        \"],[11,\"h3\",[]],[15,\"class\",\"apps-card-app-title\"],[15,\"data-test-email\",\"\"],[13],[1,[28,[\"invite\",\"email\"]],false],[14],[0,\"\\n                                        \"],[11,\"p\",[]],[15,\"class\",\"apps-card-app-desc\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"invite\",\"pending\"]]],null,{\"statements\":[[0,\"                                                \"],[11,\"span\",[]],[15,\"class\",\"description-error\"],[13],[0,\"\\n                                                    Invitation not sent - please try again\\n                                                \"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                                                \"],[11,\"span\",[]],[15,\"class\",\"description\"],[15,\"data-test-invite-description\",\"\"],[13],[0,\"\\n                                                    Invitation sent: \"],[1,[28,[\"component\",\"createdAt\"]],false],[0,\",\\n                                                    \"],[1,[33,[\"if\"],[[28,[\"component\",\"isExpired\"]],\"expired\",\"expires\"],null],false],[0,\" \"],[1,[28,[\"component\",\"expiresAt\"]],false],[0,\"\\n                                                \"],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                                        \"],[14],[0,\"\\n                                    \"],[14],[0,\"\\n                                \"],[14],[0,\"\\n                                \"],[11,\"div\",[]],[15,\"class\",\"apps-card-right\"],[13],[0,\"\\n                                    \"],[11,\"div\",[]],[15,\"class\",\"apps-configured\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"component\",\"isSending\"]]],null,{\"statements\":[[0,\"                                            \"],[11,\"span\",[]],[13],[0,\"Sending Invite...\"],[14],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                                            \"],[11,\"a\",[]],[15,\"class\",\"apps-configured-action red-hover\"],[15,\"href\",\"#revoke\"],[15,\"data-test-revoke-button\",\"\"],[5,[\"action\"],[[28,[null]],\"revoke\"],[[\"target\"],[[28,[\"component\"]]]]],[13],[0,\"\\n                                                Revoke\\n                                            \"],[14],[0,\"\\n                                            \"],[11,\"a\",[]],[15,\"class\",\"apps-configured-action green-hover\"],[15,\"href\",\"#resend\"],[15,\"data-test-resend-button\",\"\"],[5,[\"action\"],[[28,[null]],\"resend\"],[[\"target\"],[[28,[\"component\"]]]]],[13],[0,\"\\n                                                Resend\\n                                            \"],[14],[0,\"\\n\\n                                            \"],[11,\"span\",[]],[16,\"class\",[34,[\"apps-configured-action gh-badge \",[28,[\"invite\",\"role\",\"lowerCaseName\"]]]]],[15,\"data-test-role-name\",\"\"],[13],[1,[28,[\"invite\",\"role\",\"name\"]],false],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                                    \"],[14],[0,\"\\n                                \"],[14],[0,\"\\n                            \"],[14],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[\"component\"]},null]],\"locals\":[\"invite\"]},null],[0,\"\\n            \"],[14],[0,\"\\n        \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"\\n    \"],[11,\"section\",[]],[15,\"class\",\"apps-grid-container gh-active-users\"],[15,\"data-test-active-users\",\"\"],[13],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"apps-grid-title\"],[13],[0,\"Active users\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-grid\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null,{\"statements\":[[6,[\"with\"],[[28,[\"session\",\"user\"]]],null,{\"statements\":[[6,[\"gh-user-active\"],null,[[\"user\"],[[28,[\"user\"]]]],{\"statements\":[[0,\"                        \"],[19,\"user-list-item\"],[0,\"\\n\"]],\"locals\":[\"component\"]},null]],\"locals\":[\"user\"]},null]],\"locals\":[]},{\"statements\":[[6,[\"each\"],[[28,[\"sortedActiveUsers\"]]],[[\"key\"],[\"id\"]],{\"statements\":[[6,[\"gh-user-active\"],null,[[\"user\"],[[28,[\"user\"]]]],{\"statements\":[[0,\"                        \"],[19,\"user-list-item\"],[0,\"\\n\"]],\"locals\":[\"component\"]},null]],\"locals\":[\"user\"]},null]],\"locals\":[]}],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[33,[\"and\"],[[28,[\"suspendedUsers\"]],[33,[\"not\"],[[28,[\"session\",\"user\",\"isAuthor\"]]],null]],null]],null,{\"statements\":[[0,\"    \"],[11,\"section\",[]],[15,\"class\",\"apps-grid-container gh-active-users\"],[15,\"data-test-suspended-users\",\"\"],[13],[0,\"\\n        \"],[11,\"span\",[]],[15,\"class\",\"apps-grid-title\"],[13],[0,\"Suspended users\"],[14],[0,\"\\n        \"],[11,\"div\",[]],[15,\"class\",\"apps-grid\"],[13],[0,\"\\n\"],[6,[\"each\"],[[28,[\"sortedSuspendedUsers\"]]],[[\"key\"],[\"id\"]],{\"statements\":[[6,[\"gh-user-active\"],null,[[\"user\"],[[28,[\"user\"]]]],{\"statements\":[[0,\"                    \"],[19,\"user-list-item\"],[0,\"\\n\"]],\"locals\":[\"component\"]},null]],\"locals\":[\"user\"]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/team/index.hbs" } });
});
define("ghost-admin/templates/team/user-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "8GERqHg5", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"team\"],[[\"data-test-team-link\"],[true]],{\"statements\":[[0,\"Team\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[14],[0,\"\\n            \"],[1,[28,[\"user\",\"name\"]],false],[0,\"\\n        \"],[14],[0,\"\\n\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n            \"],[11,\"div\",[]],[15,\"class\",\"gh-btn gh-btn-blue\"],[13],[11,\"span\",[]],[13],[0,\"Save\"],[14],[14],[0,\"\\n        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gh-content\"],[13],[0,\"\\n        \"],[1,[26,[\"gh-loading-spinner\"]],false],[0,\"\\n    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user-loading.hbs" } });
});
define("ghost-admin/templates/team/user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+5rrNIJm", "block": "{\"statements\":[[11,\"section\",[]],[15,\"class\",\"gh-canvas\"],[13],[0,\"\\n    \"],[11,\"header\",[]],[15,\"class\",\"gh-canvas-header\"],[13],[0,\"\\n        \"],[11,\"h2\",[]],[15,\"class\",\"gh-canvas-title\"],[15,\"data-test-screen-title\",\"\"],[13],[0,\"\\n            \"],[6,[\"link-to\"],[\"team\"],[[\"data-test-team-link\"],[true]],{\"statements\":[[0,\"Team\"]],\"locals\":[]},null],[0,\"\\n            \"],[11,\"span\",[]],[13],[1,[33,[\"inline-svg\"],[\"arrow-right\"],null],false],[14],[0,\"\\n            \"],[1,[28,[\"user\",\"name\"]],false],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"            \"],[11,\"span\",[]],[15,\"class\",\"gh-badge suspended\"],[15,\"data-test-suspended-badge\",\"\"],[13],[0,\"Suspended\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n\\n        \"],[11,\"section\",[]],[15,\"class\",\"view-actions\"],[13],[0,\"\\n\"],[6,[\"if\"],[[28,[\"userActionsAreVisible\"]]],null,{\"statements\":[[0,\"                \"],[11,\"span\",[]],[15,\"class\",\"dropdown\"],[13],[0,\"\\n\"],[6,[\"gh-dropdown-button\"],null,[[\"dropdownName\",\"classNames\",\"title\",\"data-test-user-actions\"],[\"user-actions-menu\",\"gh-btn gh-btn-default gh-btn-icon only-has-icon user-actions-cog\",\"User Actions\",true]],{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[13],[0,\"\\n                            \"],[1,[33,[\"inline-svg\"],[\"settings\"],null],false],[0,\"\\n                            \"],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[0,\"User Settings\"],[14],[0,\"\\n                        \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"gh-dropdown\"],null,[[\"name\",\"tagName\",\"classNames\"],[\"user-actions-menu\",\"ul\",\"user-actions-menu dropdown-menu dropdown-triangle-top-right\"]],{\"statements\":[[6,[\"if\"],[[28,[\"canMakeOwner\"]]],null,{\"statements\":[[0,\"                            \"],[11,\"li\",[]],[13],[0,\"\\n                                \"],[11,\"button\",[]],[5,[\"action\"],[[28,[null]],\"toggleTransferOwnerModal\"]],[13],[0,\"\\n                                    Make Owner\\n                                \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showTransferOwnerModal\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[33,[\"gh-fullscreen-modal\"],[\"transfer-owner\"],[[\"confirm\",\"close\",\"modifier\"],[[33,[\"action\"],[[28,[null]],\"transferOwnership\"],null],[33,[\"action\"],[[28,[null]],\"toggleTransferOwnerModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"                            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"deleteUserActionIsVisible\"]]],null,{\"statements\":[[0,\"                            \"],[11,\"li\",[]],[13],[0,\"\\n                                \"],[11,\"button\",[]],[15,\"class\",\"delete\"],[15,\"data-test-delete-button\",\"\"],[5,[\"action\"],[[28,[null]],\"toggleDeleteUserModal\"]],[13],[0,\"\\n                                    Delete User\\n                                \"],[14],[0,\"\\n                            \"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"user\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[11,\"li\",[]],[13],[0,\"\\n                                    \"],[11,\"button\",[]],[15,\"class\",\"suspend\"],[15,\"data-test-suspend-button\",\"\"],[5,[\"action\"],[[28,[null]],\"toggleSuspendUserModal\"]],[13],[0,\"\\n                                        Suspend User\\n                                    \"],[14],[0,\"\\n                                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[6,[\"if\"],[[28,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"                                \"],[11,\"li\",[]],[13],[0,\"\\n                                    \"],[11,\"button\",[]],[15,\"class\",\"unsuspend\"],[15,\"data-test-unsuspend-button\",\"\"],[5,[\"action\"],[[28,[null]],\"toggleUnsuspendUserModal\"]],[13],[0,\"\\n                                        Un-suspend User\\n                                    \"],[14],[0,\"\\n                                \"],[14],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"                \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n            \"],[1,[33,[\"gh-task-button\"],null,[[\"class\",\"task\",\"data-test-save-button\"],[\"gh-btn gh-btn-blue gh-btn-icon\",[28,[\"save\"]],true]]],false],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"showDeleteUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"delete-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"user\"]],[33,[\"action\"],[[28,[null]],\"deleteUser\"],null],[33,[\"action\"],[[28,[null]],\"toggleDeleteUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showSuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"suspend-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"user\"]],[33,[\"action\"],[[28,[null]],\"suspendUser\"],null],[33,[\"action\"],[[28,[null]],\"toggleSuspendUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showUnsuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[33,[\"gh-fullscreen-modal\"],[\"unsuspend-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[28,[\"user\"]],[33,[\"action\"],[[28,[null]],\"unsuspendUser\"],null],[33,[\"action\"],[[28,[null]],\"toggleUnsuspendUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"        \"],[14],[0,\"\\n    \"],[14],[0,\"\\n\\n    \"],[11,\"div\",[]],[15,\"class\",\"gm-main view-container settings-user\"],[13],[0,\"\\n        \"],[11,\"form\",[]],[15,\"class\",\"user-profile\"],[15,\"novalidate\",\"novalidate\"],[15,\"autocomplete\",\"off\"],[5,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"save\"]]],null]],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n\\n          \"],[11,\"figure\",[]],[15,\"class\",\"user-cover\"],[16,\"style\",[26,[\"coverImageBackground\"]],null],[13],[0,\"\\n              \"],[11,\"button\",[]],[15,\"class\",\"gh-btn gh-btn-default user-cover-edit\"],[5,[\"action\"],[[28,[null]],\"toggleUploadCoverModal\"]],[13],[11,\"span\",[]],[13],[0,\"Change Cover\"],[14],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showUploadCoverModal\"]]],null,{\"statements\":[[0,\"                  \"],[1,[33,[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"model\",\"imageProperty\"],[[28,[\"user\"]],\"coverImage\"]]],[33,[\"action\"],[[28,[null]],\"toggleUploadCoverModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"          \"],[14],[0,\"\\n\\n          \"],[11,\"figure\",[]],[15,\"class\",\"user-image\"],[13],[0,\"\\n              \"],[11,\"div\",[]],[15,\"id\",\"user-image\"],[15,\"class\",\"img\"],[16,\"style\",[26,[\"userImageBackground\"]],null],[13],[11,\"span\",[]],[15,\"class\",\"hidden\"],[13],[1,[28,[\"user\",\"name\"]],false],[0,\"\\\"s Picture\"],[14],[14],[0,\"\\n              \"],[11,\"button\",[]],[15,\"type\",\"button\"],[15,\"class\",\"edit-user-image\"],[5,[\"action\"],[[28,[null]],\"toggleUploadImageModal\"]],[13],[0,\"Edit Picture\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showUploadImageModal\"]]],null,{\"statements\":[[0,\"                  \"],[1,[33,[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[33,[\"hash\"],null,[[\"model\",\"imageProperty\"],[[28,[\"user\"]],\"profileImage\"]]],[33,[\"action\"],[[28,[null]],\"toggleUploadImageModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"          \"],[14],[0,\"\\n\\n\"],[0,\"            \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"text\"],[15,\"name\",\"fakeusernameremembered\"],[13],[14],[0,\"\\n            \"],[11,\"input\",[]],[15,\"style\",\"display:none;\"],[15,\"type\",\"password\"],[15,\"name\",\"fakepasswordremembered\"],[13],[14],[0,\"\\n\\n            \"],[11,\"fieldset\",[]],[15,\"class\",\"user-details-bottom\"],[13],[0,\"\\n\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"name\",\"first-form-group\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-name\"],[13],[0,\"Full Name\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"name\"]]],[[\"id\",\"class\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"user-name\",\"user-name\",\"Full Name\",\"off\",[33,[\"action\"],[[28,[null]],\"validate\",\"name\"],[[\"target\"],[[28,[\"user\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"user\",\"name\"]]],null]],null]]]],false],[0,\"\\n\"],[6,[\"if\"],[[28,[\"user\",\"errors\",\"name\"]]],null,{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        \"],[11,\"p\",[]],[13],[0,\"Use your real name so people can recognise you\"],[14],[0,\"\\n\"]],\"locals\":[]}]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-slug\"],[13],[0,\"Slug\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-input\"],[[28,[\"slugValue\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"placeholder\",\"selectOnClick\",\"autocorrect\",\"update\"],[\"user-name\",\"user-slug\",\"user\",[33,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"updateSlug\"]],[28,[\"slugValue\"]]],null]],null],\"Slug\",\"true\",\"off\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"slugValue\"]]],null]],null]]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[1,[26,[\"gh-blog-url\"]],false],[0,\"/author/\"],[1,[26,[\"slugValue\"]],false],[14],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"slug\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-email\"],[13],[0,\"Email\"],[14],[0,\"\\n\"],[6,[\"if\"],[[28,[\"canChangeEmail\"]]],null,{\"statements\":[[0,\"                        \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"email\"]]],[[\"type\",\"id\",\"name\",\"placeholder\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"focusOut\",\"update\"],[\"email\",\"user-email\",\"email\",\"Email Address\",\"off\",\"off\",\"off\",[33,[\"action\"],[[28,[null]],\"validate\",\"email\"],[[\"target\"],[[28,[\"user\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"user\",\"email\"]]],null]],null]]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"locals\":[]},{\"statements\":[[0,\"                        \"],[11,\"span\",[]],[13],[1,[28,[\"user\",\"email\"]],false],[14],[0,\"\\n\"]],\"locals\":[]}],[0,\"                    \"],[11,\"p\",[]],[13],[0,\"Used for notifications\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"rolesDropdownIsVisible\"]]],null,{\"statements\":[[0,\"                    \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                        \"],[11,\"label\",[]],[15,\"for\",\"user-role\"],[13],[0,\"Role\"],[14],[0,\"\\n                        \"],[11,\"span\",[]],[15,\"class\",\"gh-select\"],[15,\"tabindex\",\"0\"],[13],[0,\"\\n                            \"],[1,[33,[\"one-way-select\"],null,[[\"id\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",[28,[\"roles\"]],\"id\",\"name\",[28,[\"model\",\"role\"]],[33,[\"action\"],[[28,[null]],\"changeRole\"],null]]]],false],[0,\"\\n                        \"],[14],[0,\"\\n                        \"],[11,\"p\",[]],[13],[0,\"What permissions should this user have?\"],[14],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"location\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-location\"],[13],[0,\"Location\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"location\"]]],[[\"type\",\"id\",\"focusOut\",\"update\"],[\"text\",\"user-location\",[33,[\"action\"],[[28,[null]],\"validate\",\"location\"],[[\"target\"],[[28,[\"user\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"user\",\"location\"]]],null]],null]]]],false],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"location\"]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Where in the world do you live?\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"website\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-website\"],[13],[0,\"Website\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"website\"]]],[[\"type\",\"id\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"focusOut\",\"update\"],[\"url\",\"user-website\",\"off\",\"off\",\"off\",[33,[\"action\"],[[28,[null]],\"validate\",\"website\"],[[\"target\"],[[28,[\"user\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"user\",\"website\"]]],null]],null]]]],false],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"website\"]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"Have a website or blog other than this one? Link it!\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-facebook\"],[13],[0,\"Facebook Profile\"],[14],[0,\"\\n                    \"],[11,\"input\",[]],[16,\"value\",[28,[\"user\",\"facebook\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[15,\"type\",\"url\"],[15,\"class\",\"gh-input\"],[15,\"id\",\"user-facebook\"],[15,\"name\",\"user[facebook]\"],[15,\"placeholder\",\"https://www.facebook.com/username\"],[15,\"autocorrect\",\"off\"],[5,[\"action\"],[[28,[null]],\"validateFacebookUrl\"],[[\"on\"],[\"focusOut\"]]],[13],[14],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"facebook\"]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"URL of your personal Facebook Profile\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-twitter\"],[13],[0,\"Twitter Profile\"],[14],[0,\"\\n                    \"],[11,\"input\",[]],[16,\"value\",[28,[\"user\",\"twitter\"]],null],[16,\"oninput\",[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[15,\"type\",\"url\"],[15,\"class\",\"gh-input\"],[15,\"id\",\"user-twitter\"],[15,\"name\",\"user[twitter]\"],[15,\"placeholder\",\"https://twitter.com/username\"],[15,\"autocorrect\",\"off\"],[5,[\"action\"],[[28,[null]],\"validateTwitterUrl\"],[[\"on\"],[\"focusOut\"]]],[13],[14],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"twitter\"]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"URL of your personal Twitter profile\"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"bio\",\"bio-container\"]],{\"statements\":[[0,\"                    \"],[11,\"label\",[]],[15,\"for\",\"user-bio\"],[13],[0,\"Bio\"],[14],[0,\"\\n                    \"],[1,[33,[\"gh-textarea\"],[[28,[\"user\",\"bio\"]]],[[\"id\",\"focusOut\",\"update\"],[\"user-bio\",[33,[\"action\"],[[28,[null]],\"validate\",\"bio\"],[[\"target\"],[[28,[\"user\"]]]]],[33,[\"action\"],[[28,[null]],[33,[\"mut\"],[[28,[\"user\",\"bio\"]]],null]],null]]]],false],[0,\"\\n                    \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"bio\"]]],false],[0,\"\\n                    \"],[11,\"p\",[]],[13],[0,\"\\n                        Write about you, in 200 characters or less.\\n                        \"],[1,[33,[\"gh-count-characters\"],[[28,[\"user\",\"bio\"]]],null],false],[0,\"\\n                    \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n                \"],[11,\"hr\",[]],[13],[14],[0,\"\\n\\n            \"],[14],[0,\"\\n\\n        \"],[14],[0,\" \"],[0,\"\\n\\n\"],[6,[\"if\"],[[28,[\"canChangePassword\"]]],null,{\"statements\":[[0,\"            \"],[11,\"form\",[]],[15,\"id\",\"password-reset\"],[15,\"class\",\"user-profile\"],[15,\"novalidate\",\"novalidate\"],[15,\"autocomplete\",\"off\"],[5,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"user\",\"saveNewPassword\"]]],null]],[[\"on\"],[\"submit\"]]],[13],[0,\"\\n                \"],[11,\"fieldset\",[]],[13],[0,\"\\n\"],[6,[\"unless\"],[[28,[\"isNotOwnProfile\"]]],null,{\"statements\":[[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                            \"],[11,\"label\",[]],[15,\"for\",\"user-password-old\"],[13],[0,\"Old Password\"],[14],[0,\"\\n                            \"],[1,[33,[\"gh-input\"],null,[[\"value\",\"type\",\"id\",\"update\",\"onenter\"],[[28,[\"user\",\"password\"]],\"password\",\"user-password-old\",[33,[\"action\"],[[28,[null]],\"updatePassword\"],null],[33,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[0,\"\\n                            \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"locals\":[]},null]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"                        \"],[11,\"label\",[]],[15,\"for\",\"user-password-new\"],[13],[0,\"New Password\"],[14],[0,\"\\n                        \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"newPassword\"]]],[[\"type\",\"id\",\"update\",\"onenter\"],[\"password\",\"user-password-new\",[33,[\"action\"],[[28,[null]],\"updateNewPassword\"],null],[33,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"newPassword\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[28,[\"user\",\"errors\"]],[28,[\"user\",\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"                        \"],[11,\"label\",[]],[15,\"for\",\"user-new-password-verification\"],[13],[0,\"Verify Password\"],[14],[0,\"\\n                        \"],[1,[33,[\"gh-input\"],[[28,[\"user\",\"ne2Password\"]]],[[\"type\",\"id\",\"update\",\"onenter\"],[\"password\",\"user-new-password-verification\",[33,[\"action\"],[[28,[null]],\"updateNe2Password\"],null],[33,[\"action\"],[[28,[null]],[33,[\"perform\"],[[28,[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[0,\"\\n                        \"],[1,[33,[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[28,[\"user\",\"errors\"]],\"ne2Password\"]]],false],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n                    \"],[11,\"div\",[]],[15,\"class\",\"form-group\"],[13],[0,\"\\n                        \"],[1,[33,[\"gh-task-button\"],[\"Change Password\"],[[\"class\",\"task\"],[\"gh-btn gh-btn-red gh-btn-icon button-change-password\",[28,[\"user\",\"saveNewPassword\"]]]]],false],[0,\"\\n                    \"],[14],[0,\"\\n                \"],[14],[0,\"\\n            \"],[14],[0,\" \"],[0,\"\\n\"]],\"locals\":[]},null],[0,\"\\n\"],[6,[\"if\"],[[28,[\"showMyGhostLink\"]]],null,{\"statements\":[[0,\"            \"],[11,\"div\",[]],[15,\"class\",\"user-profile\"],[13],[0,\"\\n                \"],[11,\"p\",[]],[15,\"class\",\"gh-box gh-box-info\"],[13],[1,[33,[\"inline-svg\"],[\"lock\"],null],false],[0,\" To change your login details please visit \"],[11,\"a\",[]],[15,\"href\",\"https://my.ghost.org/account\"],[15,\"target\",\"_blank\"],[13],[0,\"https://my.ghost.org/account\"],[14],[14],[0,\"\\n            \"],[14],[0,\"\\n\"]],\"locals\":[]},null],[0,\"    \"],[14],[0,\"\\n\"],[14],[0,\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user.hbs" } });
});
define('ghost-admin/tests/mirage/mirage.lint-test', [], function () {
  'use strict';

  describe('ESLint | mirage', function () {

    it('mirage/config.js', function () {
      // test passed
    });

    it('mirage/config/authentication.js', function () {
      // test passed
    });

    it('mirage/config/configuration.js', function () {
      // test passed
    });

    it('mirage/config/invites.js', function () {
      // test passed
    });

    it('mirage/config/posts.js', function () {
      // test passed
    });

    it('mirage/config/roles.js', function () {
      // test passed
    });

    it('mirage/config/settings.js', function () {
      // test passed
    });

    it('mirage/config/slugs.js', function () {
      // test passed
    });

    it('mirage/config/subscribers.js', function () {
      // test passed
    });

    it('mirage/config/tags.js', function () {
      // test passed
    });

    it('mirage/config/themes.js', function () {
      // test passed
    });

    it('mirage/config/uploads.js', function () {
      // test passed
    });

    it('mirage/config/users.js', function () {
      // test passed
    });

    it('mirage/factories/invite.js', function () {
      // test passed
    });

    it('mirage/factories/notification.js', function () {
      // test passed
    });

    it('mirage/factories/post.js', function () {
      // test passed
    });

    it('mirage/factories/role.js', function () {
      // test passed
    });

    it('mirage/factories/subscriber.js', function () {
      // test passed
    });

    it('mirage/factories/tag.js', function () {
      // test passed
    });

    it('mirage/factories/user.js', function () {
      // test passed
    });

    it('mirage/fixtures/configurations.js', function () {
      // test passed
    });

    it('mirage/fixtures/roles.js', function () {
      // test passed
    });

    it('mirage/fixtures/settings.js', function () {
      // test passed
    });

    it('mirage/fixtures/themes.js', function () {
      // test passed
    });

    it('mirage/fixtures/timezones.js', function () {
      // test passed
    });

    it('mirage/models/invite.js', function () {
      // test passed
    });

    it('mirage/models/notification.js', function () {
      // test passed
    });

    it('mirage/models/post.js', function () {
      // test passed
    });

    it('mirage/models/role.js', function () {
      // test passed
    });

    it('mirage/models/subscriber.js', function () {
      // test passed
    });

    it('mirage/models/tag.js', function () {
      // test passed
    });

    it('mirage/models/theme.js', function () {
      // test passed
    });

    it('mirage/models/user.js', function () {
      // test passed
    });

    it('mirage/scenarios/default.js', function () {
      // test passed
    });

    it('mirage/serializers/application.js', function () {
      // test passed
    });

    it('mirage/serializers/user.js', function () {
      // test passed
    });

    it('mirage/utils.js', function () {
      // test passed
    });
  });
});
define('ghost-admin/torii-providers/ghost-oauth2', ['exports', 'torii/providers/oauth2-code', 'ember-computed', 'ghost-admin/utils/ghost-paths', 'ember-service/inject'], function (exports, _oauth2Code, _emberComputed, _ghostPaths, _inject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    var GhostOauth2 = _oauth2Code.default.extend({

        config: (0, _inject.default)(),

        name: 'ghost-oauth2',
        baseUrl: (0, _emberComputed.default)(function () {
            return this.get('config.ghostAuthUrl') + '/oauth2/authorize/';
        }),
        apiKey: (0, _emberComputed.default)(function () {
            return this.get('config.ghostAuthId');
        }),

        optionalUrlParams: ['type', 'email'],

        responseParams: ['code'],

        init: function init() {
            this._super.apply(this, arguments);
            var adminPath = (0, _ghostPaths.default)().adminRoot;
            var redirectUri = window.location.protocol + '//' + window.location.host;

            redirectUri += adminPath;

            this.set('redirectUri', redirectUri);
        },
        open: function open(options) {
            if (options.type) {
                this.set('type', options.type);
            }
            if (options.email) {
                this.set('email', options.email);
            }
            return this._super.apply(this, arguments);
        }
    });

    exports.default = GhostOauth2;
});
define('ghost-admin/transforms/facebook-url-user', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/(\S+)/),
                    _serialized$match2 = _slicedToArray(_serialized$match, 2),
                    user = _serialized$match2[1];

                return 'https://www.facebook.com/' + user;
            }
            return serialized;
        },
        serialize: function serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:www\.)(?:facebook\.com)\/(?:#!\/)?(\w+\/?\S+)/mi),
                    _deserialized$match2 = _slicedToArray(_deserialized$match, 2),
                    user = _deserialized$match2[1];

                return user;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/json-string', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialised) {
            return JSON.parse(serialised);
        },
        serialize: function serialize(deserialised) {
            return deserialised ? JSON.stringify(deserialised) : null;
        }
    });
});
define('ghost-admin/transforms/moment-date', ['exports', 'ember-data/transform', 'moment'], function (exports, _transform, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                return (0, _moment.default)(serialized);
            }
            return serialized;
        },
        serialize: function serialize(deserialized) {
            if (deserialized) {
                return (0, _moment.default)(deserialized).toDate();
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/moment-utc', ['exports', 'ember-data/transform', 'moment'], function (exports, _transform, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                return _moment.default.utc(serialized);
            }
            return serialized;
        },
        serialize: function serialize(deserialized) {
            if (deserialized) {
                try {
                    return deserialized.toJSON();
                } catch (e) {
                    return deserialized;
                }
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/navigation-settings', ['exports', 'ghost-admin/models/navigation-item', 'ember-data/transform', 'ember-array/utils'], function (exports, _navigationItem, _transform, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            var navItems = void 0,
                settingsArray = void 0;

            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            navItems = settingsArray.map(function (itemDetails) {
                return _navigationItem.default.create(itemDetails);
            });

            return (0, _utils.A)(navItems);
        },
        serialize: function serialize(deserialized) {
            var settingsArray = void 0;

            if ((0, _utils.isEmberArray)(deserialized)) {
                settingsArray = deserialized.map(function (item) {
                    var label = item.get('label').trim();
                    var url = item.get('url').trim();

                    return { label: label, url: url };
                }).compact();
            } else {
                settingsArray = [];
            }

            return JSON.stringify(settingsArray);
        }
    });
});
define('ghost-admin/transforms/raw', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            return serialized;
        },
        serialize: function serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/slack-settings', ['exports', 'ghost-admin/models/slack-integration', 'ember-data/transform', 'ember-array/utils'], function (exports, _slackIntegration, _transform, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            var slackObj = void 0,
                settingsArray = void 0;
            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            slackObj = settingsArray.map(function (itemDetails) {
                return _slackIntegration.default.create(itemDetails);
            });
            return (0, _utils.A)(slackObj);
        },
        serialize: function serialize(deserialized) {
            var settingsArray = void 0;
            if ((0, _utils.isEmberArray)(deserialized)) {
                settingsArray = deserialized.map(function (item) {
                    var url = (item.get('url') || '').trim();

                    return { url: url };
                }).compact();
            } else {
                settingsArray = [];
            }
            return JSON.stringify(settingsArray);
        }
    });
});
define('ghost-admin/transforms/twitter-url-user', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _transform.default.extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/@?([^\/]*)/),
                    _serialized$match2 = _slicedToArray(_serialized$match, 2),
                    user = _serialized$match2[1];

                return 'https://twitter.com/' + user;
            }
            return serialized;
        },
        serialize: function serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:twitter\.com)\/(?:#!\/)?@?([^\/]*)/),
                    _deserialized$match2 = _slicedToArray(_deserialized$match, 2),
                    user = _deserialized$match2[1];

                return '@' + user;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transitions', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        this.transition(this.hasClass('fullscreen-modal-container'), this.toValue(true), this.use('fade', { duration: 150 }), this.reverse('fade', { duration: 150 }));

        this.transition(this.hasClass('fade-transition'), this.use('crossFade', { duration: 100 }));

        this.transition(this.hasClass('tour-container'), this.toValue(true), this.use('fade', { duration: 150 }), this.reverse('fade', { duration: 150 }));

        this.transition(this.hasClass('tour'), this.toValue(true), this.use('fade', { duration: 300 }), this.reverse('fade', { duration: 300 }));
    };
});
define('ghost-admin/transitions/cross-fade', ['exports', 'liquid-fire/transitions/cross-fade'], function (exports, _crossFade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _crossFade.default;
    }
  });
});
define('ghost-admin/transitions/default', ['exports', 'liquid-fire/transitions/default'], function (exports, _default) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
define('ghost-admin/transitions/explode', ['exports', 'liquid-fire/transitions/explode'], function (exports, _explode) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _explode.default;
    }
  });
});
define('ghost-admin/transitions/fade', ['exports', 'liquid-fire/transitions/fade'], function (exports, _fade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fade.default;
    }
  });
});
define('ghost-admin/transitions/flex-grow', ['exports', 'liquid-fire/transitions/flex-grow'], function (exports, _flexGrow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flexGrow.default;
    }
  });
});
define('ghost-admin/transitions/fly-to', ['exports', 'liquid-fire/transitions/fly-to'], function (exports, _flyTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flyTo.default;
    }
  });
});
define('ghost-admin/transitions/move-over', ['exports', 'liquid-fire/transitions/move-over'], function (exports, _moveOver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moveOver.default;
    }
  });
});
define('ghost-admin/transitions/scale', ['exports', 'liquid-fire/transitions/scale'], function (exports, _scale) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scale.default;
    }
  });
});
define('ghost-admin/transitions/scroll-then', ['exports', 'liquid-fire/transitions/scroll-then'], function (exports, _scrollThen) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollThen.default;
    }
  });
});
define('ghost-admin/transitions/to-down', ['exports', 'liquid-fire/transitions/to-down'], function (exports, _toDown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toDown.default;
    }
  });
});
define('ghost-admin/transitions/to-left', ['exports', 'liquid-fire/transitions/to-left'], function (exports, _toLeft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toLeft.default;
    }
  });
});
define('ghost-admin/transitions/to-right', ['exports', 'liquid-fire/transitions/to-right'], function (exports, _toRight) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toRight.default;
    }
  });
});
define('ghost-admin/transitions/to-up', ['exports', 'liquid-fire/transitions/to-up'], function (exports, _toUp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toUp.default;
    }
  });
});
define('ghost-admin/transitions/wait', ['exports', 'liquid-fire/transitions/wait'], function (exports, _wait) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _wait.default;
    }
  });
});
define('ghost-admin/transitions/wormhole', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = wormhole;
  function wormhole(_ref) {
    var _this = this;

    var use = _ref.use;

    var oldWormholeElement = void 0,
        newWormholeElement = void 0;

    if (this.oldElement) {
      oldWormholeElement = this.oldElement.find('.liquid-wormhole-element:last-child');

      this.oldElement = null;

      if (oldWormholeElement.length > 0) {
        var newChild = oldWormholeElement.clone();
        newChild.addClass('liquid-wormhole-temp-element');

        oldWormholeElement.css({ visibility: 'hidden' });
        oldWormholeElement.find('.liquid-child').css({ visibility: 'hidden' });

        var offset = oldWormholeElement.offset();

        newChild.css({
          position: 'absolute',
          top: offset.top,
          left: offset.left,
          bottom: '',
          right: '',
          margin: '0px',
          transform: ''
        });

        newChild.appendTo(oldWormholeElement.parent());
        this.oldElement = newChild;
      }
    }

    if (this.newElement) {
      newWormholeElement = this.newElement.find('.liquid-wormhole-element:last-child');

      this.newElement = null;

      if (newWormholeElement.length > 0) {
        var _newChild = newWormholeElement.clone();

        newWormholeElement.css({ visibility: 'hidden' });
        newWormholeElement.find('.liquid-child').css({ visibility: 'hidden' });

        var _offset = newWormholeElement.offset();

        _newChild.css({
          position: 'absolute',
          top: _offset.top,
          left: _offset.left,
          bottom: '',
          right: '',
          margin: '0px',
          transform: ''
        });

        _newChild.appendTo(newWormholeElement.parent());
        this.newElement = _newChild;
      }
    }

    var animation;
    if (typeof use.handler === 'function') {
      animation = use.handler;
    } else {
      animation = context.lookup(use.name);
    }

    return animation.apply(this, use.args).finally(function () {
      if (_this.oldElement && oldWormholeElement) {
        _this.oldElement.remove();
        oldWormholeElement.css({ visibility: 'visible' });
        oldWormholeElement.find('.liquid-child').css({ visibility: 'visible' });
      }
      if (_this.newElement && newWormholeElement) {
        _this.newElement.remove();
        newWormholeElement.css({ visibility: 'visible' });
        newWormholeElement.find('.liquid-child').css({ visibility: 'visible' });
      }
    });
  };
});
define('ghost-admin/utils/bound-one-way', ['exports', 'ember-computed'], function (exports, _emberComputed) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (upstream, transform) {
        if (typeof transform !== 'function') {
            // default to the identity function
            transform = function transform(value) {
                return value;
            };
        }

        return (0, _emberComputed.default)(upstream, {
            get: function get() {
                return transform(this.get(upstream));
            },
            set: function set(key, value) {
                return value;
            }
        });
    };
});
define('ghost-admin/utils/caja-sanitizers', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    /**
     * google-caja uses url() and id() to verify if the values are allowed.
     */
    /**
     * Check if URL is allowed
     * URLs are allowed if they start with http://, https://, or /.
     * NOTE: # urls are not allowed as clicking them will break the editor when clicked
     */
    var url = function url(_url) {
        _url = _url.toString().replace(/['"]+/g, '');
        if (/^https?:\/\//.test(_url) || /^\//.test(_url)) {
            return _url;
        }
    };

    /**
     * Check if ID is allowed
     * All ids are allowed at the moment.
     */
    var id = function id(_id) {
        return _id;
    };

    exports.default = {
        url: url,
        id: id
    };
});
define('ghost-admin/utils/ctrl-or-cmd', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';
});
define('ghost-admin/utils/date-formatting', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.formatDate = undefined;


    var displayDateFormat = 'DD MMM YY @ HH:mm';

    // Add missing timestamps
    function verifyTimeStamp(dateString) {
        if (dateString && !dateString.slice(-5).match(/\d+:\d\d/)) {
            dateString += ' 12:00';
        }
        return dateString;
    }

    // Formats a Date or Moment
    function formatDate(value, timezone) {
        // we output the date adjusted to the blog timezone selected in settings
        return verifyTimeStamp(value ? (0, _moment.default)(value).tz(timezone).format(displayDateFormat) : '');
    }

    exports.formatDate = formatDate;
});
define('ghost-admin/utils/document-title', ['exports', 'ember-route', 'ember-router', 'ember-evented/on', 'ember-array/utils'], function (exports, _emberRoute, _emberRouter, _on, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        _emberRoute.default.reopen({
            // `titleToken` can either be a static string or a function
            // that accepts a model object and returns a string (or array
            // of strings if there are multiple tokens).
            titleToken: null,

            // `title` can either be a static string or a function
            // that accepts an array of tokens and returns a string
            // that will be the document title. The `collectTitleTokens` action
            // stops bubbling once a route is encountered that has a `title`
            // defined.
            title: null,

            actions: {
                collectTitleTokens: function collectTitleTokens(tokens) {
                    var titleToken = this.titleToken;

                    var finalTitle = void 0;

                    if (typeof this.titleToken === 'function') {
                        titleToken = this.titleToken(this.currentModel);
                    }

                    if ((0, _utils.isEmberArray)(titleToken)) {
                        tokens.unshift.apply(tokens, _toConsumableArray(titleToken));
                    } else if (titleToken) {
                        tokens.unshift(titleToken);
                    }

                    if (this.title) {
                        if (typeof this.title === 'function') {
                            finalTitle = this.title(tokens);
                        } else {
                            finalTitle = this.title;
                        }

                        this.router.setTitle(finalTitle);
                    } else {
                        return true;
                    }
                }
            }
        });

        _emberRouter.default.reopen({
            updateTitle: (0, _on.default)('didTransition', function () {
                this.send('collectTitleTokens', []);
            }),

            setTitle: function setTitle(title) {
                window.document.title = title;
            }
        });
    };

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }
});
define('ghost-admin/utils/format-markdown', ['exports', 'ghost-admin/utils/caja-sanitizers', 'npm:markdown-it', 'npm:markdown-it-footnote', 'npm:markdown-it-lazy-headers', 'npm:markdown-it-mark', 'npm:markdown-it-named-headers'], function (exports, _cajaSanitizers, _npmMarkdownIt, _npmMarkdownItFootnote, _npmMarkdownItLazyHeaders, _npmMarkdownItMark, _npmMarkdownItNamedHeaders) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = formatMarkdown;


    // eslint-disable-next-line new-cap
    /* global html_sanitize */
    var md = (0, _npmMarkdownIt.default)({
        html: true,
        breaks: true,
        linkify: true
    }).use(_npmMarkdownItFootnote.default).use(_npmMarkdownItLazyHeaders.default).use(_npmMarkdownItMark.default).use(_npmMarkdownItNamedHeaders.default, {
        slugify: function slugify(inputString, usedHeaders) {
            var slug = inputString.replace(/[^\w]/g, '').toLowerCase();
            if (usedHeaders[slug]) {
                usedHeaders[slug]++;
                slug += usedHeaders[slug];
            }
            return slug;
        }
    });

    function formatMarkdown(_markdown) {
        var replaceJS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var markdown = _markdown || '';
        var escapedhtml = '';

        // convert markdown to HTML
        escapedhtml = md.render(markdown);

        // replace script and iFrame
        if (replaceJS) {
            escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
            escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');
        }

        // sanitize html
        escapedhtml = html_sanitize(escapedhtml, _cajaSanitizers.default.url, _cajaSanitizers.default.id);

        return escapedhtml;
    }
});
define('ghost-admin/utils/ghost-paths', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var path = window.location.pathname;
        var subdir = path.substr(0, path.search('/ghost/'));
        var adminRoot = subdir + '/ghost/';
        var assetRoot = subdir + '/ghost/assets/';
        var apiRoot = subdir + '/ghost/api/v0.1';

        function assetUrl(src) {
            return subdir + src;
        }

        return {
            adminRoot: adminRoot,
            assetRoot: assetRoot,
            apiRoot: apiRoot,
            subdir: subdir,
            blogRoot: subdir + '/',
            count: 'https://count.ghost.org/',

            url: {
                admin: function admin() {
                    return makeRoute(adminRoot, arguments);
                },
                api: function api() {
                    return makeRoute(apiRoot, arguments);
                },
                join: function join() {
                    if (arguments.length > 1) {
                        return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
                    } else if (arguments.length === 1) {
                        var _arguments = Array.prototype.slice.call(arguments),
                            arg = _arguments[0];

                        return arg.slice(-1) === '/' ? arg : arg + '/';
                    }
                    return '/';
                },


                asset: assetUrl
            }
        };
    };

    var makeRoute = function makeRoute(root, args) {
        var slashAtStart = /^\//;
        var slashAtEnd = /\/$/;
        var parts = Array.prototype.slice.call(args, 0);
        var route = root.replace(slashAtEnd, '');

        parts.forEach(function (part) {
            if (part) {
                route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
            }
        });

        return route += '/';
    };
});
define("ghost-admin/utils/isFinite", ["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (value) {
        return window.isFinite(value) && !window.isNaN(parseFloat(value));
    };
});
define('ghost-admin/utils/isNumber', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (value) {
    return typeof value === 'number' || value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && toString.call(value) === '[object Number]' || false;
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var toString = Object.prototype.toString;
});
define('ghost-admin/utils/link-component', ['ember', 'ember-computed', 'ember-invoke-action'], function (_ember, _emberComputed, _emberInvokeAction) {
    'use strict';

    var LinkComponent = _ember.default.LinkComponent;


    LinkComponent.reopen({
        active: (0, _emberComputed.default)('attrs.params', '_routing.currentState', function () {
            var isActive = this._super.apply(this, arguments);

            if (typeof this.get('alternateActive') === 'function') {
                (0, _emberInvokeAction.invokeAction)(this, 'alternateActive', isActive);
            }

            return isActive;
        }),

        activeClass: (0, _emberComputed.default)('tagName', function () {
            return this.get('tagName') === 'button' ? '' : 'active';
        })
    });
});
define("ghost-admin/utils/random-password", ["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var word = generatePassword(6);
        var randomN = Math.floor(Math.random() * 1000);

        return word + randomN;
    };
});
define('ghost-admin/utils/route', ['ember-route'], function (_emberRoute) {
    'use strict';

    _emberRoute.default.reopen({
        actions: {
            willTransition: function willTransition(transition) {
                if (this.get('upgradeStatus.isRequired')) {
                    transition.abort();
                    this.get('upgradeStatus').requireUpgrade();
                    return false;
                } else {
                    this._super.apply(this, arguments);
                }
            }
        }
    });
});
define('ghost-admin/utils/text-field', ['ember-components/text-field'], function (_textField) {
    'use strict';

    _textField.default.reopen({
        attributeBindings: ['autofocus']
    });
});
define('ghost-admin/utils/titleize', ['exports', 'ember-string'], function (exports, _emberString) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (input) {
        var words = input.split(' ').map(function (word, index) {
            if (index === 0 || lowerWords.indexOf(word) === -1) {
                word = (0, _emberString.capitalize)(word);
            }

            return word;
        });

        return words.join(' ');
    };

    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 'into', 'with'];
});
define('ghost-admin/utils/validator-extensions', ['exports', 'ember-utils'], function (exports, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    function init() {
        // Provide a few custom validators
        //
        validator.extend('empty', function (str) {
            return (0, _emberUtils.isBlank)(str);
        });

        validator.extend('notContains', function (str, badString) {
            return str.indexOf(badString) === -1;
        });
    }

    exports.default = {
        init: init
    };
});
define("ghost-admin/utils/window-proxy", ["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        changeLocation: function changeLocation(url) {
            window.location = url;
        },
        replaceLocation: function replaceLocation(url) {
            window.location.replace(url);
        }
    };
});
define('ghost-admin/utils/word-count', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (s) {
        // replaces previous XRegExp("[^\\s\\d\\p{L}]", 'g') that was causing
        // issues when browsers added more es6 support and was a 63KB minified
        // dependency whereas this is ~8KB
        // unicode list taken from https://github.com/slevithan/xregexp/blob/master/src/addons/unicode-categories.js
        var nonANumLetters = new RegExp('[^\\s\\dA-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]', 'g');

        s = s.replace(/<(.|\n)*?>/g, ' '); // strip tags
        s = s.replace(nonANumLetters, ''); // ignore non-alphanumeric letters
        s = s.replace(/(^\s*)|(\s*$)/gi, ''); // exclude starting and ending white-space
        s = s.replace(/\n /gi, ' '); // convert newlines to spaces
        s = s.replace(/\n+/gi, ' ');
        s = s.replace(/[ ]{2,}/gi, ' '); // convert 2 or more spaces to 1

        return s.split(' ').length;
    };
});
define('ghost-admin/validators/base', ['exports', 'ember-object'], function (exports, _emberObject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberObject.default.extend({
        properties: [],
        passed: false,

        /**
         * When passed a model and (optionally) a property name,
         * checks it against a list of validation functions
         * @param  {Ember.Object} model Model to validate
         * @param  {string} prop  Property name to check
         * @return {boolean}      True if the model passed all (or one) validation(s),
         *                        false if not
         */
        check: function check(model, prop) {
            var _this = this;

            this.set('passed', true);

            if (prop && this[prop]) {
                this[prop](model);
            } else {
                this.get('properties').forEach(function (property) {
                    if (_this[property]) {
                        _this[property](model);
                    }
                });
            }
            return this.get('passed');
        },
        invalidate: function invalidate() {
            this.set('passed', false);
        }
    });
});
define('ghost-admin/validators/invite-user', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['email'],

        email: function email(model) {
            var email = model.get('email');

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/nav-item', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['label', 'url'],

        label: function label(model) {
            var label = model.get('label');
            var hasValidated = model.get('hasValidated');

            if (validator.empty(label)) {
                model.get('errors').add('label', 'You must specify a label');
                this.invalidate();
            }

            hasValidated.addObject('label');
        },
        url: function url(model) {
            var url = model.get('url');
            var hasValidated = model.get('hasValidated');
            /* eslint-disable camelcase */
            var validatorOptions = { require_protocol: true };
            /* eslint-enable camelcase */
            var urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9\-]+:)/);

            if (validator.empty(url)) {
                model.get('errors').add('url', 'You must specify a URL or relative path');
                this.invalidate();
            } else if (url.match(/\s/) || !validator.isURL(url, validatorOptions) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'You must specify a valid URL or relative path');
                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/new-user', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        properties: ['name', 'email', 'password'],

        name: function name(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var name = model.get('name');

            if (!usingOAuth && !validator.isLength(name, 1)) {
                model.get('errors').add('name', 'Please enter a name.');
                this.invalidate();
            }
        },
        email: function email(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var email = model.get('email');

            if (usingOAuth) {
                return;
            }

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        },
        password: function password(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var password = model.get('password');

            if (!usingOAuth && !validator.isLength(password, 8)) {
                model.get('errors').add('password', 'Password must be at least 8 characters long');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/post', ['exports', 'ghost-admin/validators/base', 'moment', 'ember-utils'], function (exports, _base, _moment, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['title', 'metaTitle', 'metaDescription', 'publishedAtBlogTime', 'publishedAtBlogDate'],

        title: function title(model) {
            var title = model.get('title');

            if (validator.empty(title)) {
                model.get('errors').add('title', 'You must specify a title for the post.');
                this.invalidate();
            }

            if (!validator.isLength(title, 0, 255)) {
                model.get('errors').add('title', 'Title cannot be longer than 255 characters.');
                this.invalidate();
            }
        },
        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('metaTitle');

            if (!validator.isLength(metaTitle, 0, 300)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },
        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('metaDescription');

            if (!validator.isLength(metaDescription, 0, 500)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        },


        // for posts which haven't been published before and where the blog date/time
        // is blank we should ignore the validation
        _shouldValidatePublishedAtBlog: function _shouldValidatePublishedAtBlog(model) {
            var publishedAtUTC = model.get('publishedAtUTC');
            var publishedAtBlogDate = model.get('publishedAtBlogDate');
            var publishedAtBlogTime = model.get('publishedAtBlogTime');

            return (0, _emberUtils.isPresent)(publishedAtUTC) || (0, _emberUtils.isPresent)(publishedAtBlogDate) || (0, _emberUtils.isPresent)(publishedAtBlogTime);
        },


        // convenience method as .validate({property: 'x'}) doesn't accept multiple properties
        publishedAtBlog: function publishedAtBlog(model) {
            this.publishedAtBlogTime(model);
            this.publishedAtBlogDate(model);
        },
        publishedAtBlogTime: function publishedAtBlogTime(model) {
            var publishedAtBlogTime = model.get('publishedAtBlogTime');
            var timeRegex = /^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$/;

            if (!timeRegex.test(publishedAtBlogTime) && this._shouldValidatePublishedAtBlog(model)) {
                model.get('errors').add('publishedAtBlogTime', 'Must be in format: "15:00"');
                this.invalidate();
            }
        },
        publishedAtBlogDate: function publishedAtBlogDate(model) {
            var publishedAtBlogDate = model.get('publishedAtBlogDate');
            var publishedAtBlogTime = model.get('publishedAtBlogTime');

            if (!this._shouldValidatePublishedAtBlog(model)) {
                return;
            }

            // we have a time string but no date string
            if (validator.empty(publishedAtBlogDate) && !validator.empty(publishedAtBlogTime)) {
                model.get('errors').add('publishedAtBlogDate', 'Can\'t be blank');
                return this.invalidate();
            }

            // don't validate the date if the time format is incorrect
            if ((0, _emberUtils.isEmpty)(model.get('errors').errorsFor('publishedAtBlogTime'))) {
                var status = model.get('statusScratch') || model.get('status');
                var now = (0, _moment.default)();
                var publishedAtUTC = model.get('publishedAtUTC');
                var publishedAtBlogTZ = model.get('publishedAtBlogTZ');
                var matchesExisting = publishedAtUTC && publishedAtBlogTZ.isSame(publishedAtUTC);
                var isInFuture = publishedAtBlogTZ.isSameOrAfter(now.add(2, 'minutes'));

                // draft/published must be in past
                if ((status === 'draft' || status === 'published') && publishedAtBlogTZ.isSameOrAfter(now)) {
                    model.get('errors').add('publishedAtBlogDate', 'Must be in the past');
                    this.invalidate();

                    // scheduled must be at least 2 mins in the future
                    // ignore if it matches publishedAtUTC as that is likely an update of a scheduled post
                } else if (status === 'scheduled' && !matchesExisting && !isInFuture) {
                    model.get('errors').add('publishedAtBlogDate', 'Must be at least 2 mins in the future');
                    this.invalidate();
                }
            }
        }
    });
});
define('ghost-admin/validators/reset', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['newPassword'],

        newPassword: function newPassword(model) {
            var p1 = model.get('newPassword');
            var p2 = model.get('ne2Password');

            if (validator.empty(p1)) {
                model.get('errors').add('newPassword', 'Please enter a password.');
                this.invalidate();
            } else if (!validator.isLength(p1, 8)) {
                model.get('errors').add('newPassword', 'The password is not long enough.');
                this.invalidate();
            } else if (!validator.equals(p1, p2)) {
                model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/setting', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['title', 'description', 'password'],
        title: function title(model) {
            var title = model.get('title');

            if (!validator.isLength(title, 0, 150)) {
                model.get('errors').add('title', 'Title is too long');
                this.invalidate();
            }
        },
        description: function description(model) {
            var desc = model.get('description');

            if (!validator.isLength(desc, 0, 200)) {
                model.get('errors').add('description', 'Description is too long');
                this.invalidate();
            }
        },
        password: function password(model) {
            var isPrivate = model.get('isPrivate');
            var password = model.get('password');

            if (isPrivate && password === '') {
                model.get('errors').add('password', 'Password must be supplied');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/setup', ['exports', 'ghost-admin/validators/new-user'], function (exports, _newUser) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _newUser.default.create({
        properties: ['name', 'email', 'password', 'blogTitle', 'session'],

        blogTitle: function blogTitle(model) {
            var blogTitle = model.get('blogTitle');

            if (!validator.isLength(blogTitle, 1)) {
                model.get('errors').add('blogTitle', 'Please enter a blog title.');
                this.invalidate();
            }
        },
        session: function session(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var isAuthenticated = model.get('session.isAuthenticated');

            if (usingOAuth && !isAuthenticated) {
                model.get('errors').add('session', 'Please connect a Ghost.org account before continuing');
                model.get('hasValidated').pushObject('session');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signin', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['identification', 'signin', 'forgotPassword'],
        invalidMessage: 'Email address is not valid',

        identification: function identification(model) {
            var id = model.get('identification');

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        },
        signin: function signin(model) {
            var id = model.get('identification');
            var password = model.get('password');

            model.get('errors').clear();

            if (validator.empty(id)) {
                model.get('errors').add('identification', 'Please enter an email');
                this.invalidate();
            }

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }

            if (validator.empty(password)) {
                model.get('errors').add('password', 'Please enter a password');
                this.invalidate();
            }
        },
        forgotPassword: function forgotPassword(model) {
            var id = model.get('identification');

            model.get('errors').clear();

            if (validator.empty(id) || !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signup', ['exports', 'ghost-admin/validators/new-user'], function (exports, _newUser) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _newUser.default.create();
});
define('ghost-admin/validators/slack-integration', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['url'],

        url: function url(model) {
            var url = model.get('url');
            var hasValidated = model.get('hasValidated');

            var urlRegex = new RegExp(/(^https:\/\/hooks\.slack\.com\/services\/)(\S+)/);

            if (!validator.empty(url) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>');

                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/subscriber', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['email'],

        email: function email(model) {
            var email = model.get('email');

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/tag-settings', ['exports', 'ghost-admin/validators/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

        name: function name(model) {
            var name = model.get('name');

            if (validator.empty(name)) {
                model.get('errors').add('name', 'You must specify a name for the tag.');
                this.invalidate();
            } else if (name.match(/^,/)) {
                model.get('errors').add('name', 'Tag names can\'t start with commas.');
                this.invalidate();
            } else if (!validator.isLength(name, 0, 150)) {
                model.get('errors').add('name', 'Tag names cannot be longer than 150 characters.');
                this.invalidate();
            }
        },
        slug: function slug(model) {
            var slug = model.get('slug');

            if (!validator.isLength(slug, 0, 150)) {
                model.get('errors').add('slug', 'URL cannot be longer than 150 characters.');
                this.invalidate();
            }
        },
        description: function description(model) {
            var description = model.get('description');

            if (!validator.isLength(description, 0, 200)) {
                model.get('errors').add('description', 'Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        },
        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('metaTitle');

            if (!validator.isLength(metaTitle, 0, 300)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },
        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('metaDescription');

            if (!validator.isLength(metaDescription, 0, 500)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/user', ['exports', 'ghost-admin/validators/base', 'ember-utils'], function (exports, _base, _emberUtils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['name', 'bio', 'email', 'location', 'website', 'roles'],

        isActive: function isActive(model) {
            return model.get('status') === 'active';
        },
        name: function name(model) {
            var name = model.get('name');

            if (this.isActive(model)) {
                if (validator.empty(name)) {
                    model.get('errors').add('name', 'Please enter a name.');
                    this.invalidate();
                } else if (!validator.isLength(name, 0, 150)) {
                    model.get('errors').add('name', 'Name is too long');
                    this.invalidate();
                }
            }
        },
        bio: function bio(model) {
            var bio = model.get('bio');

            if (this.isActive(model)) {
                if (!validator.isLength(bio, 0, 200)) {
                    model.get('errors').add('bio', 'Bio is too long');
                    this.invalidate();
                }
            }
        },
        email: function email(model) {
            var email = model.get('email');

            if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Please supply a valid email address');
                this.invalidate();
            }
        },
        location: function location(model) {
            var location = model.get('location');

            if (this.isActive(model)) {
                if (!validator.isLength(location, 0, 150)) {
                    model.get('errors').add('location', 'Location is too long');
                    this.invalidate();
                }
            }
        },
        website: function website(model) {
            var website = model.get('website');
            // eslint-disable-next-line camelcase
            var isInvalidWebsite = !validator.isURL(website, { require_protocol: false }) || !validator.isLength(website, 0, 2000);

            if (this.isActive(model)) {
                if (!validator.empty(website) && isInvalidWebsite) {
                    model.get('errors').add('website', 'Website is not a valid url');
                    this.invalidate();
                }
            }
        },
        roles: function roles(model) {
            if (!this.isActive(model)) {
                var roles = model.get('roles');

                if (roles.length < 1) {
                    model.get('errors').add('role', 'Please select a role');
                    this.invalidate();
                }
            }
        },
        passwordChange: function passwordChange(model) {
            var newPassword = model.get('newPassword');
            var ne2Password = model.get('ne2Password');

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('newPassword');
            model.get('hasValidated').addObject('ne2Password');

            if ((0, _emberUtils.isBlank)(newPassword) && (0, _emberUtils.isBlank)(ne2Password)) {
                model.get('errors').add('newPassword', 'Sorry, passwords can\'t be blank');
                this.invalidate();
            } else {
                if (!validator.equals(newPassword, ne2Password)) {
                    model.get('errors').add('ne2Password', 'Your new passwords do not match');
                    this.invalidate();
                }

                if (!validator.isLength(newPassword, 8)) {
                    model.get('errors').add('newPassword', 'Your password must be at least 8 characters long.');
                    this.invalidate();
                }
            }
        },
        ownPasswordChange: function ownPasswordChange(model) {
            var oldPassword = model.get('password');

            this.passwordChange(model);

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('password');

            if ((0, _emberUtils.isBlank)(oldPassword)) {
                model.get('errors').add('password', 'Your current password is required to set a new one');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/views/application', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _ember.default.Component.extend({});
});


define('ghost-admin/config/environment', ['ember'], function(Ember) {
  var prefix = 'ghost-admin';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

if (!runningTests) {
  require("ghost-admin/app")["default"].create({"version":"1.0","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost-admin"});
}
//# sourceMappingURL=ghost-4a1d073e7825e8905394526b2b0f20e3.map
