{"version":3,"sources":["ghost-admin/tests/acceptance/authentication-test.js","ghost-admin/tests/acceptance/editor-test.js","ghost-admin/tests/acceptance/ghost-desktop-test.js","ghost-admin/tests/acceptance/password-reset-test.js","ghost-admin/tests/acceptance/posts/post-test.js","ghost-admin/tests/acceptance/settings/apps-test.js","ghost-admin/tests/acceptance/settings/code-injection-test.js","ghost-admin/tests/acceptance/settings/general-test.js","ghost-admin/tests/acceptance/settings/labs-test.js","ghost-admin/tests/acceptance/settings/navigation-test.js","ghost-admin/tests/acceptance/settings/slack-test.js","ghost-admin/tests/acceptance/settings/tags-test.js","ghost-admin/tests/acceptance/setup-test.js","ghost-admin/tests/acceptance/signin-test.js","ghost-admin/tests/acceptance/signup-test.js","ghost-admin/tests/acceptance/subscribers-test.js","ghost-admin/tests/acceptance/team-test.js","ghost-admin/tests/acceptance/version-mismatch-test.js","ghost-admin/tests/helpers/adapter-error.js","ghost-admin/tests/helpers/destroy-app.js","ghost-admin/tests/helpers/ember-basic-dropdown.js","ghost-admin/tests/helpers/ember-power-select.js","ghost-admin/tests/helpers/ember-simple-auth.js","ghost-admin/tests/helpers/ember-sortable/test-helpers.js","ghost-admin/tests/helpers/file-upload.js","ghost-admin/tests/helpers/module-for-acceptance.js","ghost-admin/tests/helpers/resolver.js","ghost-admin/tests/helpers/start-app.js","ghost-admin/tests/integration/adapters/tag-test.js","ghost-admin/tests/integration/adapters/user-test.js","ghost-admin/tests/integration/components/gh-alert-test.js","ghost-admin/tests/integration/components/gh-alerts-test.js","ghost-admin/tests/integration/components/gh-cm-editor-test.js","ghost-admin/tests/integration/components/gh-datetime-input-test.js","ghost-admin/tests/integration/components/gh-feature-flag-test.js","ghost-admin/tests/integration/components/gh-file-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test.js","ghost-admin/tests/integration/components/gh-navigation-test.js","ghost-admin/tests/integration/components/gh-navitem-test.js","ghost-admin/tests/integration/components/gh-navitem-url-input-test.js","ghost-admin/tests/integration/components/gh-notification-test.js","ghost-admin/tests/integration/components/gh-notifications-test.js","ghost-admin/tests/integration/components/gh-profile-image-test.js","ghost-admin/tests/integration/components/gh-search-input-test.js","ghost-admin/tests/integration/components/gh-subscribers-table-test.js","ghost-admin/tests/integration/components/gh-tag-settings-form-test.js","ghost-admin/tests/integration/components/gh-tags-management-container-test.js","ghost-admin/tests/integration/components/gh-task-button-test.js","ghost-admin/tests/integration/components/gh-theme-table-test.js","ghost-admin/tests/integration/components/gh-timezone-select-test.js","ghost-admin/tests/integration/components/gh-trim-focus-input-test.js","ghost-admin/tests/integration/components/gh-validation-status-container-test.js","ghost-admin/tests/integration/components/modals/delete-subscriber-test.js","ghost-admin/tests/integration/components/modals/import-subscribers-test.js","ghost-admin/tests/integration/components/modals/new-subscriber-test.js","ghost-admin/tests/integration/components/modals/upload-theme-test.js","ghost-admin/tests/integration/components/transfer-owner-test.js","ghost-admin/tests/integration/services/ajax-test.js","ghost-admin/tests/integration/services/config-test.js","ghost-admin/tests/integration/services/feature-test.js","ghost-admin/tests/integration/services/lazy-loader-test.js","ghost-admin/tests/integration/services/slug-generator-test.js","ghost-admin/tests/integration/services/store-test.js","ghost-admin/tests/integration/services/time-zone-test.js","ghost-admin/tests/test-helper.js","ghost-admin/tests/unit/components/gh-alert-test.js","ghost-admin/tests/unit/components/gh-app-test.js","ghost-admin/tests/unit/components/gh-content-preview-content-test.js","ghost-admin/tests/unit/components/gh-editor-save-button-test.js","ghost-admin/tests/unit/components/gh-editor-test.js","ghost-admin/tests/unit/components/gh-infinite-scroll-test.js","ghost-admin/tests/unit/components/gh-navitem-url-input-test.js","ghost-admin/tests/unit/components/gh-notification-test.js","ghost-admin/tests/unit/components/gh-posts-list-item-test.js","ghost-admin/tests/unit/components/gh-select-native-test.js","ghost-admin/tests/unit/components/gh-selectize-test.js","ghost-admin/tests/unit/components/gh-spin-button-test.js","ghost-admin/tests/unit/components/gh-upgrade-notification-test.js","ghost-admin/tests/unit/components/gh-url-preview_test.js","ghost-admin/tests/unit/components/gh-user-active-test.js","ghost-admin/tests/unit/components/gh-user-invited-test.js","ghost-admin/tests/unit/controllers/post-settings-menu-test.js","ghost-admin/tests/unit/controllers/settings/general-test.js","ghost-admin/tests/unit/controllers/settings/navigation-test.js","ghost-admin/tests/unit/controllers/subscribers-test.js","ghost-admin/tests/unit/helpers/gh-format-time-scheduled-test.js","ghost-admin/tests/unit/helpers/gh-format-timeago-test.js","ghost-admin/tests/unit/helpers/gh-user-can-admin-test.js","ghost-admin/tests/unit/helpers/highlighted-text-test.js","ghost-admin/tests/unit/helpers/is-equal-test.js","ghost-admin/tests/unit/helpers/is-not-test.js","ghost-admin/tests/unit/mixins/editor-base-controller-test.js","ghost-admin/tests/unit/mixins/infinite-scroll-test.js","ghost-admin/tests/unit/mixins/validation-engine-test.js","ghost-admin/tests/unit/models/navigation-item-test.js","ghost-admin/tests/unit/models/post-test.js","ghost-admin/tests/unit/models/role-test.js","ghost-admin/tests/unit/models/setting-test.js","ghost-admin/tests/unit/models/subscriber-test.js","ghost-admin/tests/unit/models/tag-test.js","ghost-admin/tests/unit/models/user-test.js","ghost-admin/tests/unit/routes/subscribers-test.js","ghost-admin/tests/unit/routes/subscribers/import-test.js","ghost-admin/tests/unit/routes/subscribers/new-test.js","ghost-admin/tests/unit/serializers/notification-test.js","ghost-admin/tests/unit/serializers/post-test.js","ghost-admin/tests/unit/serializers/role-test.js","ghost-admin/tests/unit/serializers/setting-test.js","ghost-admin/tests/unit/serializers/subscriber-test.js","ghost-admin/tests/unit/serializers/tag-test.js","ghost-admin/tests/unit/serializers/user-test.js","ghost-admin/tests/unit/services/config-test.js","ghost-admin/tests/unit/services/event-bus-test.js","ghost-admin/tests/unit/services/notifications-test.js","ghost-admin/tests/unit/services/upgrade-status-test.js","ghost-admin/tests/unit/transforms/facebook-url-user-test.js","ghost-admin/tests/unit/transforms/navigation-settings-test.js","ghost-admin/tests/unit/transforms/slack-settings-test.js","ghost-admin/tests/unit/transforms/twitter-url-user-test.js","ghost-admin/tests/unit/utils/date-formatting-test.js","ghost-admin/tests/unit/utils/ghost-paths-test.js","ghost-admin/tests/unit/validators/nav-item-test.js","ghost-admin/tests/unit/validators/slack-integration-test.js","ghost-admin/tests/unit/validators/subscriber-test.js","ghost-admin/tests/unit/validators/tag-settings-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ghost-admin/tests/acceptance/authentication-test', ['exports', 'mocha', 'chai', 'jquery', 'ember-runloop', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage', 'ghost-admin/utils/window-proxy', 'ghost-admin/utils/ghost-paths'], function (exports, _mocha, _chai, _jquery, _emberRunloop, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage, _ghostAdminUtilsWindowProxy, _ghostAdminUtilsGhostPaths) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    var Ghost = (0, _ghostAdminUtilsGhostPaths['default'])();\n\n    (0, _mocha.describe)('Acceptance: Authentication', function () {\n        var application = undefined,\n            originalReplaceLocation = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('general page', function () {\n            (0, _mocha.beforeEach)(function () {\n                originalReplaceLocation = _ghostAdminUtilsWindowProxy['default'].replaceLocation;\n                _ghostAdminUtilsWindowProxy['default'].replaceLocation = function (url) {\n                    visit(url);\n                };\n\n                server.loadFixtures();\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role], slug: 'test-user' });\n            });\n\n            (0, _mocha.afterEach)(function () {\n                _ghostAdminUtilsWindowProxy['default'].replaceLocation = originalReplaceLocation;\n            });\n\n            (0, _mocha.it)('invalidates session on 401 API response', function () {\n                // return a 401 when attempting to retrieve users\n                server.get('/users/', function (db, request) {\n                    return new _emberCliMirage['default'].Response(401, {}, {\n                        errors: [{ message: 'Access denied.', errorType: 'UnauthorizedError' }]\n                    });\n                });\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n                visit('/team');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'url after 401').to.equal('/signin');\n                });\n            });\n\n            (0, _mocha.it)('doesn\\'t show navigation menu on invalid url when not authenticated', function () {\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n\n                visit('/');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'current url').to.equal('/signin');\n                    (0, _chai.expect)(find('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n                });\n\n                visit('/signin/invalidurl/');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'url after invalid url').to.equal('/signin/invalidurl/');\n                    (0, _chai.expect)(currentPath(), 'path after invalid url').to.equal('error404');\n                    (0, _chai.expect)(find('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n                });\n            });\n\n            (0, _mocha.it)('shows nav menu on invalid url when authenticated', function () {\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n                visit('/signin/invalidurl/');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'url after invalid url').to.equal('/signin/invalidurl/');\n                    (0, _chai.expect)(currentPath(), 'path after invalid url').to.equal('error404');\n                    (0, _chai.expect)(find('nav.gh-nav').length, 'nav menu presence').to.equal(1);\n                });\n            });\n        });\n\n        (0, _mocha.describe)('editor', function () {\n            var origDebounce = _emberRunloop['default'].debounce;\n            var origThrottle = _emberRunloop['default'].throttle;\n\n            // we don't want the autosave interfering in this test\n            (0, _mocha.beforeEach)(function () {\n                _emberRunloop['default'].debounce = function () {};\n                _emberRunloop['default'].throttle = function () {};\n            });\n\n            (0, _mocha.it)('displays re-auth modal attempting to save with invalid session', function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // simulate an invalid session when saving the edited post\n                server.put('/posts/:id/', function (db, request) {\n                    var post = db.posts.find(request.params.id);\n\n                    var _JSON$parse$posts = _slicedToArray(JSON.parse(request.requestBody).posts, 1);\n\n                    var attrs = _JSON$parse$posts[0];\n\n                    if (attrs.markdown === 'Edited post body') {\n                        return new _emberCliMirage['default'].Response(401, {}, {\n                            errors: [{ message: 'Access denied.', errorType: 'UnauthorizedError' }]\n                        });\n                    } else {\n                        return {\n                            posts: [post]\n                        };\n                    }\n                });\n\n                server.loadFixtures();\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n\n                visit('/editor');\n\n                // create the post\n                fillIn('#entry-title', 'Test Post');\n                fillIn('textarea.markdown-editor', 'Test post body');\n                click('.js-publish-button');\n\n                andThen(function () {\n                    // we shouldn't have a modal at this point\n                    (0, _chai.expect)(find('.modal-container #login').length, 'modal exists').to.equal(0);\n                    // we also shouldn't have any alerts\n                    (0, _chai.expect)(find('.gh-alert').length, 'no of alerts').to.equal(0);\n                });\n\n                // update the post\n                fillIn('textarea.markdown-editor', 'Edited post body');\n                click('.js-publish-button');\n\n                andThen(function () {\n                    // we should see a re-auth modal\n                    (0, _chai.expect)(find('.fullscreen-modal #login').length, 'modal exists').to.equal(1);\n                });\n            });\n\n            // don't clobber debounce/throttle for future tests\n            (0, _mocha.afterEach)(function () {\n                _emberRunloop['default'].debounce = origDebounce;\n                _emberRunloop['default'].throttle = origThrottle;\n            });\n        });\n\n        (0, _mocha.it)('adds auth headers to jquery ajax', function (done) {\n            var role = server.create('role', { name: 'Administrator' });\n            var user = server.create('user', { roles: [role] });\n\n            server.post('/uploads', function (db, request) {\n                return request;\n            });\n            server.loadFixtures();\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application, {\n                access_token: 'test_token',\n                expires_in: 3600,\n                token_type: 'Bearer'\n            });\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n            // necessary to visit a page to fully boot the app in testing\n            visit('/').andThen(function () {\n                _jquery['default'].ajax({\n                    type: 'POST',\n                    url: Ghost.apiRoot + '/uploads/',\n                    data: { test: 'Test' }\n                }).then(function (request) {\n                    (0, _chai.expect)(request.requestHeaders.Authorization, 'Authorization header').to.exist;\n                    (0, _chai.expect)(request.requestHeaders.Authorization, 'Authotization header content').to.equal('Bearer test_token');\n                }).always(function () {\n                    done();\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/editor-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage', 'sinon'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage, _sinon) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Editor', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            server.create('post');\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/editor/1');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('does not redirect to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n            server.create('post');\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/editor/1');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/1');\n            });\n        });\n\n        (0, _mocha.it)('does not redirect to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n            server.create('post');\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/editor/1');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/1');\n            });\n        });\n\n        (0, _mocha.it)('displays 404 when post does not exist', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/editor/1');\n\n            andThen(function () {\n                (0, _chai.expect)(currentPath()).to.equal('error404');\n                (0, _chai.expect)(currentURL()).to.equal('/editor/1');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('renders the editor correctly, PSM Publish Date and Save Button', function () {\n                var posts = server.createList('post', 2);\n                var plusTenMinPacific = moment().tz('Pacific/Kwajalein').add(10, 'minutes').format('DD MMM YY @ HH:mm').toString();\n                var plusTwoMinPacific = moment().tz('Pacific/Kwajalein').add(2, 'minutes').format('DD MMM YY @ HH:mm').toString();\n\n                // post id 1 is a draft, checking for draft behaviour now\n                visit('/editor/1');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/1');\n                });\n\n                // should error, if the date input is in a wrong format\n                fillIn('input[name=\"post-setting-date\"]', 'testdate');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.ember-view.response').text().trim(), 'inline error response for invalid date').to.equal('Published Date must be a valid date with format: DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)');\n                });\n\n                // saves the post with the new date\n                fillIn('input[name=\"post-setting-date\"]', '10 May 16 @ 10:00');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n                // saving\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'date after saving').to.equal('10 May 16 @ 10:00');\n                });\n\n                // should not do anything if the input date is not different\n                fillIn('input[name=\"post-setting-date\"]', '10 May 16 @ 10:00');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'date didn\\'t change').to.equal('10 May 16 @ 10:00');\n                });\n\n                // checking the flow of the saving button for a draft\n                andThen(function () {\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'no red button expected').to.be['false'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button').to.equal('Save Draft');\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the default active button state for a draft').to.be['true'];\n                });\n\n                // click on publish now\n                click('.post-save-publish a');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.post-save-publish').hasClass('active'), 'highlights the selected active button state').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button to change from draft to published').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button after click on \\'publish now\\'').to.equal('Publish Now');\n                });\n\n                // Publish the post\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button after publishing').to.equal('Update Post');\n                    (0, _chai.expect)(find('.post-save-publish').hasClass('active'), 'highlights the default active button state for a published post').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'no red button expected').to.be['false'];\n                });\n\n                // post id 2 is a published post, checking for published post behaviour now\n                visit('/editor/2');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/2');\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val()).to.equal('19 Dec 15 @ 16:25');\n                });\n\n                // should reset the date if the input field is blank\n                fillIn('input[name=\"post-setting-date\"]', '');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'empty date input').to.equal('');\n                });\n\n                // saving\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'date value restored').to.equal('19 Dec 15 @ 16:25');\n                });\n\n                // saves the post with a new date\n                fillIn('input[name=\"post-setting-date\"]', '10 May 16 @ 10:00');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n                // saving\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'new date after saving').to.equal('10 May 16 @ 10:00');\n                });\n\n                // go to settings to change the timezone\n                visit('/settings/general');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL for settings').to.equal('/settings/general');\n                    (0, _chai.expect)(find('#activeTimezone option:selected').text().trim(), 'default timezone').to.equal('(GMT) UTC');\n                    // select a new timezone\n                    find('#activeTimezone option[value=\"Pacific/Kwajalein\"]').prop('selected', true);\n                });\n\n                triggerEvent('#activeTimezone select', 'change');\n                // save the settings\n                click('.view-header .btn.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#activeTimezone option:selected').text().trim(), 'new timezone after saving').to.equal('(GMT +12:00) International Date Line West');\n                });\n\n                // and now go back to the editor\n                visit('/editor/2');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL in editor').to.equal('/editor/2');\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'date with blog timezone').to.equal('10 May 16 @ 22:00');\n                });\n\n                // should not do anything if the input date is not different\n                fillIn('input[name=\"post-setting-date\"]', '10 May 16 @ 22:00');\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'date didn\\'t change').to.equal('10 May 16 @ 22:00');\n                });\n\n                // click on unpublish\n                click('.post-save-draft a');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the active button state for a draft').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button to change from published to draft').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for post to unpublish').to.equal('Unpublish');\n                });\n\n                // Unpublish the post\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for draft').to.equal('Save Draft');\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the default active button state for a draft').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'no red button expected').to.be['false'];\n                });\n\n                // Set the publish date 2 minute to the future to find an error message\n                fillIn('input[name=\"post-setting-date\"]', plusTwoMinPacific);\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    andThen(function () {\n                        (0, _chai.expect)(find('.ember-view.response').text().trim(), 'inline error response for invalid date in future').to.equal('Must be at least 2 minutes from now.');\n                    });\n                });\n\n                // Set the publish date into the future (best to have it 10 minutes from now in the future)\n                fillIn('input[name=\"post-setting-date\"]', plusTenMinPacific);\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('label[for=\"post-setting-date\"]').text().trim(), 'label changes to \\'Scheduled Date\\'').to.equal('Scheduled Date');\n                });\n\n                // click on 'Schedule Post'\n                click('.post-save-schedule a');\n\n                // button should show 'schedule post'\n                andThen(function () {\n                    (0, _chai.expect)(find('.post-save-schedule').hasClass('active'), 'highlights the active button state for a draft').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button to change from published to draft').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for post to schedule').to.equal('Schedule Post');\n                });\n\n                // click on schedule post and save\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    // Dropdown menu should be 'Update Post' and 'Unschedule'\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for scheduled post').to.equal('Update Post');\n                    (0, _chai.expect)(find('.post-save-schedule').hasClass('active'), 'highlights the default active button state for a scheduled post').to.be['true'];\n                    (0, _chai.expect)(find('.post-save-draft').text().trim(), 'not active option should say \\'Unschedule\\'').to.equal('Unschedule');\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'no red button expected').to.be['false'];\n                    // expect countdown to show warning, that post will be published in x minutes\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.contain('Post will be published in');\n                });\n\n                // click on 'Unschedule'\n                click('.post-save-draft a');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button to unscheduled post').to.equal('Unschedule');\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the default active button state for a scheduled post').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button expected due to status change').to.be['true'];\n                });\n\n                // click on unschedule post and save\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for a draft').to.equal('Save Draft');\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the default active button state for a draft post').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button expected due to status change').to.be['false'];\n                    // expect no countdown notification after unscheduling\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.equal('');\n                });\n            });\n\n            (0, _mocha.it)('handles validation errors when scheduling', function () {\n                var saveCount = 0;\n\n                server.put('/posts/:id/', function (db, request) {\n                    // we have three saves occurring here :-(\n                    // 1. Auto-save of draft\n                    // 2. Change of publish time\n                    // 3. Pressing the Schedule button\n                    saveCount++;\n                    if (saveCount === 3) {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                errorType: 'ValidationError',\n                                message: 'Error test'\n                            }]\n                        });\n                    } else {\n                        var id = request.params.id;\n\n                        var _JSON$parse$posts = _slicedToArray(JSON.parse(request.requestBody).posts, 1);\n\n                        var attrs = _JSON$parse$posts[0];\n\n                        delete attrs.id;\n\n                        var _post = db.posts.update(id, attrs);\n\n                        return {\n                            posts: [_post]\n                        };\n                    }\n                });\n\n                var post = server.create('post', 1);\n                var plusTenMin = moment().add(10, 'minutes').format('DD MMM YY @ HH:mm').toString();\n\n                visit('/editor/' + post.id);\n\n                fillIn('input[name=\"post-setting-date\"]', plusTenMin);\n                triggerEvent('input[name=\"post-setting-date\"]', 'blur');\n                click('.post-save-schedule a');\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-alert').length, 'number of alerts after failed schedule').to.equal(1);\n\n                    (0, _chai.expect)(find('.gh-alert').text(), 'alert text after failed schedule').to.match(/Scheduling failed: Error test/);\n                });\n            });\n\n            (0, _mocha.it)('handles title validation errors correctly', function () {\n                var post = server.createList('post', 1);\n\n                // post id 1 is a draft, checking for draft behaviour now\n                visit('/editor/1');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/1');\n                });\n\n                // Test title validation\n                fillIn('input[id=\"entry-title\"]', Array(160).join('a'));\n                triggerEvent('input[id=\"entry-title\"]', 'blur');\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-alert').length, 'number of alerts after invalid title').to.equal(1);\n\n                    (0, _chai.expect)(find('.gh-alert').text(), 'alert text after invalid title').to.match(/Title cannot be longer than 150 characters/);\n                });\n            });\n\n            (0, _mocha.it)('renders first countdown notification before scheduled time', function () {\n                /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n                var clock = _sinon['default'].useFakeTimers(moment().valueOf());\n                var post = server.create('post', { published_at: moment.utc().add(4, 'minutes'), status: 'scheduled' });\n                var compareDate = moment().tz('Etc/UTC').add(4, 'minutes').format('DD MMM YY @ HH:mm').toString();\n                var settings = server.create('setting', { activeTimezone: 'Europe/Dublin' });\n\n                visit('/editor/1');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/editor/1');\n                    (0, _chai.expect)(find('input[name=\"post-setting-date\"]').val(), 'scheduled date').to.equal(compareDate);\n                    // Dropdown menu should be 'Update Post' and 'Unschedule'\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for scheduled post').to.equal('Update Post');\n                    (0, _chai.expect)(find('.post-save-schedule').hasClass('active'), 'highlights the default active button state for a scheduled post').to.be['true'];\n                    (0, _chai.expect)(find('.post-save-draft').text().trim(), 'not active option should say \\'Unschedule\\'').to.equal('Unschedule');\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'no red button expected').to.be['false'];\n                    // expect countdown to show warning, that post will be published in x minutes\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.contain('Post will be published in');\n                });\n                clock.restore();\n            });\n\n            (0, _mocha.it)('only shows option to unschedule post 2 minutes before scheduled time', function () {\n                /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n                var clock = _sinon['default'].useFakeTimers(moment().valueOf());\n                var post = server.create('post', { published_at: moment.utc().add(2, 'minutes'), status: 'scheduled' });\n                var compareDate = moment().tz('Europe/Dublin').add(2, 'minutes').format('DD MMM YY @ HH:mm').toString();\n                var settings = server.create('setting', { activeTimezone: 'Europe/Dublin' });\n\n                visit('/editor/1');\n\n                andThen(function () {\n                    // Save button should say 'Unschedule'\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for scheduled post in status freeze mode').to.equal('Unschedule');\n                    // expect countdown to show warning, that post will be published in x minutes\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.contain('Post will be published in');\n                    // no dropdown menu\n                    (0, _chai.expect)(find('.btn.btn-sm.dropdown-toggle').hasClass('active'), 'no dropdown menu').to.be['false'];\n                });\n\n                clock.restore();\n            });\n\n            (0, _mocha.it)('lets user unschedule the post shortly before scheduled date', function () {\n                /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n                var clock = _sinon['default'].useFakeTimers(moment().valueOf());\n                var post = server.create('post', { published_at: moment.utc().add(1, 'minute'), status: 'scheduled' });\n                var compareDate = moment().tz('Europe/Dublin').add(1, 'minute').format('DD MMM YY @ HH:mm').toString();\n                var settings = server.create('setting', { activeTimezone: 'Europe/Dublin' });\n\n                visit('/editor/1');\n\n                // change some text\n                fillIn('.markdown-editor', 'Let\\'s make some markdown changes');\n\n                andThen(function () {\n                    // Save button should say 'Unschedule'\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for scheduled post in status freeze mode').to.equal('Unschedule');\n                    // expect countdown to show warning, that post will be published in x minutes\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.contain('Post will be published in');\n                    // no dropdown menu\n                    (0, _chai.expect)(find('.btn.btn-sm.dropdown-toggle').hasClass('active'), 'no dropdown menu').to.be['false'];\n                });\n\n                // click on Unschedule\n                click('.view-header .btn.btn-sm.js-publish-button');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.markdown-editor').val(), 'changed text in markdown editor').to.equal('Let\\'s make some markdown changes');\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').text().trim(), 'text in save button for a draft').to.equal('Save Draft');\n                    (0, _chai.expect)(find('.post-save-draft').hasClass('active'), 'highlights the default active button state for a draft post').to.be['true'];\n                    (0, _chai.expect)(find('.view-header .btn.btn-sm.js-publish-button').hasClass('btn-red'), 'red button expected due to status change').to.be['false'];\n                    // expect no countdown notification after unscheduling\n                    (0, _chai.expect)(find('.gh-notification.gh-notification-schedule').text().trim(), 'notification countdown').to.equal('');\n                });\n\n                clock.restore();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/ghost-desktop-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n\n    var originalAgent = window.navigator.userAgent;\n\n    var setUserAgent = function setUserAgent(userAgent) {\n        var userAgentProp = {\n            get: function get() {\n                return userAgent;\n            },\n            configurable: true\n        };\n\n        try {\n            Object.defineProperty(window.navigator, 'userAgent', userAgentProp);\n        } catch (e) {\n            window.navigator = Object.create(window.navigator, {\n                userAgent: userAgentProp\n            });\n        }\n    };\n\n    var restoreUserAgent = function restoreUserAgent() {\n        setUserAgent(originalAgent);\n    };\n\n    (0, _mocha.describe)('Acceptance: Ghost Desktop', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('update alerts for broken versions', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.afterEach)(function () {\n                restoreUserAgent();\n            });\n\n            (0, _mocha.it)('displays alert for broken version', function () {\n                setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) ghost-desktop/0.4.0 Chrome/51.0.2704.84 Electron/1.2.2 Safari/537.36');\n\n                visit('/');\n\n                andThen(function () {\n                    // has an alert with matching text\n                    (0, _chai.expect)(find('.gh-alert-yellow').length, 'number of warning alerts').to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert-yellow').text().trim(), 'alert text').to.match(/Your version of Ghost Desktop needs to be manually updated/);\n                });\n            });\n\n            (0, _mocha.it)('doesn\\'t display alert for working version', function () {\n                setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) ghost-desktop/0.5.1 Chrome/51.0.2704.84 Electron/1.2.2 Safari/537.36');\n\n                visit('/');\n\n                andThen(function () {\n                    // no alerts\n                    (0, _chai.expect)(find('.gh-alert').length, 'number of alerts').to.equal(0);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/password-reset-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp) {\n\n    (0, _mocha.describe)('Acceptance: Password Reset', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('request reset', function () {\n            (0, _mocha.it)('is successful with valid data', function () {\n                visit('/signin');\n                fillIn('input[name=\"identification\"]', 'test@example.com');\n                click('.forgotten-link');\n\n                andThen(function () {\n                    // an alert with instructions is displayed\n                    (0, _chai.expect)(find('.gh-alert-blue').length, 'alert count').to.equal(1);\n                });\n            });\n\n            (0, _mocha.it)('shows error messages with invalid data', function () {\n                visit('/signin');\n\n                // no email provided\n                click('.forgotten-link');\n\n                andThen(function () {\n                    // email field is invalid\n                    (0, _chai.expect)(find('input[name=\"identification\"]').closest('.form-group').hasClass('error'), 'email field has error class (no email)').to.be['true'];\n\n                    // password field is valid\n                    (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').hasClass('error'), 'password field has error class (no email)').to.be['false'];\n\n                    // error message shown\n                    (0, _chai.expect)(find('p.main-error').text().trim(), 'error message').to.equal('We need your email address to reset your password!');\n                });\n\n                // invalid email provided\n                fillIn('input[name=\"identification\"]', 'test');\n                click('.forgotten-link');\n\n                andThen(function () {\n                    // email field is invalid\n                    (0, _chai.expect)(find('input[name=\"identification\"]').closest('.form-group').hasClass('error'), 'email field has error class (invalid email)').to.be['true'];\n\n                    // password field is valid\n                    (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').hasClass('error'), 'password field has error class (invalid email)').to.be['false'];\n\n                    // error message\n                    (0, _chai.expect)(find('p.main-error').text().trim(), 'error message').to.equal('We need your email address to reset your password!');\n                });\n\n                // unknown email provided\n                fillIn('input[name=\"identification\"]', 'unknown@example.com');\n                click('.forgotten-link');\n\n                andThen(function () {\n                    // email field is invalid\n                    (0, _chai.expect)(find('input[name=\"identification\"]').closest('.form-group').hasClass('error'), 'email field has error class (unknown email)').to.be['true'];\n\n                    // password field is valid\n                    (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').hasClass('error'), 'password field has error class (unknown email)').to.be['false'];\n\n                    // error message\n                    (0, _chai.expect)(find('p.main-error').text().trim(), 'error message').to.equal('There is no user with that email address.');\n                });\n            });\n        });\n\n        // TODO: add tests for the change password screen\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/posts/post-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ghost-admin/tests/helpers/adapter-error', 'ember-cli-mirage'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _ghostAdminTestsHelpersAdapterError, _emberCliMirage) {\n\n    (0, _mocha.describe)('Acceptance: Posts - Post', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // load the settings fixtures\n                // TODO: this should always be run for acceptance tests\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('can visit post route', function () {\n                var posts = server.createList('post', 6);\n\n                visit('/');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.posts-list li').length, 'post list count').to.equal(6);\n\n                    // if we're in \"desktop\" size, we should redirect and highlight\n                    if (find('.content-preview:visible').length) {\n                        (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/' + posts[0].id);\n                        // expect(find('.posts-list li').first().hasClass('active'), 'highlights latest post').to.be.true;\n                        (0, _chai.expect)(find('.posts-list li:nth-child(1) .status span').first().hasClass('scheduled'), 'first post in list is a scheduled one').to.be['true'];\n                        (0, _chai.expect)(find('.posts-list li:nth-child(3) .status span').first().hasClass('draft'), 'third post in list is a draft').to.be['true'];\n                        (0, _chai.expect)(find('.posts-list li:nth-child(5) .status time').first().hasClass('published'), 'fifth post in list is a published one').to.be['true'];\n                    }\n                });\n\n                // check if we can edit the post\n                click('.post-edit');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL to editor').to.equal('/editor/1');\n                });\n\n                // TODO: test the right order of the listes posts\n                //  and fix the faker import to ensure correct ordering\n            });\n\n            (0, _mocha.it)('redirects to 404 when post does not exist', function () {\n                server.get('/posts/200/', function () {\n                    return new _emberCliMirage['default'].Response(404, { 'Content-Type': 'application/json' }, { errors: [{ message: 'Post not found.', errorType: 'NotFoundError' }] });\n                });\n\n                (0, _ghostAdminTestsHelpersAdapterError.errorOverride)();\n\n                visit('/200');\n\n                andThen(function () {\n                    (0, _ghostAdminTestsHelpersAdapterError.errorReset)();\n                    (0, _chai.expect)(currentPath()).to.equal('error404');\n                    (0, _chai.expect)(currentURL()).to.equal('/200');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost-admin/tests/acceptance/settings/apps-test', ['exports', 'mocha', 'chai', 'ember-runloop', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _emberRunloop, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n\n    (0, _mocha.describe)('Acceptance: Settings - Apps', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/apps');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/apps');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/apps');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it redirects to Slack when clicking on the grid', function () {\n                visit('/settings/apps');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/apps');\n                });\n\n                click('#slack-link');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/apps/slack');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/settings/code-injection-test', ['exports', 'mocha', 'chai', 'jquery', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _jquery, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n\n    (0, _mocha.describe)('Acceptance: Settings - Code-Injection', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/code-injection');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/code-injection');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/code-injection');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders, loads editors correctly', function () {\n                visit('/settings/code-injection');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/code-injection');\n\n                    // has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Code Injection - Test Blog');\n\n                    // highlights nav menu\n                    (0, _chai.expect)((0, _jquery['default'])('.gh-nav-settings-code-injection').hasClass('active'), 'highlights nav menu item').to.be['true'];\n\n                    (0, _chai.expect)(find('.view-header .view-actions .btn-blue').text().trim(), 'save button text').to.equal('Save');\n\n                    (0, _chai.expect)(find('#ghost-head .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n                    (0, _chai.expect)((0, _jquery['default'])('#ghost-head .CodeMirror').hasClass('cm-s-xq-light'), 'ghost head editor theme').to.be['true'];\n\n                    (0, _chai.expect)(find('#ghost-foot .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n                    (0, _chai.expect)((0, _jquery['default'])('#ghost-foot .CodeMirror').hasClass('cm-s-xq-light'), 'ghost head editor theme').to.be['true'];\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/settings/general-test', ['exports', 'mocha', 'chai', 'jquery', 'ember-runloop', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage', 'ghost-admin/mirage/config/themes'], function (exports, _mocha, _chai, _jquery, _emberRunloop, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage, _ghostAdminMirageConfigThemes) {\n\n    (0, _mocha.describe)('Acceptance: Settings - General', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/general');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/general');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/general');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders, shows image uploader modals', function () {\n                visit('/settings/general');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/general');\n\n                    // has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - Test Blog');\n\n                    // highlights nav menu\n                    (0, _chai.expect)((0, _jquery['default'])('.gh-nav-settings-general').hasClass('active'), 'highlights nav menu item').to.be['true'];\n\n                    (0, _chai.expect)(find('.view-header .view-actions .btn-blue').text().trim(), 'save button text').to.equal('Save');\n\n                    // initial postsPerPage should be 5\n                    (0, _chai.expect)(find('input#postsPerPage').val(), 'post per page value').to.equal('5');\n\n                    (0, _chai.expect)(find('input#permalinks').prop('checked'), 'date permalinks checkbox').to.be['false'];\n                });\n\n                fillIn('#settings-general input[name=\"general[title]\"]', 'New Blog Title');\n                click('.view-header .btn.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - New Blog Title');\n                });\n\n                click('.blog-logo');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content .gh-image-uploader').length, 'modal selector').to.equal(1);\n                });\n\n                click('.fullscreen-modal .modal-content .gh-image-uploader .image-cancel');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content .gh-image-uploader .description').text()).to.equal('Upload an image');\n                });\n\n                // click cancel button\n                click('.fullscreen-modal .modal-footer .btn.btn-minor');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length).to.equal(0);\n                });\n\n                click('.blog-cover');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content .gh-image-uploader').length, 'modal selector').to.equal(1);\n                });\n\n                click('.fullscreen-modal .modal-footer .js-button-accept');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length).to.equal(0);\n                });\n            });\n\n            (0, _mocha.it)('renders timezone selector correctly', function () {\n                visit('/settings/general');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/general');\n\n                    (0, _chai.expect)(find('#activeTimezone select option').length, 'available timezones').to.equal(66);\n                    (0, _chai.expect)(find('#activeTimezone option:selected').text().trim()).to.equal('(GMT) UTC');\n                    find('#activeTimezone option[value=\"Africa/Cairo\"]').prop('selected', true);\n                });\n\n                triggerEvent('#activeTimezone select', 'change');\n                click('.view-header .btn.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#activeTimezone option:selected').text().trim()).to.equal('(GMT +2:00) Cairo, Egypt');\n                });\n            });\n\n            (0, _mocha.it)('handles private blog settings correctly', function () {\n                visit('/settings/general');\n\n                // handles private blog settings correctly\n                andThen(function () {\n                    (0, _chai.expect)(find('input#isPrivate').prop('checked'), 'isPrivate checkbox').to.be['false'];\n                });\n\n                click('input#isPrivate');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('input#isPrivate').prop('checked'), 'isPrivate checkbox').to.be['true'];\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[password]\"]').length, 'password input').to.equal(1);\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[password]\"]').val(), 'password default value').to.not.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[password]\"]', '');\n                triggerEvent('#settings-general input[name=\"general[password]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('Password must be supplied');\n                });\n\n                fillIn('#settings-general input[name=\"general[password]\"]', 'asdfg');\n                triggerEvent('#settings-general input[name=\"general[password]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                // validates a facebook url correctly\n\n                andThen(function () {\n                    // loads fixtures and performs transform\n                    (0, _chai.expect)(find('input[name=\"general[facebook]\"]').val(), 'initial facebook value').to.equal('https://www.facebook.com/test');\n                });\n\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'focus');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    // regression test: we still have a value after the input is\n                    // focused and then blurred without any changes\n                    (0, _chai.expect)(find('input[name=\"general[facebook]\"]').val(), 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'facebook.com/username');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/username');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', '*(&*(%%))');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('The URL must be in a format like https://www.facebook.com/yourPage');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'http://github.com/username');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/username');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'http://github.com/pages/username');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/pages/username');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'testuser');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/testuser');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'ab99');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('Your Page name is not a valid Facebook Page name');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'page/ab99');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/page/ab99');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[facebook]\"]', 'page/*(&*(%%))');\n                triggerEvent('#settings-general input[name=\"general[facebook]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[facebook]\"]').val()).to.be.equal('https://www.facebook.com/page/*(&*(%%))');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                // validates a twitter url correctly\n\n                andThen(function () {\n                    // loads fixtures and performs transform\n                    (0, _chai.expect)(find('input[name=\"general[twitter]\"]').val(), 'initial twitter value').to.equal('https://twitter.com/test');\n                });\n\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'focus');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    // regression test: we still have a value after the input is\n                    // focused and then blurred without any changes\n                    (0, _chai.expect)(find('input[name=\"general[twitter]\"]').val(), 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n                });\n\n                fillIn('#settings-general input[name=\"general[twitter]\"]', 'twitter.com/username');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[twitter]\"]').val()).to.be.equal('https://twitter.com/username');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[twitter]\"]', '*(&*(%%))');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('The URL must be in a format like https://twitter.com/yourUsername');\n                });\n\n                fillIn('#settings-general input[name=\"general[twitter]\"]', 'http://github.com/username');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[twitter]\"]').val()).to.be.equal('https://twitter.com/username');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                fillIn('#settings-general input[name=\"general[twitter]\"]', 'thisusernamehasmorethan15characters');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('Your Username is not a valid Twitter Username');\n                });\n\n                fillIn('#settings-general input[name=\"general[twitter]\"]', 'testuser');\n                triggerEvent('#settings-general input[name=\"general[twitter]\"]', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#settings-general input[name=\"general[twitter]\"]').val()).to.be.equal('https://twitter.com/testuser');\n                    (0, _chai.expect)(find('#settings-general .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n            });\n\n            (0, _mocha.it)('allows management of themes', function () {\n                // lists available themes + active theme is highlighted\n\n                // theme upload\n                // - displays modal\n                // - validates mime type\n                // - validates casper.zip\n                // - handles validation errors\n                // - handles upload and close\n                // - handles upload and activate\n                // - displays overwrite warning if theme already exists\n\n                // theme activation\n                // - switches theme\n\n                // theme deletion\n                // - displays modal\n                // - deletes theme and refreshes list\n\n                visit('/settings/general');\n\n                // lists available themes (themes are specified in mirage/fixtures/settings)\n                andThen(function () {\n                    (0, _chai.expect)(find('.theme-list-item').length, 'shows correct number of themes').to.equal(3);\n\n                    (0, _chai.expect)(find('.theme-list-item:contains(\"Blog\")').hasClass('theme-list-item--active'), 'Blog theme marked as active');\n                });\n\n                // theme upload displays modal\n                click('a:contains(\"Upload a theme\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content:contains(\"Upload a theme\")').length, 'theme upload modal displayed after button click').to.equal(1);\n                });\n\n                // cancelling theme upload closes modal\n                click('.fullscreen-modal button:contains(\"Cancel\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length === 0, 'upload theme modal is closed when cancelling').to.be['true'];\n                });\n\n                // theme upload validates mime type\n                click('a:contains(\"Upload a theme\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { type: 'text/csv' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .failed').text(), 'validation error is shown for invalid mime type').to.match(/is not supported/);\n                });\n\n                // theme upload validates casper.zip\n                click('button:contains(\"Try Again\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'casper.zip', type: 'application/zip' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .failed').text(), 'validation error is shown when uploading casper.zip').to.match(/default Casper theme cannot be overwritten/);\n                });\n\n                // theme upload handles upload errors\n                andThen(function () {\n                    server.post('/themes/upload/', function () {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                message: 'Invalid theme'\n                            }]\n                        });\n                    });\n                });\n                click('button:contains(\"Try Again\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'error.zip', type: 'application/zip' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .failed').text().trim(), 'validation error is passed through from server').to.equal('Invalid theme');\n\n                    // reset to default mirage handlers\n                    (0, _ghostAdminMirageConfigThemes['default'])(server);\n                });\n\n                // theme upload handles validation errors\n                andThen(function () {\n                    server.post('/themes/upload/', function () {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                message: 'Theme is not compatible or contains errors.',\n                                errorType: 'ThemeValidationError',\n                                errorDetails: [{\n                                    level: 'error',\n                                    rule: 'Templates must contain valid Handlebars.',\n                                    failures: [{\n                                        ref: 'index.hbs',\n                                        message: 'The partial index_meta could not be found'\n                                    }, {\n                                        ref: 'tag.hbs',\n                                        message: 'The partial index_meta could not be found'\n                                    }]\n                                }, {\n                                    level: 'error',\n                                    rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n                                    details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.</p>',\n                                    failures: [{\n                                        ref: '/assets/javascripts/ui.js'\n                                    }]\n                                }]\n                            }]\n                        });\n                    });\n                });\n                click('button:contains(\"Try Again\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'bad-theme.zip', type: 'application/zip' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal h1').text().trim(), 'modal title after uploading invalid theme').to.equal('Invalid theme');\n\n                    (0, _chai.expect)(find('.theme-validation-errors').text(), 'top-level errors are displayed').to.match(/Templates must contain valid Handlebars/);\n\n                    (0, _chai.expect)(find('.theme-validation-errors').text(), 'top-level errors do not escape HTML').to.match(/The listed files should be included using the {{asset}} helper/);\n\n                    (0, _chai.expect)(find('.theme-validation-errors').text(), 'individual failures are displayed').to.match(/index\\.hbs: The partial index_meta could not be found/);\n\n                    // reset to default mirage handlers\n                    (0, _ghostAdminMirageConfigThemes['default'])(server);\n                });\n                click('button:contains(\"Try Again\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.theme-validation-errors').length, '\"Try Again\" resets form after theme validation error').to.equal(0);\n\n                    (0, _chai.expect)(find('.gh-image-uploader').length, '\"Try Again\" resets form after theme validation error').to.equal(1);\n\n                    (0, _chai.expect)(find('.fullscreen-modal h1').text().trim(), '\"Try Again\" resets form after theme validation error').to.equal('Upload a theme');\n                });\n\n                // theme upload handles validation warnings\n                andThen(function () {\n                    server.post('/themes/upload/', function () {\n                        return new _emberCliMirage['default'].Response(200, {}, {\n                            themes: [{\n                                name: 'blackpalm',\n                                'package': {\n                                    name: 'BlackPalm',\n                                    version: '1.0.0'\n                                },\n                                warnings: [{\n                                    level: 'warning',\n                                    rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n                                    details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.  For more information, please see the <a href=\"http://themes.ghost.org/docs/asset\">asset helper documentation</a>.</p>',\n                                    failures: [{\n                                        ref: '/assets/dist/img/apple-touch-icon.png'\n                                    }, {\n                                        ref: '/assets/dist/img/favicon.ico'\n                                    }, {\n                                        ref: '/assets/dist/css/blackpalm.min.css'\n                                    }, {\n                                        ref: '/assets/dist/js/blackpalm.min.js'\n                                    }],\n                                    code: 'GS030-ASSET-REQ'\n                                }]\n                            }]\n                        });\n                    });\n                });\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'warning-theme.zip', type: 'application/zip' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal h1').text().trim(), 'modal title after uploading theme with warnings').to.equal('Uploaded with warnings');\n\n                    (0, _chai.expect)(find('.theme-validation-errors').text(), 'top-level warnings are displayed').to.match(/The listed files should be included using the {{asset}} helper/);\n\n                    (0, _chai.expect)(find('.theme-validation-errors').text(), 'individual warning failures are displayed').to.match(/\\/assets\\/dist\\/img\\/apple-touch-icon\\.png/);\n\n                    // reset to default mirage handlers\n                    (0, _ghostAdminMirageConfigThemes['default'])(server);\n                });\n                click('button:contains(\"Close\")');\n\n                // theme upload handles success then close\n                click('a:contains(\"Upload a theme\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'theme-1.zip', type: 'application/zip' });\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal h1').text().trim(), 'modal header after successful upload').to.equal('Upload successful!');\n\n                    (0, _chai.expect)(find('.modal-body').text(), 'modal displays theme name after successful upload').to.match(/\"Test 1 - 0\\.1\" uploaded successfully/);\n\n                    (0, _chai.expect)(find('.theme-list-item').length, 'number of themes in list grows after upload').to.equal(4);\n\n                    (0, _chai.expect)(find('.theme-list-item:contains(\"Test 1 - 0.1\")').hasClass('theme-list-item--active'), 'newly uploaded theme is active').to.be['false'];\n                });\n                click('.fullscreen-modal button:contains(\"Close\")');\n\n                // theme upload handles success then activate\n                click('a:contains(\"Upload a theme\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'theme-2.zip', type: 'application/zip' });\n                click('button:contains(\"Activate Now\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.theme-list-item').length, 'number of themes in list grows after upload and activate').to.equal(5);\n\n                    (0, _chai.expect)(find('.theme-list-item:contains(\"Test 2 - 0.1\")').hasClass('theme-list-item--active'), 'newly uploaded+activated theme is active').to.be['true'];\n                });\n\n                // theme activation switches active theme\n                click('.theme-list-item:contains(\"Blog\") a:contains(\"Activate\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.theme-list-item:contains(\"Test 2 - 0.1\")').hasClass('theme-list-item--active'), 'previously active theme is not active').to.be['false'];\n\n                    (0, _chai.expect)(find('.theme-list-item:contains(\"Blog\")').hasClass('theme-list-item--active'), 'activated theme is active').to.be['true'];\n                });\n\n                // theme deletion displays modal\n                click('.theme-list-item:contains(\"Test 1\") a:contains(\"Delete\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content:contains(\"delete this theme\")').length, 'theme deletion modal displayed after button click').to.equal(1);\n                });\n\n                // cancelling theme deletion closes modal\n                click('.fullscreen-modal button:contains(\"Cancel\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length === 0, 'delete theme modal is closed when cancelling').to.be['true'];\n                });\n\n                // confirming theme deletion closes modal and refreshes list\n                click('.theme-list-item:contains(\"Test 1\") a:contains(\"Delete\")');\n                click('.fullscreen-modal button:contains(\"Delete\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length === 0, 'delete theme modal closes after deletion').to.be['true'];\n                });\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.theme-list-item').length, 'number of themes in list shrinks after delete').to.equal(4);\n\n                    (0, _chai.expect)(find('.theme-list-item .name').text(), 'correct theme is removed from theme list after deletion').to.not.match(/Test 1/);\n                });\n\n                // validation errors are handled when deleting a theme\n                andThen(function () {\n                    server.del('/themes/:theme/', function () {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                message: 'Can\\'t delete theme'\n                            }]\n                        });\n                    });\n                });\n                click('.theme-list-item:contains(\"Test 2\") a:contains(\"Delete\")');\n                click('.fullscreen-modal button:contains(\"Delete\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length === 0, 'delete theme modal closes after failed deletion').to.be['true'];\n\n                    (0, _chai.expect)(find('.gh-alert').length, 'alert is shown when deletion fails').to.equal(1);\n\n                    (0, _chai.expect)(find('.gh-alert').text(), 'failed deletion alert has correct text').to.match(/Can't delete theme/);\n\n                    // restore default mirage handlers\n                    (0, _ghostAdminMirageConfigThemes['default'])(server);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/settings/labs-test', ['exports', 'mocha', 'chai', 'jquery', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _jquery, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n\n    (0, _mocha.describe)('Acceptance: Settings - Labs', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/labs');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/labs');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/labs');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders, loads modals correctly', function () {\n                visit('/settings/labs');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/labs');\n\n                    // has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Labs - Test Blog');\n\n                    // highlights nav menu\n                    (0, _chai.expect)((0, _jquery['default'])('.gh-nav-settings-labs').hasClass('active'), 'highlights nav menu item').to.be['true'];\n                });\n\n                click('#settings-resetdb .js-delete');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content').length, 'modal element').to.equal(1);\n                });\n\n                click('.fullscreen-modal .modal-footer .btn.btn-minor');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'modal element').to.equal(0);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/settings/navigation-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Settings - Navigation', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // load the settings fixtures\n                // TODO: this should always be run for acceptance tests\n                server.loadFixtures();\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('can visit /settings/navigation', function () {\n                visit('/settings/navigation');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentPath()).to.equal('settings.navigation');\n\n                    // fixtures contain two nav items, check for three rows as we\n                    // should have one extra that's blank\n                    (0, _chai.expect)(find('.gh-blognav-item').length, 'navigation items count').to.equal(3);\n                });\n            });\n\n            (0, _mocha.it)('saves navigation settings', function () {\n                visit('/settings/navigation');\n                fillIn('.gh-blognav-label:first input', 'Test');\n                fillIn('.gh-blognav-url:first input', '/test');\n                triggerEvent('.gh-blognav-url:first input', 'blur');\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    var _server$db$settings$where = server.db.settings.where({ key: 'navigation' });\n\n                    var _server$db$settings$where2 = _slicedToArray(_server$db$settings$where, 1);\n\n                    var navSetting = _server$db$settings$where2[0];\n\n                    (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"Test\",\"url\":\"/test/\"},{\"label\":\"About\",\"url\":\"/about\"}]');\n\n                    // don't test against .error directly as it will pick up failed\n                    // tests \"pre.error\" elements\n                    (0, _chai.expect)(find('span.error').length, 'error fields count').to.equal(0);\n                    (0, _chai.expect)(find('.gh-alert').length, 'alerts count').to.equal(0);\n                    (0, _chai.expect)(find('.response:visible').length, 'validation errors count').to.equal(0);\n                });\n            });\n\n            (0, _mocha.it)('validates new item correctly on save', function () {\n                visit('/settings/navigation');\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-item').length, 'number of nav items after saving with blank new item').to.equal(3);\n                });\n\n                fillIn('.gh-blognav-label:last input', 'Test');\n                fillIn('.gh-blognav-url:last input', 'http://invalid domain/');\n                triggerEvent('.gh-blognav-url:last input', 'blur');\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-item').length, 'number of nav items after saving with invalid new item').to.equal(3);\n\n                    (0, _chai.expect)(find('.gh-blognav-item:last .error').length, 'number of invalid fields in new item').to.equal(1);\n                });\n            });\n\n            (0, _mocha.it)('clears unsaved settings when navigating away', function () {\n                visit('/settings/navigation');\n                fillIn('.gh-blognav-label:first input', 'Test');\n                triggerEvent('.gh-blognav-label:first input', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-label:first input').val()).to.equal('Test');\n                });\n\n                visit('/settings/code-injection');\n                visit('/settings/navigation');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-label:first input').val()).to.equal('Home');\n                });\n            });\n\n            (0, _mocha.it)('can add and remove items', function (done) {\n                visit('/settings/navigation');\n\n                click('.gh-blognav-add');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-label:last .response').is(':visible'), 'blank label has validation error').to.be['true'];\n                });\n\n                fillIn('.gh-blognav-label:last input', 'New');\n                triggerEvent('.gh-blognav-label:last input', 'keypress', {});\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-label:last .response').is(':visible'), 'label validation is visible after typing').to.be['false'];\n                });\n\n                fillIn('.gh-blognav-url:last input', '/new');\n                triggerEvent('.gh-blognav-url:last input', 'keypress', {});\n                triggerEvent('.gh-blognav-url:last input', 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-url:last .response').is(':visible'), 'url validation is visible after typing').to.be['false'];\n\n                    (0, _chai.expect)(find('.gh-blognav-url:last input').val()).to.equal(window.location.protocol + '//' + window.location.host + '/new/');\n                });\n\n                click('.gh-blognav-add');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-item').length, 'number of nav items after successful add').to.equal(4);\n\n                    (0, _chai.expect)(find('.gh-blognav-label:last input').val(), 'new item label value after successful add').to.be.blank;\n\n                    (0, _chai.expect)(find('.gh-blognav-url:last input').val(), 'new item url value after successful add').to.equal(window.location.protocol + '//' + window.location.host + '/');\n\n                    (0, _chai.expect)(find('.gh-blognav-item .response:visible').length, 'number or validation errors shown after successful add').to.equal(0);\n                });\n\n                click('.gh-blognav-item:first .gh-blognav-delete');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-blognav-item').length, 'number of nav items after successful remove').to.equal(3);\n                });\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    var _server$db$settings$where3 = server.db.settings.where({ key: 'navigation' });\n\n                    var _server$db$settings$where32 = _slicedToArray(_server$db$settings$where3, 1);\n\n                    var navSetting = _server$db$settings$where32[0];\n\n                    (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"About\",\"url\":\"/about\"},{\"label\":\"New\",\"url\":\"/new/\"}]');\n\n                    done();\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost-admin/tests/acceptance/settings/slack-test', ['exports', 'mocha', 'chai', 'ember-runloop', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ember-cli-mirage', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _emberRunloop, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _emberCliMirage, _ghostAdminTestsHelpersEmberSimpleAuth) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Settings - Apps - Slack', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/apps/slack');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/apps/slack');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/apps/slack');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it validates and saves a slack url properly', function () {\n                visit('/settings/apps/slack');\n\n                andThen(function () {\n                    // has correct url\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/apps/slack');\n                });\n\n                fillIn('#slack-settings input[name=\"slack[url]\"]', 'notacorrecturl');\n                click('#saveSlackIntegration');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('#slack-settings .error .response').text().trim(), 'inline validation response').to.equal('The URL must be in a format like https://hooks.slack.com/services/<your personal key>');\n                });\n\n                fillIn('#slack-settings input[name=\"slack[url]\"]', 'https://hooks.slack.com/services/1275958430');\n                click('#sendTestNotification');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.gh-alert-blue').length, 'modal element').to.equal(1);\n                    (0, _chai.expect)(find('#slack-settings .error .response').text().trim(), 'inline validation response').to.equal('');\n                });\n\n                andThen(function () {\n                    server.put('/settings/', function (db, request) {\n                        return new _emberCliMirage['default'].Response(402, {}, {\n                            errors: [{\n                                errorType: 'ValidationError',\n                                message: 'Test error'\n                            }]\n                        });\n                    });\n                });\n\n                click('.gh-alert-blue .gh-alert-close');\n                click('#sendTestNotification');\n\n                // we shouldn't try to send the test request if the save fails\n                andThen(function () {\n                    var _server$pretender$handledRequests$slice = server.pretender.handledRequests.slice(-1);\n\n                    var _server$pretender$handledRequests$slice2 = _slicedToArray(_server$pretender$handledRequests$slice, 1);\n\n                    var lastRequest = _server$pretender$handledRequests$slice2[0];\n\n                    (0, _chai.expect)(lastRequest.url).to.not.match(/\\/slack\\/test/);\n                    (0, _chai.expect)(find('.gh-alert-blue').length, 'check slack alert after api validation error').to.equal(0);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/settings/tags-test', ['exports', 'mocha', 'chai', 'jquery', 'ember-runloop', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ghost-admin/tests/helpers/adapter-error', 'ember-cli-mirage'], function (exports, _mocha, _chai, _jquery, _emberRunloop, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _ghostAdminTestsHelpersAdapterError, _emberCliMirage) {\n\n    // Grabbed from keymaster's testing code because Ember's `keyEvent` helper\n    // is for some reason not triggering the events in a way that keymaster detects:\n    // https://github.com/madrobby/keymaster/blob/master/test/keymaster.html#L31\n    var modifierMap = {\n        16: 'shiftKey',\n        18: 'altKey',\n        17: 'ctrlKey',\n        91: 'metaKey'\n    };\n    var keydown = function keydown(code, modifiers, el) {\n        var event = document.createEvent('Event');\n        event.initEvent('keydown', true, true);\n        event.keyCode = code;\n        if (modifiers && modifiers.length > 0) {\n            for (var i in modifiers) {\n                event[modifierMap[modifiers[i]]] = true;\n            }\n        }\n        (el || document).dispatchEvent(event);\n    };\n    var keyup = function keyup(code, el) {\n        var event = document.createEvent('Event');\n        event.initEvent('keyup', true, true);\n        event.keyCode = code;\n        (el || document).dispatchEvent(event);\n    };\n\n    (0, _mocha.describe)('Acceptance: Settings - Tags', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/settings/tags');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects to team page when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/settings/navigation');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                // load the settings fixtures\n                // TODO: this should always be run for acceptance tests\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders, can be navigated, can edit, create & delete tags', function () {\n                var tag1 = server.create('tag');\n                var tag2 = server.create('tag');\n\n                visit('/settings/tags');\n\n                andThen(function () {\n                    // it redirects to first tag\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Tags - Test Blog');\n\n                    // it highlights nav menu\n                    (0, _chai.expect)((0, _jquery['default'])('.gh-nav-settings-tags').hasClass('active'), 'highlights nav menu item').to.be['true'];\n\n                    // it lists all tags\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count').to.equal(2);\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:first .tag-title').text(), 'tag list item title').to.equal(tag1.name);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/' + tag1.slug + '\"]').hasClass('active'), 'highlights selected tag').to.be['true'];\n\n                    // it shows selected tag form\n                    (0, _chai.expect)(find('.tag-settings-pane h4').text(), 'settings pane title').to.equal('Tag Settings');\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal(tag1.name);\n                });\n\n                // click the second tag in the list\n                click('.tag-edit-button:last');\n\n                andThen(function () {\n                    // it navigates to selected tag\n                    (0, _chai.expect)(currentURL(), 'url after clicking tag').to.equal('/settings/tags/' + tag2.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/' + tag2.slug + '\"]').hasClass('active'), 'highlights selected tag').to.be['true'];\n\n                    // it shows selected tag form\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal(tag2.name);\n                });\n\n                andThen(function () {\n                    // simulate up arrow press\n                    (0, _emberRunloop['default'])(function () {\n                        keydown(38);\n                        keyup(38);\n                    });\n                });\n\n                andThen(function () {\n                    // it navigates to previous tag\n                    (0, _chai.expect)(currentURL(), 'url after keyboard up arrow').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/' + tag1.slug + '\"]').hasClass('active'), 'selects previous tag').to.be['true'];\n                });\n\n                andThen(function () {\n                    // simulate down arrow press\n                    (0, _emberRunloop['default'])(function () {\n                        keydown(40);\n                        keyup(40);\n                    });\n                });\n\n                andThen(function () {\n                    // it navigates to previous tag\n                    (0, _chai.expect)(currentURL(), 'url after keyboard down arrow').to.equal('/settings/tags/' + tag2.slug);\n\n                    // it highlights selected tag\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/' + tag2.slug + '\"]').hasClass('active'), 'selects next tag').to.be['true'];\n                });\n\n                // trigger save\n                fillIn('.tag-settings-pane input[name=\"name\"]', 'New Name');\n                triggerEvent('.tag-settings-pane input[name=\"name\"]', 'blur');\n                andThen(function () {\n                    // check we update with the data returned from the server\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:last .tag-title').text(), 'tag list updates on save').to.equal('New Name');\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'settings form updates on save').to.equal('New Name');\n                });\n\n                // start new tag\n                click('.view-actions .btn-green');\n\n                andThen(function () {\n                    // it navigates to the new tag route\n                    (0, _chai.expect)(currentURL(), 'new tag URL').to.equal('/settings/tags/new');\n\n                    // it displays the new tag form\n                    (0, _chai.expect)(find('.tag-settings-pane h4').text(), 'settings pane title').to.equal('New Tag');\n\n                    // all fields start blank\n                    find('.tag-settings-pane input, .tag-settings-pane textarea').each(function () {\n                        (0, _chai.expect)((0, _jquery['default'])(this).val(), 'input field for ' + (0, _jquery['default'])(this).attr('name')).to.be.blank;\n                    });\n                });\n\n                // save new tag\n                fillIn('.tag-settings-pane input[name=\"name\"]', 'New Tag');\n                triggerEvent('.tag-settings-pane input[name=\"name\"]', 'blur');\n\n                andThen(function () {\n                    // it redirects to the new tag's URL\n                    (0, _chai.expect)(currentURL(), 'URL after tag creation').to.equal('/settings/tags/new-tag');\n\n                    // it adds the tag to the list and selects\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after creation').to.equal(3);\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:last .tag-title').text(), 'new tag list item title').to.equal('New Tag');\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/new-tag\"]').hasClass('active'), 'highlights new tag').to.be['true'];\n                });\n\n                // delete tag\n                click('.tag-delete-button');\n                click('.fullscreen-modal .btn-red');\n\n                andThen(function () {\n                    // it redirects to the first tag\n                    (0, _chai.expect)(currentURL(), 'URL after tag deletion').to.equal('/settings/tags/' + tag1.slug);\n\n                    // it removes the tag from the list\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after deletion').to.equal(2);\n                });\n            });\n\n            (0, _mocha.it)('loads tag via slug when accessed directly', function () {\n                server.createList('tag', 2);\n\n                visit('/settings/tags/tag-1');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'URL after direct load').to.equal('/settings/tags/tag-1');\n\n                    // it loads all other tags\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count after direct load').to.equal(2);\n\n                    // selects tag in list\n                    (0, _chai.expect)(find('a[href=\"/ghost/settings/tags/tag-1\"]').hasClass('active'), 'highlights requested tag').to.be['true'];\n\n                    // shows requested tag in settings pane\n                    (0, _chai.expect)(find('.tag-settings-pane input[name=\"name\"]').val(), 'loads correct tag into form').to.equal('Tag 1');\n                });\n            });\n\n            (0, _mocha.it)('has infinite scroll pagination of tags list', function () {\n                server.createList('tag', 32);\n\n                visit('settings/tags/tag-0');\n\n                andThen(function () {\n                    // it loads first page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on first load').to.equal(15);\n\n                    find('.tag-list').scrollTop(find('.tag-list-content').height());\n                });\n\n                triggerEvent('.tag-list', 'scroll');\n\n                andThen(function () {\n                    // it loads the second page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on second load').to.equal(30);\n\n                    find('.tag-list').scrollTop(find('.tag-list-content').height());\n                });\n\n                triggerEvent('.tag-list', 'scroll');\n\n                andThen(function () {\n                    // it loads the final page\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count on third load').to.equal(32);\n                });\n            });\n\n            (0, _mocha.it)('shows the internal tag label', function () {\n                server.create('tag', { name: '#internal-tag', slug: 'hash-internal-tag', visibility: 'internal' });\n\n                visit('settings/tags/');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL()).to.equal('/settings/tags/hash-internal-tag');\n\n                    (0, _chai.expect)(find('.settings-tags .settings-tag').length, 'tag list count').to.equal(1);\n\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:first .label.label-blue').length, 'internal tag label').to.equal(1);\n\n                    (0, _chai.expect)(find('.settings-tags .settings-tag:first .label.label-blue').text().trim(), 'internal tag label text').to.equal('internal');\n                });\n            });\n\n            (0, _mocha.it)('redirects to 404 when tag does not exist', function () {\n                server.get('/tags/slug/unknown/', function () {\n                    return new _emberCliMirage['default'].Response(404, { 'Content-Type': 'application/json' }, { errors: [{ message: 'Tag not found.', errorType: 'NotFoundError' }] });\n                });\n\n                (0, _ghostAdminTestsHelpersAdapterError.errorOverride)();\n\n                visit('settings/tags/unknown');\n\n                andThen(function () {\n                    (0, _ghostAdminTestsHelpersAdapterError.errorReset)();\n                    (0, _chai.expect)(currentPath()).to.equal('error404');\n                    (0, _chai.expect)(currentURL()).to.equal('/settings/tags/unknown');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost-admin/tests/acceptance/setup-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Setup', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects if already authenticated', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n\n            visit('/setup/one');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n\n            visit('/setup/two');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n\n            visit('/setup/three');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n            });\n        });\n\n        (0, _mocha.it)('redirects to signin if already set up', function () {\n            // mimick an already setup blog\n            server.get('/authentication/setup/', function () {\n                return {\n                    setup: [{ status: true }]\n                };\n            });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n\n            visit('/setup');\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.describe)('with a new blog', function () {\n            (0, _mocha.beforeEach)(function () {\n                // mimick a new blog\n                server.get('/authentication/setup/', function () {\n                    return {\n                        setup: [{ status: false }]\n                    };\n                });\n            });\n\n            (0, _mocha.it)('has a successful happy path', function () {\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                visit('/setup');\n\n                andThen(function () {\n                    // it redirects to step one\n                    (0, _chai.expect)(currentURL(), 'url after accessing /setup').to.equal('/setup/one');\n\n                    // it highlights first step\n                    (0, _chai.expect)(find('.gh-flow-nav .step:first-of-type').hasClass('active')).to.be['true'];\n                    (0, _chai.expect)(find('.gh-flow-nav .step:nth-of-type(2)').hasClass('active')).to.be['false'];\n                    (0, _chai.expect)(find('.gh-flow-nav .step:nth-of-type(3)').hasClass('active')).to.be['false'];\n\n                    // it displays download count (count increments for each ajax call\n                    // and polling is disabled in testing so our count should be \"2\" -\n                    // 1 for first load and 1 for first poll)\n                    (0, _chai.expect)(find('.gh-flow-content em').text()).to.equal('2');\n                });\n\n                click('.btn-green');\n\n                andThen(function () {\n                    // it transitions to step two\n                    (0, _chai.expect)(currentURL(), 'url after clicking \"Create your account\"').to.equal('/setup/two');\n\n                    // email field is focused by default\n                    // NOTE: $('x').is(':focus') doesn't work in phantomjs CLI runner\n                    // https://github.com/ariya/phantomjs/issues/10427\n                    (0, _chai.expect)(find('[name=\"email\"]').get(0) === document.activeElement, 'email field has focus').to.be['true'];\n                });\n\n                click('.btn-green');\n\n                andThen(function () {\n                    // it marks fields as invalid\n                    (0, _chai.expect)(find('.form-group.error').length, 'number of invalid fields').to.equal(4);\n\n                    // it displays error messages\n                    (0, _chai.expect)(find('.error .response').length, 'number of in-line validation messages').to.equal(4);\n\n                    // it displays main error\n                    (0, _chai.expect)(find('.main-error').length, 'main error is displayed').to.equal(1);\n                });\n\n                // enter valid details and submit\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n                click('.btn-green');\n\n                andThen(function () {\n                    // it transitions to step 3\n                    (0, _chai.expect)(currentURL(), 'url after submitting step two').to.equal('/setup/three');\n\n                    // submit button is \"disabled\"\n                    (0, _chai.expect)(find('button[type=\"submit\"]').hasClass('btn-green'), 'invite button with no emails is white').to.be['false'];\n                });\n\n                // fill in a valid email\n                fillIn('[name=\"users\"]', 'new-user@example.com');\n\n                andThen(function () {\n                    // submit button is \"enabled\"\n                    (0, _chai.expect)(find('button[type=\"submit\"]').hasClass('btn-green'), 'invite button is green with valid email address').to.be['true'];\n                });\n\n                // submit the invite form\n                click('button[type=\"submit\"]');\n\n                andThen(function () {\n                    // it redirects to the home / \"content\" screen\n                    (0, _chai.expect)(currentURL(), 'url after submitting invites').to.equal('/');\n\n                    // it displays success alert\n                    (0, _chai.expect)(find('.gh-alert-green').length, 'number of success alerts').to.equal(1);\n                });\n            });\n\n            (0, _mocha.it)('handles validation errors in step 2', function () {\n                var postCount = 0;\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                server.post('/authentication/setup', function () {\n                    postCount++;\n\n                    // validation error\n                    if (postCount === 1) {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                errorType: 'ValidationError',\n                                message: 'Server response message'\n                            }]\n                        });\n                    }\n\n                    // server error\n                    if (postCount === 2) {\n                        return new _emberCliMirage['default'].Response(500, {}, null);\n                    }\n                });\n\n                visit('/setup/two');\n                click('.btn-green');\n\n                andThen(function () {\n                    // non-server validation\n                    (0, _chai.expect)(find('.main-error').text().trim(), 'error text').to.not.be.blank;\n                });\n\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n\n                // first post - simulated validation error\n                click('.btn-green');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.main-error').text().trim(), 'error text').to.equal('Server response message');\n                });\n\n                // second post - simulated server error\n                click('.btn-green');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.main-error').text().trim(), 'error text').to.be.blank;\n\n                    (0, _chai.expect)(find('.gh-alert-red').length, 'number of alerts').to.equal(1);\n                });\n            });\n\n            (0, _mocha.it)('handles invalid origin error on step 2', function () {\n                // mimick the API response for an invalid origin\n                server.post('/authentication/token', function () {\n                    return new _emberCliMirage['default'].Response(401, {}, {\n                        errors: [{\n                            errorType: 'UnauthorizedError',\n                            message: 'Access Denied from url: unknown.com. Please use the url configured in config.js.'\n                        }]\n                    });\n                });\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                visit('/setup/two');\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n                click('.btn-green');\n\n                andThen(function () {\n                    // button should not be spinning\n                    (0, _chai.expect)(find('.btn-green .spinner').length, 'button has spinner').to.equal(0);\n                    // we should show an error message\n                    (0, _chai.expect)(find('.main-error').text(), 'error text').to.equal('Access Denied from url: unknown.com. Please use the url configured in config.js.');\n                });\n            });\n\n            (0, _mocha.it)('handles validation errors in step 3', function () {\n                var input = '[name=\"users\"]';\n                var postCount = 0;\n                var button = undefined,\n                    formGroup = undefined,\n                    user = undefined;\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n                server.loadFixtures('roles');\n\n                server.post('/users', function (db, request) {\n                    var _JSON$parse$users = _slicedToArray(JSON.parse(request.requestBody).users, 1);\n\n                    var params = _JSON$parse$users[0];\n\n                    postCount++;\n\n                    // invalid\n                    if (postCount === 1) {\n                        return new _emberCliMirage['default'].Response(422, {}, {\n                            errors: [{\n                                errorType: 'ValidationError',\n                                message: 'Dummy validation error'\n                            }]\n                        });\n                    }\n\n                    // valid\n                    user = db.users.insert(params);\n                    return {\n                        users: [user]\n                    };\n                });\n\n                // complete step 2 so we can access step 3\n                visit('/setup/two');\n                fillIn('[name=\"email\"]', 'test@example.com');\n                fillIn('[name=\"name\"]', 'Test User');\n                fillIn('[name=\"password\"]', 'password');\n                fillIn('[name=\"blog-title\"]', 'Blog Title');\n                click('.btn-green');\n\n                // default field/button state\n                andThen(function () {\n                    formGroup = find('.gh-flow-invite .form-group');\n                    button = find('.gh-flow-invite button[type=\"submit\"]');\n\n                    (0, _chai.expect)(formGroup.hasClass('error'), 'default field has error class').to.be['false'];\n\n                    (0, _chai.expect)(button.text().trim(), 'default button text').to.equal('Invite some users');\n\n                    (0, _chai.expect)(button.hasClass('btn-minor'), 'default button is disabled').to.be['true'];\n                });\n\n                // no users submitted state\n                click('.gh-flow-invite button[type=\"submit\"]');\n\n                andThen(function () {\n                    (0, _chai.expect)(formGroup.hasClass('error'), 'no users submitted field has error class').to.be['true'];\n\n                    (0, _chai.expect)(button.text().trim(), 'no users submitted button text').to.equal('No users to invite');\n\n                    (0, _chai.expect)(button.hasClass('btn-minor'), 'no users submitted button is disabled').to.be['true'];\n                });\n\n                // single invalid email\n                fillIn(input, 'invalid email');\n                triggerEvent(input, 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(formGroup.hasClass('error'), 'invalid field has error class').to.be['true'];\n\n                    (0, _chai.expect)(button.text().trim(), 'single invalid button text').to.equal('1 invalid email address');\n\n                    (0, _chai.expect)(button.hasClass('btn-minor'), 'invalid email button is disabled').to.be['true'];\n                });\n\n                // multiple invalid emails\n                fillIn(input, 'invalid email\\nanother invalid address');\n                triggerEvent(input, 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(button.text().trim(), 'multiple invalid button text').to.equal('2 invalid email addresses');\n                });\n\n                // single valid email\n                fillIn(input, 'invited@example.com');\n                triggerEvent(input, 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(formGroup.hasClass('error'), 'valid field has error class').to.be['false'];\n\n                    (0, _chai.expect)(button.text().trim(), 'single valid button text').to.equal('Invite 1 user');\n\n                    (0, _chai.expect)(button.hasClass('btn-green'), 'valid email button is enabled').to.be['true'];\n                });\n\n                // multiple valid emails\n                fillIn(input, 'invited1@example.com\\ninvited2@example.com');\n                triggerEvent(input, 'blur');\n\n                andThen(function () {\n                    (0, _chai.expect)(button.text().trim(), 'multiple valid button text').to.equal('Invite 2 users');\n                });\n\n                // submit invitations with simulated failure on 1 invite\n                click('.btn-green');\n\n                andThen(function () {\n                    // it redirects to the home / \"content\" screen\n                    (0, _chai.expect)(currentURL(), 'url after submitting invites').to.equal('/');\n\n                    // it displays success alert\n                    (0, _chai.expect)(find('.gh-alert-green').length, 'number of success alerts').to.equal(1);\n\n                    // it displays failure alert\n                    (0, _chai.expect)(find('.gh-alert-red').length, 'number of failure alerts').to.equal(1);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/signin-test', ['exports', 'mocha', 'chai', 'jquery', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage'], function (exports, _mocha, _chai, _jquery, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage) {\n\n    (0, _mocha.describe)('Acceptance: Signin', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects if already authenticated', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n\n            visit('/signin');\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'current url').to.equal('/');\n            });\n        });\n\n        (0, _mocha.describe)('when attempting to signin', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n                server.post('/authentication/token', function (db, request) {\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n\n                    var _$$deparam = _jquery['default'].deparam(request.requestBody);\n\n                    var grantType = _$$deparam.grant_type;\n                    var username = _$$deparam.username;\n                    var password = _$$deparam.password;\n                    var clientId = _$$deparam.client_id;\n\n                    (0, _chai.expect)(grantType, 'grant type').to.equal('password');\n                    (0, _chai.expect)(username, 'username').to.equal('test@example.com');\n                    (0, _chai.expect)(clientId, 'client id').to.equal('ghost-admin');\n\n                    if (password === 'testpass') {\n                        return {\n                            access_token: '5JhTdKI7PpoZv4ROsFoERc6wCHALKFH5jxozwOOAErmUzWrFNARuH1q01TYTKeZkPW7FmV5MJ2fU00pg9sm4jtH3Z1LjCf8D6nNqLYCfFb2YEKyuvG7zHj4jZqSYVodN2YTCkcHv6k8oJ54QXzNTLIDMlCevkOebm5OjxGiJpafMxncm043q9u1QhdU9eee3zouGRMVVp8zkKVoo5zlGMi3zvS2XDpx7xsfk8hKHpUgd7EDDQxmMueifWv7hv6n',\n                            expires_in: 3600,\n                            refresh_token: 'XP13eDjwV5mxOcrq1jkIY9idhdvN3R1Br5vxYpYIub2P5Hdc8pdWMOGmwFyoUshiEB62JWHTl8H1kACJR18Z8aMXbnk5orG28br2kmVgtVZKqOSoiiWrQoeKTqrRV0t7ua8uY5HdDUaKpnYKyOdpagsSPn3WEj8op4vHctGL3svOWOjZhq6F2XeVPMR7YsbiwBE8fjT3VhTB3KRlBtWZd1rE0Qo2EtSplWyjGKv1liAEiL0ndQoLeeSOCH4rTP7',\n                            token_type: 'Bearer'\n                        };\n                    } else {\n                        return new _emberCliMirage['default'].Response(401, {}, {\n                            errors: [{\n                                errorType: 'UnauthorizedError',\n                                message: 'Invalid Password'\n                            }]\n                        });\n                    }\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                });\n            });\n\n            (0, _mocha.it)('errors correctly', function () {\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n\n                visit('/signin');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'signin url').to.equal('/signin');\n\n                    (0, _chai.expect)(find('input[name=\"identification\"]').length, 'email input field').to.equal(1);\n                    (0, _chai.expect)(find('input[name=\"password\"]').length, 'password input field').to.equal(1);\n                });\n\n                click('.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(find('.form-group.error').length, 'number of invalid fields').to.equal(2);\n\n                    (0, _chai.expect)(find('.main-error').length, 'main error is displayed').to.equal(1);\n                });\n\n                fillIn('[name=\"identification\"]', 'test@example.com');\n                fillIn('[name=\"password\"]', 'invalid');\n                click('.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'current url').to.equal('/signin');\n\n                    (0, _chai.expect)(find('.main-error').length, 'main error is displayed').to.equal(1);\n\n                    (0, _chai.expect)(find('.main-error').text().trim(), 'main error text').to.equal('Invalid Password');\n                });\n            });\n\n            (0, _mocha.it)('submits successfully', function () {\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n\n                visit('/signin');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'current url').to.equal('/signin');\n                });\n\n                fillIn('[name=\"identification\"]', 'test@example.com');\n                fillIn('[name=\"password\"]', 'testpass');\n                click('.btn-blue');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/signup-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'jquery'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _jquery) {\n\n    (0, _mocha.describe)('Acceptance: Signup', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n\n            server.loadFixtures();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('can signup successfully', function () {\n            // token details:\n            // \"1470346017929|kevin+test2@ghost.org|2cDnQc3g7fQTj9nNK4iGPSGfvomkLdXf68FuWgS66Ug=\"\n            visit('/signup/MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n\n            andThen(function () {\n                (0, _chai.expect)(currentPath()).to.equal('signup');\n\n                // email address should be pre-filled and disabled\n                (0, _chai.expect)(find('input[name=\"email\"]').val(), 'email field value').to.equal('kevin+test2@ghost.org');\n\n                (0, _chai.expect)(find('input[name=\"email\"]').is(':disabled'), 'email field is disabled').to.be['true'];\n            });\n\n            // focus out in Name field triggers inline error\n            triggerEvent('input[name=\"name\"]', 'blur');\n\n            andThen(function () {\n                (0, _chai.expect)(find('input[name=\"name\"]').closest('.form-group').hasClass('error'), 'name field group has error class when empty').to.be['true'];\n\n                (0, _chai.expect)(find('input[name=\"name\"]').closest('.form-group').find('.response').text().trim(), 'name inline-error text').to.match(/Please enter a name/);\n            });\n\n            // entering text in Name field clears error\n            fillIn('input[name=\"name\"]', 'Test User');\n            triggerEvent('input[name=\"name\"]', 'blur');\n\n            andThen(function () {\n                (0, _chai.expect)(find('input[name=\"name\"]').closest('.form-group').hasClass('error'), 'name field loses error class after text input').to.be['false'];\n\n                (0, _chai.expect)(find('input[name=\"name\"]').closest('.form-group').find('.response').text().trim(), 'name field error is removed after text input').to.equal('');\n            });\n\n            // focus out in Name field triggers inline error\n            triggerEvent('input[name=\"password\"]', 'blur');\n\n            andThen(function () {\n                (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').hasClass('error'), 'password field group has error class when empty').to.be['true'];\n\n                (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').find('.response').text().trim(), 'password field error text').to.match(/must be at least 8 characters/);\n            });\n\n            // entering valid text in Password field clears error\n            fillIn('input[name=\"password\"]', 'ValidPassword');\n            triggerEvent('input[name=\"password\"]', 'blur');\n\n            andThen(function () {\n                (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').hasClass('error'), 'password field loses error class after text input').to.be['false'];\n\n                (0, _chai.expect)(find('input[name=\"password\"]').closest('.form-group').find('.response').text().trim(), 'password field error is removed after text input').to.equal('');\n            });\n\n            // submitting sends correct details and redirects to content screen\n            click('.btn-green');\n\n            server.get('/authentication/invitation', function (db, request) {\n                return {\n                    invitation: [{ valid: true }]\n                };\n            });\n\n            server.post('/authentication/invitation/', function (db, request) {\n                var params = _jquery['default'].deparam(request.requestBody);\n                (0, _chai.expect)(params.invitation[0].name).to.equal('Test User');\n                (0, _chai.expect)(params.invitation[0].email).to.equal('kevin+test2@ghost.org');\n                (0, _chai.expect)(params.invitation[0].password).to.equal('ValidPassword');\n                (0, _chai.expect)(params.invitation[0].token).to.equal('MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n\n                // ensure that `/users/me/` request returns a user\n                server.create('user', { email: 'kevin@test2@ghost.org' });\n\n                return {\n                    invitation: [{\n                        message: 'Invitation accepted.'\n                    }]\n                };\n            });\n\n            andThen(function () {\n                (0, _chai.expect)(currentPath()).to.equal('posts.index');\n            });\n        });\n\n        (0, _mocha.it)('redirects if already logged in');\n        (0, _mocha.it)('redirects with alert on invalid token');\n        (0, _mocha.it)('redirects with alert on non-existant or expired token');\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/subscribers-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Subscribers', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/subscribers');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects editors to posts', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role] });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/subscribers');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n                (0, _chai.expect)(find('.gh-nav-main a:contains(\"Subscribers\")').length, 'sidebar link is visible').to.equal(0);\n            });\n        });\n\n        (0, _mocha.it)('redirects authors to posts', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role] });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/subscribers');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/');\n                (0, _chai.expect)(find('.gh-nav-main a:contains(\"Subscribers\")').length, 'sidebar link is visible').to.equal(0);\n            });\n        });\n\n        (0, _mocha.describe)('an admin', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('can manage subscribers', function () {\n                server.createList('subscriber', 40);\n\n                (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n                visit('/');\n                click('.gh-nav-main a:contains(\"Subscribers\")');\n\n                andThen(function () {\n                    // it navigates to the correct page\n                    (0, _chai.expect)(currentPath()).to.equal('subscribers.index');\n\n                    // it has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Subscribers - Test Blog');\n\n                    // it loads the first page\n                    (0, _chai.expect)(find('.subscribers-table .lt-body .lt-row').length, 'number of subscriber rows').to.equal(30);\n\n                    // it shows the total number of subscribers\n                    (0, _chai.expect)(find('#total-subscribers').text().trim(), 'displayed subscribers total').to.equal('40');\n\n                    // it defaults to sorting by created_at desc\n\n                    var _server$pretender$handledRequests$slice = server.pretender.handledRequests.slice(-1);\n\n                    var _server$pretender$handledRequests$slice2 = _slicedToArray(_server$pretender$handledRequests$slice, 1);\n\n                    var lastRequest = _server$pretender$handledRequests$slice2[0];\n\n                    (0, _chai.expect)(lastRequest.queryParams.order).to.equal('created_at desc');\n\n                    var createdAtHeader = find('.subscribers-table th:contains(\"Subscription Date\")');\n                    (0, _chai.expect)(createdAtHeader.hasClass('is-sorted'), 'createdAt column is sorted').to.be['true'];\n                    (0, _chai.expect)(createdAtHeader.find('.icon-descending').length, 'createdAt column has descending icon').to.equal(1);\n                });\n\n                // click the column to re-order\n                click('th:contains(\"Subscription Date\")');\n\n                andThen(function () {\n                    // it flips the directions and re-fetches\n\n                    var _server$pretender$handledRequests$slice3 = server.pretender.handledRequests.slice(-1);\n\n                    var _server$pretender$handledRequests$slice32 = _slicedToArray(_server$pretender$handledRequests$slice3, 1);\n\n                    var lastRequest = _server$pretender$handledRequests$slice32[0];\n\n                    (0, _chai.expect)(lastRequest.queryParams.order).to.equal('created_at asc');\n\n                    var createdAtHeader = find('.subscribers-table th:contains(\"Subscription Date\")');\n                    (0, _chai.expect)(createdAtHeader.find('.icon-ascending').length, 'createdAt column has ascending icon').to.equal(1);\n\n                    // scroll to the bottom of the table to simulate infinite scroll\n                    find('.subscribers-table').scrollTop(find('.subscribers-table .ember-light-table').height());\n                });\n\n                // trigger infinite scroll\n                triggerEvent('.subscribers-table', 'scroll');\n\n                andThen(function () {\n                    // it loads the next page\n                    (0, _chai.expect)(find('.subscribers-table .lt-body .lt-row').length, 'number of subscriber rows after infinite-scroll').to.equal(40);\n                });\n\n                // click the add subscriber button\n                click('.btn:contains(\"Add Subscriber\")');\n\n                andThen(function () {\n                    // it displays the add subscriber modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'add subscriber modal displayed').to.equal(1);\n                });\n\n                // cancel the modal\n                click('.fullscreen-modal .btn:contains(\"Cancel\")');\n\n                andThen(function () {\n                    // it closes the add subscriber modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'add subscriber modal displayed after cancel').to.equal(0);\n                });\n\n                // save a new subscriber\n                click('.btn:contains(\"Add Subscriber\")');\n                fillIn('.fullscreen-modal input[name=\"email\"]', 'test@example.com');\n                click('.fullscreen-modal .btn:contains(\"Add\")');\n\n                andThen(function () {\n                    // the add subscriber modal is closed\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'add subscriber modal displayed after save').to.equal(0);\n\n                    // the subscriber is added to the table\n                    (0, _chai.expect)(find('.subscribers-table .lt-body .lt-row:first-of-type .lt-cell:first-of-type').text().trim(), 'first email in list after addition').to.equal('test@example.com');\n\n                    // the table is scrolled to the top\n                    // TODO: implement scroll to new record after addition\n                    // expect(find('.subscribers-table').scrollTop(), 'scroll position after addition')\n                    //     .to.equal(0);\n\n                    // the subscriber total is updated\n                    (0, _chai.expect)(find('#total-subscribers').text().trim(), 'subscribers total after addition').to.equal('41');\n                });\n\n                // saving a duplicate subscriber\n                click('.btn:contains(\"Add Subscriber\")');\n                fillIn('.fullscreen-modal input[name=\"email\"]', 'test@example.com');\n                click('.fullscreen-modal .btn:contains(\"Add\")');\n\n                andThen(function () {\n                    // the validation error is displayed\n                    (0, _chai.expect)(find('.fullscreen-modal .error .response').text().trim(), 'duplicate email validation').to.equal('Email already exists.');\n\n                    // the subscriber is not added to the table\n                    (0, _chai.expect)(find('.lt-cell:contains(test@example.com)').length, 'number of \"test@example.com rows\"').to.equal(1);\n\n                    // the subscriber total is unchanged\n                    (0, _chai.expect)(find('#total-subscribers').text().trim(), 'subscribers total after failed add').to.equal('41');\n                });\n\n                // deleting a subscriber\n                click('.fullscreen-modal .btn:contains(\"Cancel\")');\n                click('.subscribers-table tbody tr:first-of-type button:last-of-type');\n\n                andThen(function () {\n                    // it displays the delete subscriber modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'delete subscriber modal displayed').to.equal(1);\n                });\n\n                // cancel the modal\n                click('.fullscreen-modal .btn:contains(\"Cancel\")');\n\n                andThen(function () {\n                    // return pauseTest();\n                    // it closes the add subscriber modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'delete subscriber modal displayed after cancel').to.equal(0);\n                });\n\n                click('.subscribers-table tbody tr:first-of-type button:last-of-type');\n                click('.fullscreen-modal .btn:contains(\"Delete\")');\n\n                andThen(function () {\n                    // the add subscriber modal is closed\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'delete subscriber modal displayed after confirm').to.equal(0);\n\n                    // the subscriber is removed from the table\n                    (0, _chai.expect)(find('.subscribers-table .lt-body .lt-row:first-of-type .lt-cell:first-of-type').text().trim(), 'first email in list after addition').to.not.equal('test@example.com');\n\n                    // the subscriber total is updated\n                    (0, _chai.expect)(find('#total-subscribers').text().trim(), 'subscribers total after addition').to.equal('40');\n                });\n\n                // click the import subscribers button\n                click('.btn:contains(\"Import CSV\")');\n\n                andThen(function () {\n                    // it displays the import subscribers modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'import subscribers modal displayed').to.equal(1);\n                    (0, _chai.expect)(find('.fullscreen-modal input[type=\"file\"]').length, 'import modal contains file input').to.equal(1);\n                });\n\n                // cancel the modal\n                click('.fullscreen-modal .btn:contains(\"Cancel\")');\n\n                andThen(function () {\n                    // it closes the import subscribers modal\n                    (0, _chai.expect)(find('.fullscreen-modal').length, 'import subscribers modal displayed after cancel').to.equal(0);\n                });\n\n                click('.btn:contains(\"Import CSV\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'test.csv' });\n\n                andThen(function () {\n                    // modal title changes\n                    (0, _chai.expect)(find('.fullscreen-modal h1').text().trim(), 'import modal title after import').to.equal('Import Successful');\n\n                    // modal button changes\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-footer button').text().trim(), 'import modal button text after import').to.equal('Close');\n\n                    // subscriber total is updated\n                    (0, _chai.expect)(find('#total-subscribers').text().trim(), 'subscribers total after import').to.equal('90');\n\n                    // table is reset\n\n                    var _server$pretender$handledRequests$slice4 = server.pretender.handledRequests.slice(-1);\n\n                    var _server$pretender$handledRequests$slice42 = _slicedToArray(_server$pretender$handledRequests$slice4, 1);\n\n                    var lastRequest = _server$pretender$handledRequests$slice42[0];\n\n                    (0, _chai.expect)(lastRequest.url, 'endpoint requested after import').to.match(/\\/subscribers\\/\\?/);\n                    (0, _chai.expect)(lastRequest.queryParams.page, 'page requested after import').to.equal('1');\n\n                    (0, _chai.expect)(find('.subscribers-table .lt-body .lt-row').length, 'number of rows in table after import').to.equal(30);\n                });\n\n                // close modal\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/team-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ghost-admin/tests/helpers/adapter-error', 'ember-cli-mirage', 'jquery'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _ghostAdminTestsHelpersAdapterError, _emberCliMirage, _jquery) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _mocha.describe)('Acceptance: Team', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.it)('redirects to signin when not authenticated', function () {\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.invalidateSession)(application);\n            visit('/team');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL()).to.equal('/signin');\n            });\n        });\n\n        (0, _mocha.it)('redirects correctly when authenticated as author', function () {\n            var role = server.create('role', { name: 'Author' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            server.create('user', { slug: 'no-access' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/team/no-access');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-user');\n            });\n        });\n\n        (0, _mocha.it)('redirects correctly when authenticated as editor', function () {\n            var role = server.create('role', { name: 'Editor' });\n            var user = server.create('user', { roles: [role], slug: 'test-user' });\n\n            server.create('user', { slug: 'no-access' });\n\n            (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            visit('/team/no-access');\n\n            andThen(function () {\n                (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n            });\n        });\n\n        (0, _mocha.describe)('when logged in', function () {\n            var admin = undefined;\n\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                admin = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('it renders and navigates correctly', function () {\n                var user1 = server.create('user');\n                var user2 = server.create('user');\n\n                visit('/team');\n\n                andThen(function () {\n                    // doesn't do any redirecting\n                    (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n\n                    // it has correct page title\n                    (0, _chai.expect)(document.title, 'page title').to.equal('Team - Test Blog');\n\n                    // it shows 3 users in list (includes currently logged in user)\n                    (0, _chai.expect)(find('.user-list .user-list-item').length, 'user list count').to.equal(3);\n\n                    click('.user-list-item:last');\n\n                    andThen(function () {\n                        // url is correct\n                        (0, _chai.expect)(currentURL(), 'url after clicking user').to.equal('/team/' + user2.slug);\n\n                        // title is correct\n                        (0, _chai.expect)(document.title, 'title after clicking user').to.equal('Team - User - Test Blog');\n\n                        // view title should exist and be linkable and active\n                        (0, _chai.expect)(find('.view-title a[href=\"/ghost/team\"]').hasClass('active'), 'has linkable url back to team main page').to.be['true'];\n                    });\n\n                    click('.view-title a');\n\n                    andThen(function () {\n                        // url should be /team again\n                        (0, _chai.expect)(currentURL(), 'url after clicking back').to.equal('/team');\n                    });\n                });\n            });\n\n            (0, _mocha.describe)('invite new user', function () {\n                var emailInputField = '.fullscreen-modal input[name=\"email\"]';\n\n                // @TODO: Evaluate after the modal PR goes in\n                (0, _mocha.it)('modal loads correctly', function () {\n                    visit('/team');\n\n                    andThen(function () {\n                        // url is correct\n                        (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team');\n\n                        // invite user button exists\n                        (0, _chai.expect)(find('.view-actions .btn-green').html(), 'invite people button text').to.equal('Invite People');\n                    });\n\n                    click('.view-actions .btn-green');\n\n                    andThen(function () {\n                        var roleOptions = find('#new-user-role select option');\n\n                        function checkOwnerExists() {\n                            for (var i in roleOptions) {\n                                if (roleOptions[i].tagName === 'option' && roleOptions[i].text === 'Owner') {\n                                    return true;\n                                }\n                            }\n                            return false;\n                        }\n\n                        function checkSelectedIsAuthor() {\n                            for (var i in roleOptions) {\n                                if (roleOptions[i].selected) {\n                                    return roleOptions[i].text === 'Author';\n                                }\n                            }\n                            return false;\n                        }\n\n                        // should be 3 available roles\n                        (0, _chai.expect)(roleOptions.length, 'number of available roles').to.equal(3);\n\n                        (0, _chai.expect)(checkOwnerExists(), 'owner role isn\\'t available').to.be['false'];\n                        (0, _chai.expect)(checkSelectedIsAuthor(), 'author role is selected initially').to.be['true'];\n                    });\n                });\n\n                (0, _mocha.it)('sends an invite correctly', function () {\n                    visit('/team');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item').length, 'number of invited users').to.equal(0);\n                    });\n\n                    click('.view-actions .btn-green');\n                    click(emailInputField);\n                    triggerEvent(emailInputField, 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.modal-body .form-group:first').hasClass('error'), 'email input has error status').to.be['true'];\n                        (0, _chai.expect)(find('.modal-body .form-group:first .response').text()).to.contain('Please enter an email.');\n                    });\n\n                    fillIn(emailInputField, 'test@example.com');\n                    click('.fullscreen-modal .btn-green');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item').length, 'number of invited users').to.equal(1);\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item:first .name').text(), 'name of invited user').to.equal('test@example.com');\n                    });\n\n                    click('.user-list.invited-users .user-list-item:first .user-list-item-aside .user-list-action:contains(\"Revoke\")');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item').length, 'number of invited users').to.equal(0);\n                    });\n                });\n\n                (0, _mocha.it)('fails sending an invite correctly', function () {\n                    server.create('user', { email: 'test1@example.com' });\n                    server.create('user', { email: 'test2@example.com', status: 'invited' });\n\n                    visit('/team');\n\n                    // check our users lists are what we expect\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item').length, 'number of invited users').to.equal(1);\n                        // number of active users is 2 because of the logged-in user\n                        (0, _chai.expect)(find('.user-list.active-users .user-list-item').length, 'number of active users').to.equal(2);\n                    });\n\n                    // click the \"invite new user\" button to open the modal\n                    click('.view-actions .btn-green');\n\n                    // fill in and submit the invite user modal with an existing user\n                    fillIn(emailInputField, 'test1@example.com');\n                    click('.fullscreen-modal .btn-green');\n\n                    andThen(function () {\n                        // check the inline-validation\n                        (0, _chai.expect)(find('.fullscreen-modal .error .response').text().trim(), 'inviting existing user error').to.equal('A user with that email address already exists.');\n                    });\n\n                    // fill in and submit the invite user modal with an invited user\n                    fillIn(emailInputField, 'test2@example.com');\n                    click('.fullscreen-modal .btn-green');\n\n                    andThen(function () {\n                        // check the inline-validation\n                        (0, _chai.expect)(find('.fullscreen-modal .error .response').text().trim(), 'inviting invited user error').to.equal('A user with that email address was already invited.');\n\n                        // ensure that there's been no change in our user lists\n                        (0, _chai.expect)(find('.user-list.invited-users .user-list-item').length, 'number of invited users after failed invites').to.equal(1);\n                        (0, _chai.expect)(find('.user-list.active-users .user-list-item').length, 'number of active users after failed invites').to.equal(2);\n                    });\n                });\n            });\n\n            (0, _mocha.it)('can delete users', function () {\n                /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n                var user1 = server.create('user');\n                var user2 = server.create('user');\n                var post1 = server.create('post', { author_id: user2.id });\n                /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n\n                visit('/team');\n                click('a.user-list-item:contains(\"' + user1.name + '\")');\n\n                // user deletion displays modal\n                click('button.delete');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content:contains(\"delete this user\")').length, 'user deletion modal displayed after button click').to.equal(1);\n\n                    // user has no posts so no warning about post deletion\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content:contains(\"is the author of\")').length, 'deleting user with no posts has no post count').to.equal(0);\n                });\n\n                // cancelling user deletion closes modal\n                click('.fullscreen-modal button:contains(\"Cancel\")');\n                andThen(function () {\n                    (0, _chai.expect)(find('.fullscreen-modal').length === 0, 'delete user modal is closed when cancelling').to.be['true'];\n                });\n\n                // deleting a user with posts\n                visit('/team');\n                click('a.user-list-item:contains(\"' + user2.name + '\")');\n\n                click('button.delete');\n                andThen(function () {\n                    // user has  posts so should warn about post deletion\n                    (0, _chai.expect)(find('.fullscreen-modal .modal-content:contains(\"is the author of 1 post\")').length, 'deleting user with posts has post count').to.equal(1);\n                });\n\n                click('.fullscreen-modal button:contains(\"Delete\")');\n                andThen(function () {\n                    // redirected to team page\n                    (0, _chai.expect)(currentURL()).to.equal('/team');\n\n                    // deleted user is not in list\n                    (0, _chai.expect)(find('.user-list-item .name:contains(\"' + user2.name + '\")').length, 'deleted user is not in user list after deletion').to.equal(0);\n                });\n            });\n\n            (0, _mocha.describe)('existing user', function () {\n                var user = undefined;\n\n                (0, _mocha.beforeEach)(function () {\n                    user = server.create('user', {\n                        slug: 'test-1',\n                        name: 'Test User',\n                        facebook: 'test',\n                        twitter: '@test'\n                    });\n\n                    server.loadFixtures();\n                });\n\n                (0, _mocha.it)('input fields reset and validate correctly', function () {\n                    // test user name\n                    visit('/team/test-1');\n\n                    andThen(function () {\n                        (0, _chai.expect)(currentURL(), 'currentURL').to.equal('/team/test-1');\n                        (0, _chai.expect)(find('.user-details-top .first-form-group input.user-name').val(), 'current user name').to.equal('Test User');\n                    });\n\n                    // test empty user name\n                    fillIn('.user-details-top .first-form-group input.user-name', '');\n                    triggerEvent('.user-details-top .first-form-group input.user-name', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-top .first-form-group').hasClass('error'), 'username input is in error state with blank input').to.be['true'];\n                    });\n\n                    // test too long user name\n                    fillIn('.user-details-top .first-form-group input.user-name', new Array(160).join('a'));\n                    triggerEvent('.user-details-top .first-form-group input.user-name', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-top .first-form-group').hasClass('error'), 'username input is in error state with too long input').to.be['true'];\n                    });\n\n                    // reset name field\n                    fillIn('.user-details-top .first-form-group input.user-name', 'Test User');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-bottom input[name=\"user\"]').val(), 'slug value is default').to.equal('test-1');\n                    });\n\n                    fillIn('.user-details-bottom input[name=\"user\"]', '');\n                    triggerEvent('.user-details-bottom input[name=\"user\"]', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-bottom input[name=\"user\"]').val(), 'slug value is reset to original upon empty string').to.equal('test-1');\n                    });\n\n                    fillIn('.user-details-bottom input[name=\"user\"]', 'white space');\n                    triggerEvent('.user-details-bottom input[name=\"user\"]', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-bottom input[name=\"user\"]').val(), 'slug value is correctly dasherized').to.equal('white-space');\n                    });\n\n                    fillIn('.user-details-bottom input[name=\"email\"]', 'thisisnotanemail');\n                    triggerEvent('.user-details-bottom input[name=\"email\"]', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('.user-details-bottom .form-group:nth-of-type(2)').hasClass('error'), 'email input should be in error state with invalid email').to.be['true'];\n                    });\n\n                    fillIn('.user-details-bottom input[name=\"email\"]', 'test@example.com');\n                    fillIn('#user-location', new Array(160).join('a'));\n                    triggerEvent('#user-location', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-location').closest('.form-group').hasClass('error'), 'location input should be in error state').to.be['true'];\n                    });\n\n                    fillIn('#user-location', '');\n                    fillIn('#user-website', 'thisisntawebsite');\n                    triggerEvent('#user-website', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-website').closest('.form-group').hasClass('error'), 'website input should be in error state').to.be['true'];\n                    });\n\n                    // Testing Facebook input\n\n                    andThen(function () {\n                        // displays initial value\n                        (0, _chai.expect)(find('#user-facebook').val(), 'initial facebook value').to.equal('https://www.facebook.com/test');\n                    });\n\n                    triggerEvent('#user-facebook', 'focus');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        // regression test: we still have a value after the input is\n                        // focused and then blurred without any changes\n                        (0, _chai.expect)(find('#user-facebook').val(), 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', ')(*&%^%)');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['true'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'pages/)(*&%^%)');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').val()).to.be.equal('https://www.facebook.com/pages/)(*&%^%)');\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'testing');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').val()).to.be.equal('https://www.facebook.com/testing');\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'somewebsite.com/pages/some-facebook-page/857469375913?ref=ts');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').val()).to.be.equal('https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'test');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['true'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'http://twitter.com/testuser');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').val()).to.be.equal('https://www.facebook.com/testuser');\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-facebook', '');\n                    fillIn('#user-facebook', 'facebook.com/testing');\n                    triggerEvent('#user-facebook', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-facebook').val()).to.be.equal('https://www.facebook.com/testing');\n                        (0, _chai.expect)(find('#user-facebook').closest('.form-group').hasClass('error'), 'facebook input should be in error state').to.be['false'];\n                    });\n\n                    // Testing Twitter input\n\n                    andThen(function () {\n                        // loads fixtures and performs transform\n                        (0, _chai.expect)(find('#user-twitter').val(), 'initial twitter value').to.equal('https://twitter.com/test');\n                    });\n\n                    triggerEvent('#user-twitter', 'focus');\n                    triggerEvent('#user-twitter', 'blur');\n\n                    andThen(function () {\n                        // regression test: we still have a value after the input is\n                        // focused and then blurred without any changes\n                        (0, _chai.expect)(find('#user-twitter').val(), 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n                    });\n\n                    fillIn('#user-twitter', '');\n                    fillIn('#user-twitter', ')(*&%^%)');\n                    triggerEvent('#user-twitter', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-twitter').closest('.form-group').hasClass('error'), 'twitter input should be in error state').to.be['true'];\n                    });\n\n                    fillIn('#user-twitter', '');\n                    fillIn('#user-twitter', 'name');\n                    triggerEvent('#user-twitter', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-twitter').val()).to.be.equal('https://twitter.com/name');\n                        (0, _chai.expect)(find('#user-twitter').closest('.form-group').hasClass('error'), 'twitter input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-twitter', '');\n                    fillIn('#user-twitter', 'http://github.com/user');\n                    triggerEvent('#user-twitter', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-twitter').val()).to.be.equal('https://twitter.com/user');\n                        (0, _chai.expect)(find('#user-twitter').closest('.form-group').hasClass('error'), 'twitter input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-twitter', '');\n                    fillIn('#user-twitter', 'twitter.com/user');\n                    triggerEvent('#user-twitter', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-twitter').val()).to.be.equal('https://twitter.com/user');\n                        (0, _chai.expect)(find('#user-twitter').closest('.form-group').hasClass('error'), 'twitter input should be in error state').to.be['false'];\n                    });\n\n                    fillIn('#user-website', '');\n                    fillIn('#user-bio', new Array(210).join('a'));\n                    triggerEvent('#user-bio', 'blur');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-bio').closest('.form-group').hasClass('error'), 'bio input should be in error state').to.be['true'];\n                    });\n\n                    // password reset ------\n\n                    // button triggers validation\n                    click('.button-change-password');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-password-new').closest('.form-group').hasClass('error'), 'new password has error class when blank').to.be['true'];\n\n                        (0, _chai.expect)(find('#user-password-new').siblings('.response').text(), 'new password error when blank').to.match(/can't be blank/);\n                    });\n\n                    // typing in inputs clears validation\n                    fillIn('#user-password-new', 'password');\n                    triggerEvent('#user-password-new', 'input');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-password-new').closest('.form-group').hasClass('error'), 'password validation is visible after typing').to.be['false'];\n                    });\n\n                    // enter key triggers action\n                    keyEvent('#user-password-new', 'keyup', 13);\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-new-password-verification').closest('.form-group').hasClass('error'), 'confirm password has error class when it doesn\\'t match').to.be['true'];\n\n                        (0, _chai.expect)(find('#user-new-password-verification').siblings('.response').text(), 'confirm password error when it doesn\\'t match').to.match(/do not match/);\n                    });\n\n                    // submits with correct details\n                    fillIn('#user-new-password-verification', 'password');\n                    click('.button-change-password');\n\n                    andThen(function () {\n                        // hits the endpoint\n\n                        var _server$pretender$handledRequests$slice = server.pretender.handledRequests.slice(-1);\n\n                        var _server$pretender$handledRequests$slice2 = _slicedToArray(_server$pretender$handledRequests$slice, 1);\n\n                        var lastRequest = _server$pretender$handledRequests$slice2[0];\n\n                        var params = _jquery['default'].deparam(lastRequest.requestBody);\n\n                        (0, _chai.expect)(lastRequest.url, 'password request URL').to.match(/\\/users\\/password/);\n\n                        /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n                        (0, _chai.expect)(params.password[0].user_id).to.equal(user.id.toString());\n                        (0, _chai.expect)(params.password[0].newPassword).to.equal('password');\n                        (0, _chai.expect)(params.password[0].ne2Password).to.equal('password');\n                        /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */\n\n                        // clears the fields\n                        (0, _chai.expect)(find('#user-password-new').val(), 'password field after submit').to.be.blank;\n\n                        (0, _chai.expect)(find('#user-new-password-verification').val(), 'password verification field after submit').to.be.blank;\n\n                        // displays a notification\n                        (0, _chai.expect)(find('.gh-notifications .gh-notification').length, 'password saved notification is displayed').to.equal(1);\n                    });\n                });\n            });\n\n            (0, _mocha.describe)('own user', function () {\n                (0, _mocha.beforeEach)(function () {\n                    server.loadFixtures();\n                });\n\n                (0, _mocha.it)('requires current password when changing password', function () {\n                    visit('/team/' + admin.slug);\n\n                    // test the \"old password\" field is validated\n                    click('.button-change-password');\n\n                    andThen(function () {\n                        // old password has error\n                        (0, _chai.expect)(find('#user-password-old').closest('.form-group').hasClass('error'), 'old password has error class when blank').to.be['true'];\n\n                        (0, _chai.expect)(find('#user-password-old').siblings('.response').text(), 'old password error when blank').to.match(/is required/);\n\n                        // new password has error\n                        (0, _chai.expect)(find('#user-password-new').closest('.form-group').hasClass('error'), 'new password has error class when blank').to.be['true'];\n\n                        (0, _chai.expect)(find('#user-password-new').siblings('.response').text(), 'new password error when blank').to.match(/can't be blank/);\n                    });\n\n                    // validation is cleared when typing\n                    fillIn('#user-password-old', 'password');\n                    triggerEvent('#user-password-old', 'input');\n\n                    andThen(function () {\n                        (0, _chai.expect)(find('#user-password-old').closest('.form-group').hasClass('error'), 'old password validation is in error state after typing').to.be['false'];\n                    });\n                });\n            });\n\n            (0, _mocha.it)('redirects to 404 when user does not exist', function () {\n                server.get('/users/slug/unknown/', function () {\n                    return new _emberCliMirage['default'].Response(404, { 'Content-Type': 'application/json' }, { errors: [{ message: 'User not found.', errorType: 'NotFoundError' }] });\n                });\n\n                (0, _ghostAdminTestsHelpersAdapterError.errorOverride)();\n\n                visit('/team/unknown');\n\n                andThen(function () {\n                    (0, _ghostAdminTestsHelpersAdapterError.errorReset)();\n                    (0, _chai.expect)(currentPath()).to.equal('error404');\n                    (0, _chai.expect)(currentURL()).to.equal('/team/unknown');\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/acceptance/version-mismatch-test', ['exports', 'mocha', 'chai', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app', 'ghost-admin/tests/helpers/ember-simple-auth', 'ember-cli-mirage'], function (exports, _mocha, _chai, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp, _ghostAdminTestsHelpersEmberSimpleAuth, _emberCliMirage) {\n\n    var versionMismatchResponse = function versionMismatchResponse() {\n        return new _emberCliMirage['default'].Response(400, {}, {\n            errors: [{\n                errorType: 'VersionMismatchError',\n                statusCode: 400\n            }]\n        });\n    };\n\n    (0, _mocha.describe)('Acceptance: Version Mismatch', function () {\n        var application = undefined;\n\n        (0, _mocha.beforeEach)(function () {\n            application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n        });\n\n        (0, _mocha.afterEach)(function () {\n            (0, _ghostAdminTestsHelpersDestroyApp['default'])(application);\n        });\n\n        (0, _mocha.describe)('logged in', function () {\n            (0, _mocha.beforeEach)(function () {\n                var role = server.create('role', { name: 'Administrator' });\n                var user = server.create('user', { roles: [role] });\n\n                server.loadFixtures();\n\n                return (0, _ghostAdminTestsHelpersEmberSimpleAuth.authenticateSession)(application);\n            });\n\n            (0, _mocha.it)('displays an alert and disables navigation when saving', function () {\n                server.createList('post', 3);\n\n                // mock the post save endpoint to return version mismatch\n                server.put('/posts/:id', versionMismatchResponse);\n\n                visit('/');\n                click('.posts-list li:nth-of-type(2) a'); // select second post\n                click('.post-edit'); // preview edit button\n                click('.js-publish-button'); // \"Save post\"\n\n                andThen(function () {\n                    // has the refresh to update alert\n                    (0, _chai.expect)(find('.gh-alert').length).to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert').text()).to.match(/refresh/);\n                });\n\n                // try navigating back to the content list\n                click('.gh-nav-main-content');\n\n                andThen(function () {\n                    (0, _chai.expect)(currentPath()).to.equal('editor.edit');\n                });\n            });\n\n            (0, _mocha.it)('displays alert and aborts the transition when navigating', function () {\n                // mock the tags endpoint to return version mismatch\n                server.get('/tags/', versionMismatchResponse);\n\n                visit('/');\n                click('.gh-nav-settings-tags');\n\n                andThen(function () {\n                    // navigation is blocked\n                    (0, _chai.expect)(currentPath()).to.equal('posts.index');\n\n                    // has the refresh to update alert\n                    (0, _chai.expect)(find('.gh-alert').length).to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert').text()).to.match(/refresh/);\n                });\n            });\n\n            (0, _mocha.it)('displays alert and aborts the transition when an ember-ajax error is thrown whilst navigating', function () {\n                server.get('/configuration/timezones/', versionMismatchResponse);\n\n                visit('/settings/tags');\n                click('.gh-nav-settings-general');\n\n                andThen(function () {\n                    // navigation is blocked\n                    (0, _chai.expect)(currentPath()).to.equal('settings.tags.index');\n\n                    // has the refresh to update alert\n                    (0, _chai.expect)(find('.gh-alert').length).to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert').text()).to.match(/refresh/);\n                });\n            });\n\n            (0, _mocha.it)('can be triggered when passed in to a component', function () {\n                server.post('/subscribers/csv/', versionMismatchResponse);\n\n                visit('/subscribers');\n                click('.btn:contains(\"Import CSV\")');\n                fileUpload('.fullscreen-modal input[type=\"file\"]', ['test'], { name: 'test.csv' });\n\n                andThen(function () {\n                    // alert is shown\n                    (0, _chai.expect)(find('.gh-alert').length).to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert').text()).to.match(/refresh/);\n                });\n            });\n        });\n\n        (0, _mocha.describe)('logged out', function () {\n            (0, _mocha.it)('displays alert', function () {\n                server.post('/authentication/token', versionMismatchResponse);\n\n                visit('/signin');\n                fillIn('[name=\"identification\"]', 'test@example.com');\n                fillIn('[name=\"password\"]', 'password');\n                click('.btn-blue');\n\n                andThen(function () {\n                    // has the refresh to update alert\n                    (0, _chai.expect)(find('.gh-alert').length).to.equal(1);\n                    (0, _chai.expect)(find('.gh-alert').text()).to.match(/refresh/);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/helpers/adapter-error', ['exports', 'ember', 'ember-test'], function (exports, _ember, _emberTest) {\n    exports.errorOverride = errorOverride;\n    exports.errorReset = errorReset;\n\n    // This is needed for testing error responses in acceptance tests\n    // See http://williamsbdev.com/posts/testing-rsvp-errors-handled-globally/\n\n    // ember-cli-shims doesn't export Logger\n    var Logger = _ember['default'].Logger;\n\n    var originalException = undefined;\n    var originalLoggerError = undefined;\n\n    function errorOverride() {\n        originalException = _emberTest['default'].adapter.exception;\n        originalLoggerError = Logger.error;\n        _emberTest['default'].adapter.exception = function () {};\n        Logger.error = function () {};\n    }\n\n    function errorReset() {\n        _emberTest['default'].adapter.exception = originalException;\n        Logger.error = originalLoggerError;\n    }\n});","define('ghost-admin/tests/helpers/destroy-app', ['exports', 'ember-runloop'], function (exports, _emberRunloop) {\n    exports['default'] = destroyApp;\n\n    function destroyApp(application) {\n        (0, _emberRunloop['default'])(application, 'destroy');\n    }\n});","define('ghost-admin/tests/helpers/ember-basic-dropdown', ['exports'], function (exports) {\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(event);\n    });\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchEndEvent);\n    });\n  }\n});","define('ghost-admin/tests/helpers/ember-power-select', ['exports', 'ember'], function (exports, _ember) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = $($(selector).get(0)); // Only interact with the first result\n    $selector.val(text);\n    var event = document.createEvent('Events');\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = _ember['default'].$(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    _ember['default'].run(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    _ember['default'].run(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    _ember['default'].run(function () {\n      typeText('.ember-power-select-search-input, .ember-power-select-search input, .ember-power-select-trigger-multiple-input, input[type=\"search\"]', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = _ember['default'].$(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    _ember['default'].run(function () {\n      return target.dispatchEvent(event);\n    });\n    _ember['default'].run(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    var isEmberOne = _ember['default'].VERSION.match(/1\\.13/);\n\n    _ember['default'].Test.registerAsyncHelper('selectChoose', function (app, cssPath, value) {\n      var match = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/\\d+$/);\n      var id = match[0];\n      // If the dropdown is closed, open it\n      if (_ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = $('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-option:contains(\"' + value + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length > 1) {\n          target = _ember['default'].A(potentialTargets).find(function (t) {\n            return t.textContent.trim() === value;\n          }) || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _ember['default'].Test.registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').replace(/\\D/g, '');\n      var isMultipleSelect = _ember['default'].$(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = _ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n      var isDefaultSingleSelect = _ember['default'].$('.ember-power-select-search-input').length > 0;\n\n      if (isMultipleSelect) {\n        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);\n        if (isEmberOne) {\n          triggerEvent(cssPath + ' .ember-power-select-trigger-multiple-input', 'input');\n        }\n      } else if (isDefaultSingleSelect) {\n        fillIn('.ember-power-select-search-input', value);\n        if (isEmberOne) {\n          triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search-input', 'input');\n        }\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          fillIn(cssPath + ' .ember-power-select-trigger input[type=search]', value);\n          if (isEmberOne) {\n            triggerEvent(cssPath + ' .ember-power-select-trigger input[type=search]', 'input');\n          }\n        } else {\n          fillIn('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search-input[type=search]', 'input');\n          if (isEmberOne) {\n            triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search-input[type=search]', 'input');\n          }\n        }\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('ghost-admin/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('ghost-admin/tests/helpers/ember-sortable/test-helpers', ['exports', 'ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function (exports, _emberSortableHelpersDrag, _emberSortableHelpersReorder) {});","define('ghost-admin/tests/helpers/file-upload', ['exports', 'jquery', 'ember-test'], function (exports, _jquery, _emberTest) {\n    exports.createFile = createFile;\n    exports.fileUpload = fileUpload;\n\n    function createFile() {\n        var content = arguments.length <= 0 || arguments[0] === undefined ? ['test'] : arguments[0];\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n        var name = options.name;\n        var type = options.type;\n\n        var file = new Blob(content, { type: type ? type : 'text/plain' });\n        file.name = name ? name : 'test.txt';\n\n        return file;\n    }\n\n    function fileUpload($element, content, options) {\n        var file = createFile(content, options);\n        var event = _jquery['default'].Event('change', {\n            testingFiles: [file]\n        });\n\n        $element.trigger(event);\n    }\n\n    exports['default'] = _emberTest['default'].registerAsyncHelper('fileUpload', function (app, selector, content, options) {\n        var file = createFile(content, options);\n\n        return triggerEvent(selector, 'change', { foor: 'bar', testingFiles: [file] });\n    });\n});\n/* global Blob */","define('ghost-admin/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'rsvp', 'ghost-admin/tests/helpers/start-app', 'ghost-admin/tests/helpers/destroy-app'], function (exports, _qunit, _rsvp, _ghostAdminTestsHelpersStartApp, _ghostAdminTestsHelpersDestroyApp) {\n    var Promise = _rsvp['default'].Promise;\n\n    exports['default'] = function (name) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        (0, _qunit.module)(name, {\n            beforeEach: function beforeEach() {\n                this.application = (0, _ghostAdminTestsHelpersStartApp['default'])();\n\n                if (options.beforeEach) {\n                    return options.beforeEach.apply(options, arguments);\n                }\n            },\n\n            afterEach: function afterEach() {\n                var _this = this;\n\n                var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n                return Promise.resolve(afterEach).then(function () {\n                    return (0, _ghostAdminTestsHelpersDestroyApp['default'])(_this.application);\n                });\n            }\n        });\n    };\n});\n/* jscs:disable */","define('ghost-admin/tests/helpers/resolver', ['exports', 'ghost-admin/resolver', 'ghost-admin/config/environment'], function (exports, _ghostAdminResolver, _ghostAdminConfigEnvironment) {\n\n    var resolver = _ghostAdminResolver['default'].create();\n\n    resolver.namespace = {\n        modulePrefix: _ghostAdminConfigEnvironment['default'].modulePrefix,\n        podModulePrefix: _ghostAdminConfigEnvironment['default'].podModulePrefix\n    };\n\n    exports['default'] = resolver;\n});","define('ghost-admin/tests/helpers/start-app', ['exports', 'ember-platform', 'ember-runloop', 'ghost-admin/app', 'ghost-admin/config/environment', 'ghost-admin/tests/helpers/file-upload'], function (exports, _emberPlatform, _emberRunloop, _ghostAdminApp, _ghostAdminConfigEnvironment, _ghostAdminTestsHelpersFileUpload) {\n    exports['default'] = startApp;\n\n    function startApp(attrs) {\n        var attributes = (0, _emberPlatform.assign)({}, _ghostAdminConfigEnvironment['default'].APP);\n        var application = undefined;\n\n        // use defaults, but you can override;\n        attributes = (0, _emberPlatform.assign)(attributes, attrs);\n\n        (0, _emberRunloop['default'])(function () {\n            application = _ghostAdminApp['default'].create(attributes);\n            application.setupForTesting();\n            application.injectTestHelpers();\n        });\n\n        return application;\n    }\n});","define('ghost-admin/tests/integration/adapters/tag-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    (0, _emberMocha.describeModule)('adapter:tag', 'Integration: Adapter: tag', {\n        integration: true\n    }, function () {\n        var server = undefined,\n            store = undefined;\n\n        beforeEach(function () {\n            store = this.container.lookup('service:store');\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads tags from regular endpoint when all are fetched', function (done) {\n            server.get('/ghost/api/v0.1/tags/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ tags: [{\n                        id: 1,\n                        name: 'Tag 1',\n                        slug: 'tag-1'\n                    }, {\n                        id: 2,\n                        name: 'Tag 2',\n                        slug: 'tag-2'\n                    }] })];\n            });\n\n            store.findAll('tag', { reload: true }).then(function (tags) {\n                (0, _chai.expect)(tags).to.be.ok;\n                (0, _chai.expect)(tags.objectAtContent(0).get('name')).to.equal('Tag 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('loads tag from slug endpoint when single tag is queried and slug is passed in', function (done) {\n            server.get('/ghost/api/v0.1/tags/slug/tag-1/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ tags: [{\n                        id: 1,\n                        slug: 'tag-1',\n                        name: 'Tag 1'\n                    }] })];\n            });\n\n            store.queryRecord('tag', { slug: 'tag-1' }).then(function (tag) {\n                (0, _chai.expect)(tag).to.be.ok;\n                (0, _chai.expect)(tag.get('name')).to.equal('Tag 1');\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/adapters/user-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    (0, _emberMocha.describeModule)('adapter:user', 'Integration: Adapter: user', {\n        integration: true\n    }, function () {\n        var server = undefined,\n            store = undefined;\n\n        beforeEach(function () {\n            store = this.container.lookup('service:store');\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads users from regular endpoint when all are fetched', function (done) {\n            server.get('/ghost/api/v0.1/users/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        name: 'User 1',\n                        slug: 'user-1'\n                    }, {\n                        id: 2,\n                        name: 'User 2',\n                        slug: 'user-2'\n                    }] })];\n            });\n\n            store.findAll('user', { reload: true }).then(function (users) {\n                (0, _chai.expect)(users).to.be.ok;\n                (0, _chai.expect)(users.objectAtContent(0).get('name')).to.equal('User 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('loads user from slug endpoint when single user is queried and slug is passed in', function (done) {\n            server.get('/ghost/api/v0.1/users/slug/user-1/', function () {\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        slug: 'user-1',\n                        name: 'User 1'\n                    }] })];\n            });\n\n            store.queryRecord('user', { slug: 'user-1' }).then(function (user) {\n                (0, _chai.expect)(user).to.be.ok;\n                (0, _chai.expect)(user.get('name')).to.equal('User 1');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles \"include\" parameter when querying single user via slug', function (done) {\n            server.get('/ghost/api/v0.1/users/slug/user-1/', function (request) {\n                var params = request.queryParams;\n                (0, _chai.expect)(params.include, 'include query').to.equal('roles,count.posts');\n\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ users: [{\n                        id: 1,\n                        slug: 'user-1',\n                        name: 'User 1',\n                        count: {\n                            posts: 5\n                        }\n                    }] })];\n            });\n\n            store.queryRecord('user', { slug: 'user-1', include: 'count.posts' }).then(function (user) {\n                (0, _chai.expect)(user).to.be.ok;\n                (0, _chai.expect)(user.get('name')).to.equal('User 1');\n                (0, _chai.expect)(user.get('count.posts')).to.equal(5);\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-alert-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-alert', 'Integration: Component: gh-alert', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 28\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alert', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 19], [1, 26]]]]], [], []]], ['loc', [null, [1, 0], [1, 28]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('article.gh-alert')).to.have.length(1);\n            var $alert = this.$('.gh-alert');\n\n            (0, _chai.expect)($alert.text()).to.match(/Test message/);\n        });\n\n        (0, _emberMocha.it)('maps message types to CSS classes', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 28\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alert', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 19], [1, 26]]]]], [], []]], ['loc', [null, [1, 0], [1, 28]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $alert = this.$('.gh-alert');\n\n            this.set('message.type', 'success');\n            (0, _chai.expect)($alert.hasClass('gh-alert-green'), 'success class isn\\'t green').to.be['true'];\n\n            this.set('message.type', 'error');\n            (0, _chai.expect)($alert.hasClass('gh-alert-red'), 'success class isn\\'t red').to.be['true'];\n\n            this.set('message.type', 'warn');\n            (0, _chai.expect)($alert.hasClass('gh-alert-yellow'), 'success class isn\\'t yellow').to.be['true'];\n\n            this.set('message.type', 'info');\n            (0, _chai.expect)($alert.hasClass('gh-alert-blue'), 'success class isn\\'t blue').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-alerts-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'ember-service', 'ember-array/utils'], function (exports, _chai, _emberMocha, _emberRunloop, _emberService, _emberArrayUtils) {\n\n    var notificationsStub = _emberService['default'].extend({\n        alerts: (0, _emberArrayUtils.A)()\n    });\n\n    (0, _emberMocha.describeComponent)('gh-alerts', 'Integration: Component: gh-alerts', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('notifications', { as: 'notifications' });\n\n            this.set('notifications.alerts', [{ message: 'First', type: 'error' }, { message: 'Second', type: 'warn' }]);\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 13\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-alerts', ['loc', [null, [1, 0], [1, 13]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-alerts').length).to.equal(1);\n            (0, _chai.expect)(this.$('.gh-alerts').children().length).to.equal(2);\n\n            this.set('notifications.alerts', (0, _emberArrayUtils.A)());\n            (0, _chai.expect)(this.$('.gh-alerts').children().length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('triggers \"notify\" action when message count changes', function () {\n            var expectedCount = 0;\n\n            // test double for notify action\n            this.set('notify', function (count) {\n                return (0, _chai.expect)(count).to.equal(expectedCount);\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 36\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-alerts', [], ['notify', ['subexpr', 'action', [['get', 'notify', ['loc', [null, [1, 27], [1, 33]]]]], [], ['loc', [null, [1, 19], [1, 34]]]]], ['loc', [null, [1, 0], [1, 36]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            expectedCount = 3;\n            this.get('notifications.alerts').pushObject({ message: 'Third', type: 'success' });\n\n            expectedCount = 0;\n            this.set('notifications.alerts', (0, _emberArrayUtils.A)());\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-cm-editor-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop'], function (exports, _chai, _emberMocha, _emberRunloop) {\n\n    (0, _emberMocha.describeComponent)('gh-cm-editor', 'Integration: Component: gh-cm-editor', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('handles editor events', function () {\n            this.set('text', '');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 65\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-cm-editor', [['get', 'text', ['loc', [null, [1, 15], [1, 19]]]]], ['class', 'gh-input', 'update', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'text', ['loc', [null, [1, 57], [1, 61]]]]], [], ['loc', [null, [1, 52], [1, 62]]]]], [], ['loc', [null, [1, 44], [1, 63]]]]], ['loc', [null, [1, 0], [1, 65]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var input = this.$('.gh-input');\n\n            (0, _chai.expect)(input.hasClass('focused'), 'has focused class on first render').to.be['false'];\n\n            (0, _emberRunloop['default'])(function () {\n                input.find('textarea').trigger('focus');\n            });\n\n            (0, _chai.expect)(input.hasClass('focused'), 'has focused class after focus').to.be['true'];\n\n            (0, _emberRunloop['default'])(function () {\n                input.find('textarea').trigger('blur');\n            });\n\n            (0, _chai.expect)(input.hasClass('focused'), 'loses focused class on blur').to.be['false'];\n\n            (0, _emberRunloop['default'])(function () {\n                // access CodeMirror directly as it doesn't pick up changes\n                // to the textarea\n                var cm = input.find('.CodeMirror').get(0).CodeMirror;\n                cm.setValue('Testing');\n            });\n\n            (0, _chai.expect)(this.get('text'), 'text value after CM editor change').to.equal('Testing');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-datetime-input-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop'], function (exports, _chai, _emberMocha, _emberRunloop) {\n\n    (0, _emberMocha.describeComponent)('gh-datetime-input', 'Integration: Component: gh-datetime-input', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // renders the component on the page\n            // this.render(hbs`{{gh-datetime-input}}`);\n            //\n            // expect(this.$('.ember-text-field gh-input')).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-feature-flag-test', ['exports', 'chai', 'ember-mocha', 'ember-service', 'ember-test-helpers/wait'], function (exports, _chai, _emberMocha, _emberService, _emberTestHelpersWait) {\n\n    var featureStub = _emberService['default'].extend({\n        testFlag: true\n    });\n\n    (0, _emberMocha.describeComponent)('gh-feature-flag', 'Integration: Component: gh-feature-flag', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            this.register('service:feature', featureStub);\n            this.inject.service('feature', { as: 'feature' });\n        });\n\n        (0, _emberMocha.it)('renders properties correctly', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 30\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-feature-flag', ['testFlag'], [], ['loc', [null, [1, 0], [1, 30]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n            (0, _chai.expect)(this.$('label').attr('for')).to.equal(this.$('input[type=\"checkbox\"]').attr('id'));\n        });\n\n        (0, _emberMocha.it)('renders correctly when flag is set to true', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 30\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-feature-flag', ['testFlag'], [], ['loc', [null, [1, 0], [1, 30]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n            (0, _chai.expect)(this.$('label input[type=\"checkbox\"]').prop('checked')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('renders correctly when flag is set to false', function () {\n            this.set('feature.testFlag', false);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 30\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-feature-flag', ['testFlag'], [], ['loc', [null, [1, 0], [1, 30]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n\n            (0, _chai.expect)(this.$('label input[type=\"checkbox\"]').prop('checked')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('updates to reflect changes in flag property', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 30\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-feature-flag', ['testFlag'], [], ['loc', [null, [1, 0], [1, 30]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n\n            (0, _chai.expect)(this.$('label input[type=\"checkbox\"]').prop('checked')).to.be['true'];\n\n            this.$('label').click();\n\n            (0, _chai.expect)(this.$('label input[type=\"checkbox\"]').prop('checked')).to.be['false'];\n        });\n    });\n});","define('ghost-admin/tests/integration/components/gh-file-uploader-test', ['exports', 'chai', 'ember-mocha', 'jquery', 'ember-runloop', 'pretender', 'ember-test-helpers/wait', 'sinon', 'ghost-admin/tests/helpers/file-upload', 'ember-service', 'ghost-admin/services/ajax'], function (exports, _chai, _emberMocha, _jquery, _emberRunloop, _pretender, _emberTestHelpersWait, _sinon, _ghostAdminTestsHelpersFileUpload, _emberService, _ghostAdminServicesAjax) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    var notificationsStub = _emberService['default'].extend({\n        showAPIError: function showAPIError(error, options) {\n            // noop - to be stubbed\n        }\n    });\n\n    var stubSuccessfulUpload = function stubSuccessfulUpload(server) {\n        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n        server.post('/ghost/api/v0.1/uploads/', function () {\n            return [200, { 'Content-Type': 'application/json' }, '\"/content/images/test.png\"'];\n        }, delay);\n    };\n\n    var stubFailedUpload = function stubFailedUpload(server, code, error) {\n        var delay = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n        server.post('/ghost/api/v0.1/uploads/', function () {\n            return [code, { 'Content-Type': 'application/json' }, JSON.stringify({\n                errors: [{\n                    errorType: error,\n                    message: 'Error: ' + error\n                }]\n            })];\n        }, delay);\n    };\n\n    (0, _emberMocha.describeComponent)('gh-file-uploader', 'Integration: Component: gh-file-uploader', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n            this.set('uploadUrl', '/ghost/api/v0.1/uploads/');\n\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('notifications', { as: 'notifications' });\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 20\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-file-uploader', ['loc', [null, [1, 0], [1, 20]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('label').text().trim(), 'default label').to.equal('Select or drag-and-drop a file');\n        });\n\n        (0, _emberMocha.it)('allows file input \"accept\" attribute to be changed', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 20\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-file-uploader', ['loc', [null, [1, 0], [1, 20]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('input[type=\"file\"]').attr('accept'), 'default \"accept\" attribute').to.equal('text/csv');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 45\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['accept', 'application/zip'], ['loc', [null, [1, 0], [1, 45]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('input[type=\"file\"]').attr('accept'), 'specified \"accept\" attribute').to.equal('application/zip');\n        });\n\n        (0, _emberMocha.it)('renders form with supplied label text', function () {\n            this.set('labelText', 'My label');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 40\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['labelText', ['subexpr', '@mut', [['get', 'labelText', ['loc', [null, [1, 29], [1, 38]]]]], [], []]], ['loc', [null, [1, 0], [1, 40]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('label').text().trim(), 'label').to.equal('My label');\n        });\n\n        (0, _emberMocha.it)('generates request to supplied endpoint', function (done) {\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n                (0, _chai.expect)(server.handledRequests[0].url).to.equal('/ghost/api/v0.1/uploads/');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('fires uploadSuccess action on successful upload', function (done) {\n            var uploadSuccess = _sinon['default'].spy();\n            this.set('uploadSuccess', uploadSuccess);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 71\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [1, 55], [1, 68]]]]], [], ['loc', [null, [1, 47], [1, 69]]]]], ['loc', [null, [1, 0], [1, 71]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadSuccess.calledOnce).to.be['true'];\n                (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.equal('/content/images/test.png');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('doesn\\'t fire uploadSuccess action on failed upload', function (done) {\n            var uploadSuccess = _sinon['default'].spy();\n            this.set('uploadSuccess', uploadSuccess);\n\n            stubFailedUpload(server, 500);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 71\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [1, 55], [1, 68]]]]], [], ['loc', [null, [1, 47], [1, 69]]]]], ['loc', [null, [1, 0], [1, 71]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadSuccess.calledOnce).to.be['false'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('fires fileSelected action on file selection', function (done) {\n            var fileSelected = _sinon['default'].spy();\n            this.set('fileSelected', fileSelected);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 69\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'fileSelected', ['subexpr', 'action', [['get', 'fileSelected', ['loc', [null, [1, 54], [1, 66]]]]], [], ['loc', [null, [1, 46], [1, 67]]]]], ['loc', [null, [1, 0], [1, 69]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(fileSelected.calledOnce).to.be['true'];\n                (0, _chai.expect)(fileSelected.args[0]).to.not.be.blank;\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('fires uploadStarted action on upload start', function (done) {\n            var uploadStarted = _sinon['default'].spy();\n            this.set('uploadStarted', uploadStarted);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 71\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadStarted', ['subexpr', 'action', [['get', 'uploadStarted', ['loc', [null, [1, 55], [1, 68]]]]], [], ['loc', [null, [1, 47], [1, 69]]]]], ['loc', [null, [1, 0], [1, 71]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadStarted.calledOnce).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('fires uploadFinished action on successful upload', function (done) {\n            var uploadFinished = _sinon['default'].spy();\n            this.set('uploadFinished', uploadFinished);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 73\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'uploadFinished', ['loc', [null, [1, 56], [1, 70]]]]], [], ['loc', [null, [1, 48], [1, 71]]]]], ['loc', [null, [1, 0], [1, 73]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadFinished.calledOnce).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('fires uploadFinished action on failed upload', function (done) {\n            var uploadFinished = _sinon['default'].spy();\n            this.set('uploadFinished', uploadFinished);\n\n            stubFailedUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 73\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'uploadFinished', ['loc', [null, [1, 56], [1, 70]]]]], [], ['loc', [null, [1, 48], [1, 71]]]]], ['loc', [null, [1, 0], [1, 73]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadFinished.calledOnce).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('displays invalid file type error', function (done) {\n            var _this = this;\n\n            stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this.$('.failed').text()).to.match(/The file type you uploaded is not supported/);\n                (0, _chai.expect)(_this.$('.btn-green').length, 'reset button is displayed').to.equal(1);\n                (0, _chai.expect)(_this.$('.btn-green').text()).to.equal('Try Again');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('displays file too large for server error', function (done) {\n            var _this2 = this;\n\n            stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this2.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this2.$('.failed').text()).to.match(/The file you uploaded was larger/);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles file too large error directly from the web server', function (done) {\n            var _this3 = this;\n\n            server.post('/ghost/api/v0.1/uploads/', function () {\n                return [413, {}, ''];\n            });\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this3.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this3.$('.failed').text()).to.match(/The file you uploaded was larger/);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('displays other server-side error with message', function (done) {\n            var _this4 = this;\n\n            stubFailedUpload(server, 400, 'UnknownError');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this4.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this4.$('.failed').text()).to.match(/Error: UnknownError/);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles unknown failure', function (done) {\n            var _this5 = this;\n\n            server.post('/ghost/api/v0.1/uploads/', function () {\n                return [500, { 'Content-Type': 'application/json' }, ''];\n            });\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this5.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this5.$('.failed').text()).to.match(/Something went wrong/);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('triggers notifications.showAPIError for VersionMismatchError', function (done) {\n            var showAPIError = _sinon['default'].spy();\n            this.set('notifications.showAPIError', showAPIError);\n\n            stubFailedUpload(server, 400, 'VersionMismatchError');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(showAPIError.calledOnce).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', function (done) {\n            var showAPIError = _sinon['default'].spy();\n            this.set('notifications.showAPIError', showAPIError);\n\n            stubFailedUpload(server, 400, 'UnknownError');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(showAPIError.called).to.be['false'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('can be reset after a failed upload', function (done) {\n            var _this6 = this;\n\n            stubFailedUpload(server, 400, 'UnknownError');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 34\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _emberRunloop['default'])(function () {\n                    _this6.$('.btn-green').click();\n                });\n            });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this6.$('input[type=\"file\"]').length).to.equal(1);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('displays upload progress', function (done) {\n            this.set('done', done);\n\n            // pretender fires a progress event every 50ms\n            stubSuccessfulUpload(server, 150);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 63\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'done', ['loc', [null, [1, 56], [1, 60]]]]], [], ['loc', [null, [1, 48], [1, 61]]]]], ['loc', [null, [1, 0], [1, 63]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            // after 75ms we should have had one progress event\n            _emberRunloop['default'].later(this, function () {\n                (0, _chai.expect)(this.$('.progress .bar').length).to.equal(1);\n\n                var _$$attr$match = this.$('.progress .bar').attr('style').match(/width: (\\d+)%?/);\n\n                var _$$attr$match2 = _slicedToArray(_$$attr$match, 2);\n\n                var _ = _$$attr$match2[0];\n                var percentageWidth = _$$attr$match2[1];\n\n                (0, _chai.expect)(percentageWidth).to.be.above(0);\n                (0, _chai.expect)(percentageWidth).to.be.below(100);\n            }, 75);\n        });\n\n        (0, _emberMocha.it)('handles drag over/leave', function () {\n            var _this7 = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 20\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-file-uploader', ['loc', [null, [1, 0], [1, 20]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                var dragover = _jquery['default'].Event('dragover', {\n                    dataTransfer: {\n                        files: []\n                    }\n                });\n                _this7.$('.gh-image-uploader').trigger(dragover);\n            });\n\n            (0, _chai.expect)(this.$('.gh-image-uploader').hasClass('-drag-over'), 'has drag-over class').to.be['true'];\n\n            (0, _emberRunloop['default'])(function () {\n                _this7.$('.gh-image-uploader').trigger('dragleave');\n            });\n\n            (0, _chai.expect)(this.$('.gh-image-uploader').hasClass('-drag-over'), 'has drag-over class').to.be['false'];\n        });\n\n        (0, _emberMocha.it)('triggers file upload on file drop', function (done) {\n            var _this8 = this;\n\n            var uploadSuccess = _sinon['default'].spy();\n            var drop = _jquery['default'].Event('drop', {\n                dataTransfer: {\n                    files: [(0, _ghostAdminTestsHelpersFileUpload.createFile)(['test'], { name: 'test.csv' })]\n                }\n            });\n\n            this.set('uploadSuccess', uploadSuccess);\n\n            stubSuccessfulUpload(server);\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 71\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [1, 23], [1, 32]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [1, 55], [1, 68]]]]], [], ['loc', [null, [1, 47], [1, 69]]]]], ['loc', [null, [1, 0], [1, 71]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this8.$('.gh-image-uploader').trigger(drop);\n            });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadSuccess.calledOnce).to.be['true'];\n                (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.equal('/content/images/test.png');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('validates extension by default', function (done) {\n            var _this9 = this;\n\n            var uploadSuccess = _sinon['default'].spy();\n            var uploadFailed = _sinon['default'].spy();\n\n            this.set('uploadSuccess', uploadSuccess);\n            this.set('uploadFailed', uploadFailed);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 52\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [2, 20], [2, 29]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'uploadFailed', ['subexpr', 'action', [['get', 'uploadFailed', ['loc', [null, [4, 37], [4, 49]]]]], [], ['loc', [null, [4, 29], [4, 50]]]]], ['loc', [null, [1, 0], [4, 52]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.txt' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(uploadSuccess.called).to.be['false'];\n                (0, _chai.expect)(uploadFailed.calledOnce).to.be['true'];\n                (0, _chai.expect)(_this9.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this9.$('.failed').text()).to.match(/The file type you uploaded is not supported/);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('uploads if validate action supplied and returns true', function (done) {\n            var validate = _sinon['default'].stub().returns(true);\n            var uploadSuccess = _sinon['default'].spy();\n\n            this.set('validate', validate);\n            this.set('uploadSuccess', uploadSuccess);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 44\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [2, 20], [2, 29]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'validate', ['subexpr', 'action', [['get', 'validate', ['loc', [null, [4, 33], [4, 41]]]]], [], ['loc', [null, [4, 25], [4, 42]]]]], ['loc', [null, [1, 0], [4, 44]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(validate.calledOnce).to.be['true'];\n                (0, _chai.expect)(uploadSuccess.calledOnce).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', function (done) {\n            var _this10 = this;\n\n            var validate = _sinon['default'].stub().returns(new _ghostAdminServicesAjax.UnsupportedMediaTypeError());\n            var uploadSuccess = _sinon['default'].spy();\n            var uploadFailed = _sinon['default'].spy();\n\n            this.set('validate', validate);\n            this.set('uploadSuccess', uploadSuccess);\n            this.set('uploadFailed', uploadFailed);\n\n            stubSuccessfulUpload(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 5,\n                                'column': 44\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-file-uploader', [], ['url', ['subexpr', '@mut', [['get', 'uploadUrl', ['loc', [null, [2, 20], [2, 29]]]]], [], []], 'uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'uploadFailed', ['subexpr', 'action', [['get', 'uploadFailed', ['loc', [null, [4, 37], [4, 49]]]]], [], ['loc', [null, [4, 29], [4, 50]]]], 'validate', ['subexpr', 'action', [['get', 'validate', ['loc', [null, [5, 33], [5, 41]]]]], [], ['loc', [null, [5, 25], [5, 42]]]]], ['loc', [null, [1, 0], [5, 44]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.csv' });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(validate.calledOnce).to.be['true'];\n                (0, _chai.expect)(uploadSuccess.called).to.be['false'];\n                (0, _chai.expect)(uploadFailed.calledOnce).to.be['true'];\n                (0, _chai.expect)(_this10.$('.failed').length, 'error message is displayed').to.equal(1);\n                (0, _chai.expect)(_this10.$('.failed').text()).to.match(/The file type you uploaded is not supported/);\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-image-uploader-test', ['exports', 'sinon', 'chai', 'ember-mocha', 'pretender', 'ember-test-helpers/wait', 'ghost-admin/tests/helpers/file-upload', 'jquery', 'ember-runloop', 'ember-service', 'ghost-admin/services/ajax'], function (exports, _sinon, _chai, _emberMocha, _pretender, _emberTestHelpersWait, _ghostAdminTestsHelpersFileUpload, _jquery, _emberRunloop, _emberService, _ghostAdminServicesAjax) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    var keyCodes = {\n        enter: 13\n    };\n\n    var configStub = _emberService['default'].extend({\n        fileStorage: true\n    });\n\n    var notificationsStub = _emberService['default'].extend({\n        showAPIError: function showAPIError(error, options) {\n            // noop - to be stubbed\n        }\n    });\n\n    var sessionStub = _emberService['default'].extend({\n        isAuthenticated: false,\n        authorize: function authorize(authorizer, block) {\n            if (this.get('isAuthenticated')) {\n                block('Authorization', 'Bearer token');\n            }\n        }\n    });\n\n    var stubSuccessfulUpload = function stubSuccessfulUpload(server) {\n        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n        server.post('/ghost/api/v0.1/uploads/', function () {\n            return [200, { 'Content-Type': 'application/json' }, '\"/content/images/test.png\"'];\n        }, delay);\n    };\n\n    var stubFailedUpload = function stubFailedUpload(server, code, error) {\n        var delay = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n        server.post('/ghost/api/v0.1/uploads/', function () {\n            return [code, { 'Content-Type': 'application/json' }, JSON.stringify({\n                errors: [{\n                    errorType: error,\n                    message: 'Error: ' + error\n                }]\n            })];\n        }, delay);\n    };\n\n    (0, _emberMocha.describeComponent)('gh-image-upload', 'Integration: Component: gh-image-uploader', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            this.register('service:config', configStub);\n            this.register('service:session', sessionStub);\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('config', { as: 'configService' });\n            this.inject.service('session', { as: 'sessionService' });\n            this.inject.service('notifications', { as: 'notifications' });\n            this.set('update', function () {});\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.set('image', 'http://example.com/test.png');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 33\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('defaults to upload form', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 33\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('defaults to url form with no filestorage config', function () {\n            this.set('configService.fileStorage', false);\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 33\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length).to.equal(0);\n            (0, _chai.expect)(this.$('input[type=\"text\"].url').length).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('can switch between form types', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 33\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length).to.equal(1);\n            (0, _chai.expect)(this.$('input[type=\"text\"].url').length).to.equal(0);\n\n            this.$('a.image-url').click();\n\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length, 'upload form is visible after switch to url form').to.equal(0);\n            (0, _chai.expect)(this.$('input[type=\"text\"].url').length, 'url form is visible after switch to url form').to.equal(1);\n\n            this.$('a.image-upload').click();\n\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length, 'upload form is visible after switch to upload form').to.equal(1);\n            (0, _chai.expect)(this.$('input[type=\"text\"].url').length, 'url form is visible after switch to upload form').to.equal(0);\n        });\n\n        (0, _emberMocha.it)('triggers formChanged action when switching between forms', function () {\n            var formChanged = _sinon['default'].spy();\n            this.set('formChanged', formChanged);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 66\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'formChanged', ['subexpr', 'action', [['get', 'formChanged', ['loc', [null, [1, 52], [1, 63]]]]], [], ['loc', [null, [1, 44], [1, 64]]]]], ['loc', [null, [1, 0], [1, 66]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            this.$('a.image-url').click();\n            this.$('a.image-upload').click();\n\n            (0, _chai.expect)(formChanged.calledTwice).to.be['true'];\n            (0, _chai.expect)(formChanged.firstCall.args[0]).to.equal('url-input');\n            (0, _chai.expect)(formChanged.secondCall.args[0]).to.equal('upload');\n        });\n\n        describe('file upload form', function () {\n            (0, _emberMocha.it)('renders form with supplied alt text', function () {\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 53\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'altText', 'text test'], ['loc', [null, [1, 0], [1, 53]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _chai.expect)(this.$('.description').text().trim()).to.equal('Upload image of \"text test\"');\n            });\n\n            (0, _emberMocha.it)('renders form with supplied text', function () {\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 50\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'text', 'text test'], ['loc', [null, [1, 0], [1, 50]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _chai.expect)(this.$('.description').text().trim()).to.equal('text test');\n            });\n\n            (0, _emberMocha.it)('generates request to correct endpoint', function (done) {\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n                    (0, _chai.expect)(server.handledRequests[0].url).to.equal('/ghost/api/v0.1/uploads/');\n                    (0, _chai.expect)(server.handledRequests[0].requestHeaders.Authorization).to.be.undefined;\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('adds authentication headers to request', function (done) {\n                stubSuccessfulUpload(server);\n\n                this.get('sessionService').set('isAuthenticated', true);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    var _server$handledRequests = _slicedToArray(server.handledRequests, 1);\n\n                    var request = _server$handledRequests[0];\n\n                    (0, _chai.expect)(request.requestHeaders.Authorization).to.equal('Bearer token');\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('fires update action on successful upload', function (done) {\n                var update = _sinon['default'].spy();\n                this.set('update', update);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(update.calledOnce).to.be['true'];\n                    (0, _chai.expect)(update.firstCall.args[0]).to.equal('/content/images/test.png');\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('doesn\\'t fire update action on failed upload', function (done) {\n                var update = _sinon['default'].spy();\n                this.set('update', update);\n\n                stubFailedUpload(server, 500);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(update.calledOnce).to.be['false'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('fires fileSelected action on file selection', function (done) {\n                var fileSelected = _sinon['default'].spy();\n                this.set('fileSelected', fileSelected);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 89\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['url', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'fileSelected', ['subexpr', 'action', [['get', 'fileSelected', ['loc', [null, [1, 51], [1, 63]]]]], [], ['loc', [null, [1, 43], [1, 64]]]], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 80], [1, 86]]]]], [], ['loc', [null, [1, 72], [1, 87]]]]], ['loc', [null, [1, 0], [1, 89]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(fileSelected.calledOnce).to.be['true'];\n                    (0, _chai.expect)(fileSelected.args[0]).to.not.be.blank;\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('fires uploadStarted action on upload start', function (done) {\n                var uploadStarted = _sinon['default'].spy();\n                this.set('uploadStarted', uploadStarted);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 93\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'uploadStarted', ['subexpr', 'action', [['get', 'uploadStarted', ['loc', [null, [1, 54], [1, 67]]]]], [], ['loc', [null, [1, 46], [1, 68]]]], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 84], [1, 90]]]]], [], ['loc', [null, [1, 76], [1, 91]]]]], ['loc', [null, [1, 0], [1, 93]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(uploadStarted.calledOnce).to.be['true'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('fires uploadFinished action on successful upload', function (done) {\n                var uploadFinished = _sinon['default'].spy();\n                this.set('uploadFinished', uploadFinished);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 95\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'uploadFinished', ['loc', [null, [1, 55], [1, 69]]]]], [], ['loc', [null, [1, 47], [1, 70]]]], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 86], [1, 92]]]]], [], ['loc', [null, [1, 78], [1, 93]]]]], ['loc', [null, [1, 0], [1, 95]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(uploadFinished.calledOnce).to.be['true'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('fires uploadFinished action on failed upload', function (done) {\n                var uploadFinished = _sinon['default'].spy();\n                this.set('uploadFinished', uploadFinished);\n\n                stubFailedUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 95\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'uploadFinished', ['loc', [null, [1, 55], [1, 69]]]]], [], ['loc', [null, [1, 47], [1, 70]]]], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 86], [1, 92]]]]], [], ['loc', [null, [1, 78], [1, 93]]]]], ['loc', [null, [1, 0], [1, 95]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(uploadFinished.calledOnce).to.be['true'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('displays invalid file type error', function (done) {\n                var _this = this;\n\n                stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this.$('.failed').text()).to.match(/The image type you uploaded is not supported/);\n                    (0, _chai.expect)(_this.$('.btn-green').length, 'reset button is displayed').to.equal(1);\n                    (0, _chai.expect)(_this.$('.btn-green').text()).to.equal('Try Again');\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('displays file too large for server error', function (done) {\n                var _this2 = this;\n\n                stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this2.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this2.$('.failed').text()).to.match(/The image you uploaded was larger/);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('handles file too large error directly from the web server', function (done) {\n                var _this3 = this;\n\n                server.post('/ghost/api/v0.1/uploads/', function () {\n                    return [413, {}, ''];\n                });\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this3.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this3.$('.failed').text()).to.match(/The image you uploaded was larger/);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('displays other server-side error with message', function (done) {\n                var _this4 = this;\n\n                stubFailedUpload(server, 400, 'UnknownError');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this4.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this4.$('.failed').text()).to.match(/Error: UnknownError/);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('handles unknown failure', function (done) {\n                var _this5 = this;\n\n                server.post('/ghost/api/v0.1/uploads/', function () {\n                    return [500, { 'Content-Type': 'application/json' }, ''];\n                });\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this5.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this5.$('.failed').text()).to.match(/Something went wrong/);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('triggers notifications.showAPIError for VersionMismatchError', function (done) {\n                var showAPIError = _sinon['default'].spy();\n                this.set('notifications.showAPIError', showAPIError);\n\n                stubFailedUpload(server, 400, 'VersionMismatchError');\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(showAPIError.calledOnce).to.be['true'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', function (done) {\n                var showAPIError = _sinon['default'].spy();\n                this.set('notifications.showAPIError', showAPIError);\n\n                stubFailedUpload(server, 400, 'UnknownError');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(showAPIError.called).to.be['false'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('can be reset after a failed upload', function (done) {\n                var _this6 = this;\n\n                stubFailedUpload(server, 400, 'UnknownError');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { type: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _emberRunloop['default'])(function () {\n                        _this6.$('.btn-green').click();\n                    });\n                });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(_this6.$('input[type=\"file\"]').length).to.equal(1);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('displays upload progress', function (done) {\n                this.set('done', done);\n\n                // pretender fires a progress event every 50ms\n                stubSuccessfulUpload(server, 150);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 85\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'uploadFinished', ['subexpr', 'action', [['get', 'done', ['loc', [null, [1, 55], [1, 59]]]]], [], ['loc', [null, [1, 47], [1, 60]]]], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 76], [1, 82]]]]], [], ['loc', [null, [1, 68], [1, 83]]]]], ['loc', [null, [1, 0], [1, 85]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                // after 75ms we should have had one progress event\n                _emberRunloop['default'].later(this, function () {\n                    (0, _chai.expect)(this.$('.progress .bar').length).to.equal(1);\n\n                    var _$$attr$match = this.$('.progress .bar').attr('style').match(/width: (\\d+)%?/);\n\n                    var _$$attr$match2 = _slicedToArray(_$$attr$match, 2);\n\n                    var _ = _$$attr$match2[0];\n                    var percentageWidth = _$$attr$match2[1];\n\n                    (0, _chai.expect)(percentageWidth).to.be.above(0);\n                    (0, _chai.expect)(percentageWidth).to.be.below(100);\n                }, 75);\n            });\n\n            (0, _emberMocha.it)('handles drag over/leave', function () {\n                var _this7 = this;\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                (0, _emberRunloop['default'])(function () {\n                    var dragover = _jquery['default'].Event('dragover', {\n                        dataTransfer: {\n                            files: []\n                        }\n                    });\n                    _this7.$('.gh-image-uploader').trigger(dragover);\n                });\n\n                (0, _chai.expect)(this.$('.gh-image-uploader').hasClass('-drag-over'), 'has drag-over class').to.be['true'];\n\n                (0, _emberRunloop['default'])(function () {\n                    _this7.$('.gh-image-uploader').trigger('dragleave');\n                });\n\n                (0, _chai.expect)(this.$('.gh-image-uploader').hasClass('-drag-over'), 'has drag-over class').to.be['false'];\n            });\n\n            (0, _emberMocha.it)('triggers file upload on file drop', function (done) {\n                var _this8 = this;\n\n                var uploadSuccess = _sinon['default'].spy();\n                var drop = _jquery['default'].Event('drop', {\n                    dataTransfer: {\n                        files: [(0, _ghostAdminTestsHelpersFileUpload.createFile)(['test'], { name: 'test.png' })]\n                    }\n                });\n\n                this.set('uploadSuccess', uploadSuccess);\n\n                stubSuccessfulUpload(server);\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 58\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [1, 42], [1, 55]]]]], [], ['loc', [null, [1, 34], [1, 56]]]]], ['loc', [null, [1, 0], [1, 58]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                (0, _emberRunloop['default'])(function () {\n                    _this8.$('.gh-image-uploader').trigger(drop);\n                });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(uploadSuccess.calledOnce).to.be['true'];\n                    (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.equal('/content/images/test.png');\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('validates extension by default', function (done) {\n                var _this9 = this;\n\n                var uploadSuccess = _sinon['default'].spy();\n                var uploadFailed = _sinon['default'].spy();\n\n                this.set('uploadSuccess', uploadSuccess);\n                this.set('uploadFailed', uploadFailed);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [2, 42], [2, 55]]]]], [], ['loc', [null, [2, 34], [2, 56]]]], 'uploadFailed', ['subexpr', 'action', [['get', 'uploadFailed', ['loc', [null, [3, 41], [3, 53]]]]], [], ['loc', [null, [3, 33], [3, 54]]]]], ['loc', [null, [1, 0], [3, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.json' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(uploadSuccess.called).to.be['false'];\n                    (0, _chai.expect)(uploadFailed.calledOnce).to.be['true'];\n                    (0, _chai.expect)(_this9.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this9.$('.failed').text()).to.match(/The image type you uploaded is not supported/);\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('uploads if validate action supplied and returns true', function (done) {\n                var validate = _sinon['default'].stub().returns(true);\n                var uploadSuccess = _sinon['default'].spy();\n\n                this.set('validate', validate);\n                this.set('uploadSuccess', uploadSuccess);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 48\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [2, 42], [2, 55]]]]], [], ['loc', [null, [2, 34], [2, 56]]]], 'validate', ['subexpr', 'action', [['get', 'validate', ['loc', [null, [3, 37], [3, 45]]]]], [], ['loc', [null, [3, 29], [3, 46]]]]], ['loc', [null, [1, 0], [3, 48]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.txt' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(validate.calledOnce).to.be['true'];\n                    (0, _chai.expect)(uploadSuccess.calledOnce).to.be['true'];\n                    done();\n                });\n            });\n\n            (0, _emberMocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', function (done) {\n                var _this10 = this;\n\n                var validate = _sinon['default'].stub().returns(new _ghostAdminServicesAjax.UnsupportedMediaTypeError());\n                var uploadSuccess = _sinon['default'].spy();\n                var uploadFailed = _sinon['default'].spy();\n\n                this.set('validate', validate);\n                this.set('uploadSuccess', uploadSuccess);\n                this.set('uploadFailed', uploadFailed);\n\n                stubSuccessfulUpload(server);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 4,\n                                    'column': 48\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['uploadSuccess', ['subexpr', 'action', [['get', 'uploadSuccess', ['loc', [null, [2, 42], [2, 55]]]]], [], ['loc', [null, [2, 34], [2, 56]]]], 'uploadFailed', ['subexpr', 'action', [['get', 'uploadFailed', ['loc', [null, [3, 41], [3, 53]]]]], [], ['loc', [null, [3, 33], [3, 54]]]], 'validate', ['subexpr', 'action', [['get', 'validate', ['loc', [null, [4, 37], [4, 45]]]]], [], ['loc', [null, [4, 29], [4, 46]]]]], ['loc', [null, [1, 0], [4, 48]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                (0, _ghostAdminTestsHelpersFileUpload.fileUpload)(this.$('input[type=\"file\"]'), ['test'], { name: 'test.png' });\n\n                (0, _emberTestHelpersWait['default'])().then(function () {\n                    (0, _chai.expect)(validate.calledOnce).to.be['true'];\n                    (0, _chai.expect)(uploadSuccess.called).to.be['false'];\n                    (0, _chai.expect)(uploadFailed.calledOnce).to.be['true'];\n                    (0, _chai.expect)(_this10.$('.failed').length, 'error message is displayed').to.equal(1);\n                    (0, _chai.expect)(_this10.$('.failed').text()).to.match(/The image type you uploaded is not supported/);\n                    done();\n                });\n            });\n        });\n\n        describe('URL input form', function () {\n            beforeEach(function () {\n                this.set('configService.fileStorage', false);\n            });\n\n            (0, _emberMocha.it)('displays save button by default', function () {\n                this.set('image', 'http://example.com/test.png');\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 50\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'text', 'text test'], ['loc', [null, [1, 0], [1, 50]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _chai.expect)(this.$('button').length).to.equal(1);\n                (0, _chai.expect)(this.$('input[type=\"text\"]').val()).to.equal('http://example.com/test.png');\n            });\n\n            (0, _emberMocha.it)('can render without a save button', function () {\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 67\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'saveButton', false, 'text', 'text test'], ['loc', [null, [1, 0], [1, 67]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                (0, _chai.expect)(this.$('button').length).to.equal(0);\n                (0, _chai.expect)(this.$('.description').text().trim()).to.equal('text test');\n            });\n\n            (0, _emberMocha.it)('fires update action when save button clicked', function () {\n                var update = _sinon['default'].spy();\n                this.set('update', update);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                this.$('input[type=\"text\"]').val('saved url');\n                this.$('input[type=\"text\"]').change();\n                this.$('button.btn-blue').click();\n\n                (0, _chai.expect)(update.calledOnce).to.be['true'];\n                (0, _chai.expect)(update.firstCall.args[0]).to.equal('saved url');\n            });\n\n            (0, _emberMocha.it)('fires onInput action when typing URL', function () {\n                var onInput = _sinon['default'].spy();\n                this.set('onInput', onInput);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 58\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'onInput', ['subexpr', 'action', [['get', 'onInput', ['loc', [null, [1, 48], [1, 55]]]]], [], ['loc', [null, [1, 40], [1, 56]]]]], ['loc', [null, [1, 0], [1, 58]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                this.$('input[type=\"text\"]').val('input url');\n                this.$('input[type=\"text\"]').change();\n\n                (0, _chai.expect)(onInput.calledOnce).to.be['true'];\n                (0, _chai.expect)(onInput.firstCall.args[0]).to.equal('input url');\n            });\n\n            (0, _emberMocha.it)('saves on enter key', function () {\n                var update = _sinon['default'].spy();\n                this.set('update', update);\n\n                this.render(Ember.HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 56\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                            dom.insertBoundary(fragment, 0);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-image-uploader', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 26], [1, 31]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [1, 47], [1, 53]]]]], [], ['loc', [null, [1, 39], [1, 54]]]]], ['loc', [null, [1, 0], [1, 56]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n\n                this.$('input[type=\"text\"]').val('saved url');\n                this.$('input[type=\"text\"]').change();\n                this.$('input[type=\"text\"]').trigger(_jquery['default'].Event('keyup', { keyCode: keyCodes.enter, which: keyCodes.enter }));\n\n                (0, _chai.expect)(update.calledOnce).to.be['true'];\n                (0, _chai.expect)(update.firstCall.args[0]).to.equal('saved url');\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'sinon'], function (exports, _chai, _emberMocha, _emberRunloop, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-image-uploader-with-preview', 'Integration: Component: gh-image-uploader-with-preview', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders image if provided', function () {\n            this.set('image', 'http://example.com/test.png');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader-with-preview', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 39], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.gh-image-uploader.-with-image').length).to.equal(1);\n            (0, _chai.expect)(this.$('img').attr('src')).to.equal('http://example.com/test.png');\n        });\n\n        (0, _emberMocha.it)('renders upload form when no image provided', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader-with-preview', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 39], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('input[type=\"file\"]').length).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers remove action when delete icon is clicked', function () {\n            var _this = this;\n\n            var remove = _sinon['default'].spy();\n            this.set('remove', remove);\n            this.set('image', 'http://example.com/test.png');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 60\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-image-uploader-with-preview', [], ['image', ['subexpr', '@mut', [['get', 'image', ['loc', [null, [1, 39], [1, 44]]]]], [], []], 'remove', ['subexpr', '@mut', [['get', 'remove', ['loc', [null, [1, 52], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.icon-trash').click();\n            });\n\n            (0, _chai.expect)(remove.calledOnce).to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-navigation-test', ['exports', 'chai', 'ember-mocha', 'jquery', 'ember-runloop', 'ghost-admin/models/navigation-item'], function (exports, _chai, _emberMocha, _jquery, _emberRunloop, _ghostAdminModelsNavigationItem) {\n\n    (0, _emberMocha.describeComponent)('gh-navigation', 'Integration: Component: gh-navigation', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'triple-curlies'\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 86\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createElement('div');\n                            dom.setAttribute(el1, 'class', 'js-gh-blognav');\n                            var el2 = dom.createElement('div');\n                            dom.setAttribute(el2, 'class', 'gh-blognav-item');\n                            dom.appendChild(el1, el2);\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 104\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-navigation', [], [], 0, null, ['loc', [null, [1, 0], [1, 104]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('section.gh-view')).to.have.length(1);\n            (0, _chai.expect)(this.$('.ui-sortable')).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('triggers reorder action', function () {\n            var _this = this;\n\n            var navItems = [];\n            var expectedOldIndex = -1;\n            var expectedNewIndex = -1;\n\n            navItems.pushObject(_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/first' }));\n            navItems.pushObject(_ghostAdminModelsNavigationItem['default'].create({ label: 'Second', url: '/second' }));\n            navItems.pushObject(_ghostAdminModelsNavigationItem['default'].create({ label: 'Third', url: '/third' }));\n            navItems.pushObject(_ghostAdminModelsNavigationItem['default'].create({ label: '', url: '', last: true }));\n            this.set('navigationItems', navItems);\n            this.set('blogUrl', 'http://localhost:2368');\n\n            this.on('moveItem', function (oldIndex, newIndex) {\n                (0, _chai.expect)(oldIndex).to.equal(expectedOldIndex);\n                (0, _chai.expect)(newIndex).to.equal(expectedNewIndex);\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                _this.render(Ember.HTMLBars.template((function () {\n                    var child0 = (function () {\n                        var child0 = (function () {\n                            return {\n                                meta: {\n                                    'fragmentReason': false,\n                                    'revision': 'Ember@2.6.1',\n                                    'loc': {\n                                        'source': null,\n                                        'start': {\n                                            'line': 4,\n                                            'column': 24\n                                        },\n                                        'end': {\n                                            'line': 6,\n                                            'column': 24\n                                        }\n                                    }\n                                },\n                                isEmpty: false,\n                                arity: 1,\n                                cachedFragment: null,\n                                hasRendered: false,\n                                buildFragment: function buildFragment(dom) {\n                                    var el0 = dom.createDocumentFragment();\n                                    var el1 = dom.createTextNode('                            ');\n                                    dom.appendChild(el0, el1);\n                                    var el1 = dom.createComment('');\n                                    dom.appendChild(el0, el1);\n                                    var el1 = dom.createTextNode('\\n');\n                                    dom.appendChild(el0, el1);\n                                    return el0;\n                                },\n                                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                                    var morphs = new Array(1);\n                                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                                    return morphs;\n                                },\n                                statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [5, 49], [5, 56]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'blogUrl', ['loc', [null, [5, 65], [5, 72]]]]], [], []], 'addItem', 'addItem', 'deleteItem', 'deleteItem', 'updateUrl', 'updateUrl'], ['loc', [null, [5, 28], [5, 138]]]]],\n                                locals: ['navItem'],\n                                templates: []\n                            };\n                        })();\n\n                        return {\n                            meta: {\n                                'fragmentReason': false,\n                                'revision': 'Ember@2.6.1',\n                                'loc': {\n                                    'source': null,\n                                    'start': {\n                                        'line': 2,\n                                        'column': 16\n                                    },\n                                    'end': {\n                                        'line': 8,\n                                        'column': 16\n                                    }\n                                }\n                            },\n                            isEmpty: false,\n                            arity: 0,\n                            cachedFragment: null,\n                            hasRendered: false,\n                            buildFragment: function buildFragment(dom) {\n                                var el0 = dom.createDocumentFragment();\n                                var el1 = dom.createTextNode('                    ');\n                                dom.appendChild(el0, el1);\n                                var el1 = dom.createElement('form');\n                                dom.setAttribute(el1, 'id', 'settings-navigation');\n                                dom.setAttribute(el1, 'class', 'gh-blognav js-gh-blognav');\n                                dom.setAttribute(el1, 'novalidate', 'novalidate');\n                                var el2 = dom.createTextNode('\\n');\n                                dom.appendChild(el1, el2);\n                                var el2 = dom.createComment('');\n                                dom.appendChild(el1, el2);\n                                var el2 = dom.createTextNode('                    ');\n                                dom.appendChild(el1, el2);\n                                dom.appendChild(el0, el1);\n                                var el1 = dom.createTextNode('\\n');\n                                dom.appendChild(el0, el1);\n                                return el0;\n                            },\n                            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                                var morphs = new Array(1);\n                                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n                                return morphs;\n                            },\n                            statements: [['block', 'each', [['get', 'navigationItems', ['loc', [null, [4, 32], [4, 47]]]]], [], 0, null, ['loc', [null, [4, 24], [6, 33]]]]],\n                            locals: [],\n                            templates: [child0]\n                        };\n                    })();\n\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 8,\n                                    'column': 34\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createTextNode('\\n');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                            dom.insertBoundary(fragment, null);\n                            return morphs;\n                        },\n                        statements: [['block', 'gh-navigation', [], ['moveItem', 'moveItem'], 0, null, ['loc', [null, [2, 16], [8, 34]]]]],\n                        locals: [],\n                        templates: [child0]\n                    };\n                })()));\n            });\n\n            // check it renders the nav item rows\n            (0, _chai.expect)(this.$('.gh-blognav-item')).to.have.length(4);\n\n            // move second item up one\n            expectedOldIndex = 1;\n            expectedNewIndex = 0;\n            (0, _emberRunloop['default'])(function () {\n                (0, _jquery['default'])(_this.$('.gh-blognav-item')[1]).simulateDragSortable({\n                    move: -1,\n                    handle: '.gh-blognav-grab'\n                });\n            });\n\n            // move second item down one\n            expectedOldIndex = 1;\n            expectedNewIndex = 2;\n            (0, _emberRunloop['default'])(function () {\n                (0, _jquery['default'])(_this.$('.gh-blognav-item')[1]).simulateDragSortable({\n                    move: 1,\n                    handle: '.gh-blognav-grab'\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-navitem-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'ghost-admin/models/navigation-item'], function (exports, _chai, _emberMocha, _emberRunloop, _ghostAdminModelsNavigationItem) {\n\n    (0, _emberMocha.describeComponent)('gh-navitem', 'Integration: Component: gh-navitem', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.set('baseUrl', 'http://localhost:2368');\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url' }));\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-label').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-url').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(1);\n\n            // doesn't show any errors\n            (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be['false'];\n            (0, _chai.expect)($item.find('.error').length).to.equal(0);\n            (0, _chai.expect)($item.find('.response:visible').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('doesn\\'t show drag handle for new items', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url', isNew: true }));\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('shows add button for new items', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url', isNew: true }));\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.find('.gh-blognav-add').length).to.equal(1);\n            (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(0);\n        });\n\n        (0, _emberMocha.it)('triggers delete action', function () {\n            var _this = this;\n\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url' }));\n\n            var deleteActionCallCount = 0;\n            this.on('deleteItem', function (navItem) {\n                (0, _chai.expect)(navItem).to.equal(_this.get('navItem'));\n                deleteActionCallCount++;\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 70\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'deleteItem', 'deleteItem'], ['loc', [null, [1, 0], [1, 70]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-delete').trigger('click');\n\n            (0, _chai.expect)(deleteActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers add action', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url', isNew: true }));\n\n            var addActionCallCount = 0;\n            this.on('add', function () {\n                addActionCallCount++;\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 60\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'addItem', 'add'], ['loc', [null, [1, 0], [1, 60]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-add').trigger('click');\n\n            (0, _chai.expect)(addActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers update action', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: 'Test', url: '/url' }));\n\n            var updateActionCallCount = 0;\n            this.on('update', function () {\n                updateActionCallCount++;\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 65\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []], 'updateUrl', 'update'], ['loc', [null, [1, 0], [1, 65]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            this.$('.gh-blognav-url input').trigger('blur');\n\n            (0, _chai.expect)(updateActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('displays inline errors', function () {\n            this.set('navItem', _ghostAdminModelsNavigationItem['default'].create({ label: '', url: '' }));\n            this.get('navItem').validate();\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem', [], ['navItem', ['subexpr', '@mut', [['get', 'navItem', ['loc', [null, [1, 21], [1, 28]]]]], [], []], 'baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [1, 37], [1, 44]]]]], [], []]], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $item = this.$('.gh-blognav-item');\n\n            (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-label').hasClass('error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-label .response').text().trim()).to.equal('You must specify a label');\n            (0, _chai.expect)($item.find('.gh-blognav-url').hasClass('error')).to.be['true'];\n            (0, _chai.expect)($item.find('.gh-blognav-url .response').text().trim()).to.equal('You must specify a URL or relative path');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-navitem-url-input-test', ['exports', 'chai', 'ember-mocha', 'ember'], function (exports, _chai, _emberMocha, _ember) {\n    var $ = _ember['default'].$;\n    var run = _ember['default'].run;\n\n    // we want baseUrl to match the running domain so relative URLs are\n    // handled as expected (browser auto-sets the domain when using a.href)\n    var currentUrl = window.location.protocol + '//' + window.location.host + '/';\n\n    (0, _emberMocha.describeComponent)('gh-navitem-url-input', 'Integration: Component: gh-navitem-url-input', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            // set defaults\n            this.set('baseUrl', currentUrl);\n            this.set('url', '');\n            this.set('isNew', false);\n            this.on('clearErrors', function () {\n                return null;\n            });\n        });\n\n        (0, _emberMocha.it)('renders correctly with blank url', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input).to.have.length(1);\n            (0, _chai.expect)($input.hasClass('gh-input')).to.be['true'];\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n        });\n\n        (0, _emberMocha.it)('renders correctly with relative urls', function () {\n            this.set('url', '/about');\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about');\n\n            this.set('url', '/about#contact');\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about#contact');\n        });\n\n        (0, _emberMocha.it)('renders correctly with absolute urls', function () {\n            this.set('url', 'https://example.com:2368/#test');\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal('https://example.com:2368/#test');\n\n            this.set('url', 'mailto:test@example.com');\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n\n            this.set('url', 'tel:01234-5678-90');\n            (0, _chai.expect)($input.val()).to.equal('tel:01234-5678-90');\n\n            this.set('url', '//protocol-less-url.com');\n            (0, _chai.expect)($input.val()).to.equal('//protocol-less-url.com');\n\n            this.set('url', '#anchor');\n            (0, _chai.expect)($input.val()).to.equal('#anchor');\n        });\n\n        (0, _emberMocha.it)('deletes base URL on backspace', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = $.Event('keydown');\n                e.keyCode = 8;\n                $input.trigger(e);\n            });\n            (0, _chai.expect)($input.val()).to.equal('');\n        });\n\n        (0, _emberMocha.it)('deletes base URL on delete', function () {\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl);\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = $.Event('keydown');\n                e.keyCode = 46;\n                $input.trigger(e);\n            });\n            (0, _chai.expect)($input.val()).to.equal('');\n        });\n\n        (0, _emberMocha.it)('adds base url to relative urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val('/about').trigger('input');\n            });\n            run(function () {\n                $input.trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + 'about');\n        });\n\n        (0, _emberMocha.it)('adds \"mailto:\" to email addresses on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val('test@example.com').trigger('input');\n            });\n            run(function () {\n                $input.trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n\n            // ensure we don't double-up on the mailto:\n            run(function () {\n                $input.trigger('blur');\n            });\n            (0, _chai.expect)($input.val()).to.equal('mailto:test@example.com');\n        });\n\n        (0, _emberMocha.it)('doesn\\'t add base url to invalid urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var changeValue = function changeValue(value) {\n                run(function () {\n                    $input.val(value).trigger('input').trigger('blur');\n                });\n            };\n\n            changeValue('with spaces');\n            (0, _chai.expect)($input.val()).to.equal('with spaces');\n\n            changeValue('/with spaces');\n            (0, _chai.expect)($input.val()).to.equal('/with spaces');\n        });\n\n        (0, _emberMocha.it)('doesn\\'t mangle invalid urls on blur', function () {\n            this.on('updateUrl', function () {\n                return null;\n            });\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                $input.val(currentUrl + ' /test').trigger('input').trigger('blur');\n            });\n\n            (0, _chai.expect)($input.val()).to.equal(currentUrl + ' /test');\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on blur', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            $input.trigger('blur');\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on enter', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = $.Event('keypress');\n                e.keyCode = 13;\n                $input.trigger(e);\n            });\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('triggers \"change\" action on CMD-S', function () {\n            var changeActionCallCount = 0;\n            this.on('updateUrl', function () {\n                changeActionCallCount++;\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            run(function () {\n                // TODO: why is ember's keyEvent helper not available here?\n                var e = $.Event('keydown');\n                e.keyCode = 83;\n                e.metaKey = true;\n                $input.trigger(e);\n            });\n\n            (0, _chai.expect)(changeActionCallCount).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('sends absolute urls straight through to change action', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = url;\n                run(function () {\n                    $input.val(url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('http://example.com');\n            testUrl('http://example.com/');\n            testUrl('https://example.com');\n            testUrl('//example.com');\n            testUrl('//localhost:1234');\n            testUrl('#anchor');\n            testUrl('mailto:test@example.com');\n            testUrl('tel:12345-567890');\n            testUrl('javascript:alert(\"testing\");');\n        });\n\n        (0, _emberMocha.it)('strips base url from relative urls before sending to change action', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = '/' + url;\n                run(function () {\n                    $input.val('' + currentUrl + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('about/');\n            testUrl('about#contact');\n            testUrl('test/nested/');\n        });\n\n        (0, _emberMocha.it)('handles links to subdomains of blog domain', function () {\n            var expectedUrl = '';\n\n            this.set('baseUrl', 'http://example.com/');\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            expectedUrl = 'http://test.example.com/';\n            run(function () {\n                $input.val(expectedUrl).trigger('input').trigger('blur');\n            });\n            (0, _chai.expect)($input.val()).to.equal(expectedUrl);\n        });\n\n        (0, _emberMocha.it)('adds trailing slash to relative URL', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = '/' + url + '/';\n                run(function () {\n                    $input.val('' + currentUrl + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('about');\n            testUrl('test/nested');\n        });\n\n        (0, _emberMocha.it)('does not add trailing slash on relative URL with [.?#]', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = '/' + url;\n                run(function () {\n                    $input.val('' + currentUrl + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('about#contact');\n            testUrl('test/nested.svg');\n            testUrl('test?gho=sties');\n            testUrl('test/nested?sli=mer');\n        });\n\n        (0, _emberMocha.it)('does not add trailing slash on non-relative URLs', function () {\n            var expectedUrl = '';\n\n            this.on('updateUrl', function (url) {\n                (0, _chai.expect)(url).to.equal(expectedUrl);\n            });\n\n            this.render(_ember['default'].HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 47], [2, 54]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 59], [2, 62]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 69], [2, 74]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 106], [2, 128]]]]], ['loc', [null, [2, 16], [2, 130]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $input = this.$('input');\n\n            var testUrl = function testUrl(url) {\n                expectedUrl = '/' + url;\n                run(function () {\n                    $input.val('' + currentUrl + url).trigger('input');\n                });\n                run(function () {\n                    $input.trigger('blur');\n                });\n            };\n\n            testUrl('http://woo.ff/test');\n            testUrl('http://me.ow:2342/nested/test');\n            testUrl('https://wro.om/car#race');\n            testUrl('https://kabo.om/explosion?really=now');\n        });\n\n        describe('with sub-folder baseUrl', function () {\n            beforeEach(function () {\n                this.set('baseUrl', currentUrl + 'blog/');\n            });\n\n            (0, _emberMocha.it)('handles URLs relative to base url', function () {\n                var expectedUrl = '';\n\n                this.on('updateUrl', function (url) {\n                    (0, _chai.expect)(url).to.equal(expectedUrl);\n                });\n\n                this.render(_ember['default'].HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createTextNode('\\n                    ');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createTextNode('\\n                ');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 51], [2, 58]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 63], [2, 66]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 73], [2, 78]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 110], [2, 132]]]]], ['loc', [null, [2, 20], [2, 134]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                var $input = this.$('input');\n\n                var testUrl = function testUrl(url) {\n                    expectedUrl = url;\n                    run(function () {\n                        $input.val(currentUrl + 'blog' + url).trigger('input');\n                    });\n                    run(function () {\n                        $input.trigger('blur');\n                    });\n                };\n\n                testUrl('/about/');\n                testUrl('/about#contact');\n                testUrl('/test/nested/');\n            });\n\n            (0, _emberMocha.it)('handles URLs relative to base host', function () {\n                var expectedUrl = '';\n\n                this.on('updateUrl', function (url) {\n                    (0, _chai.expect)(url).to.equal(expectedUrl);\n                });\n\n                this.render(_ember['default'].HTMLBars.template((function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createTextNode('\\n                    ');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createComment('');\n                            dom.appendChild(el0, el1);\n                            var el1 = dom.createTextNode('\\n                ');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                            var morphs = new Array(1);\n                            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                            return morphs;\n                        },\n                        statements: [['inline', 'gh-navitem-url-input', [], ['baseUrl', ['subexpr', '@mut', [['get', 'baseUrl', ['loc', [null, [2, 51], [2, 58]]]]], [], []], 'url', ['subexpr', '@mut', [['get', 'url', ['loc', [null, [2, 63], [2, 66]]]]], [], []], 'isNew', ['subexpr', '@mut', [['get', 'isNew', ['loc', [null, [2, 73], [2, 78]]]]], [], []], 'change', 'updateUrl', 'clearErrors', ['subexpr', 'action', ['clearErrors'], [], ['loc', [null, [2, 110], [2, 132]]]]], ['loc', [null, [2, 20], [2, 134]]]]],\n                        locals: [],\n                        templates: []\n                    };\n                })()));\n                var $input = this.$('input');\n\n                var testUrl = function testUrl(url) {\n                    expectedUrl = url;\n                    run(function () {\n                        $input.val(url).trigger('input');\n                    });\n                    run(function () {\n                        $input.trigger('blur');\n                    });\n                };\n\n                testUrl('http://' + window.location.host);\n                testUrl('https://' + window.location.host);\n                testUrl('http://' + window.location.host + '/');\n                testUrl('https://' + window.location.host + '/');\n                testUrl('http://' + window.location.host + '/test');\n                testUrl('https://' + window.location.host + '/test');\n                testUrl('http://' + window.location.host + '/#test');\n                testUrl('https://' + window.location.host + '/#test');\n                testUrl('http://' + window.location.host + '/another/folder');\n                testUrl('https://' + window.location.host + '/another/folder');\n            });\n        });\n    });\n});\n/* jshint scripturl:true */","define('ghost-admin/tests/integration/components/gh-notification-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-notification', 'Integration: Component: gh-notification', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 35\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-notification', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 26], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('article.gh-notification')).to.have.length(1);\n            var $notification = this.$('.gh-notification');\n\n            (0, _chai.expect)($notification.hasClass('gh-notification-passive')).to.be['true'];\n            (0, _chai.expect)($notification.text()).to.match(/Test message/);\n        });\n\n        (0, _emberMocha.it)('maps message types to CSS classes', function () {\n            this.set('message', { message: 'Test message', type: 'success' });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 35\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-notification', [], ['message', ['subexpr', '@mut', [['get', 'message', ['loc', [null, [1, 26], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            var $notification = this.$('.gh-notification');\n\n            this.set('message.type', 'success');\n            (0, _chai.expect)($notification.hasClass('gh-notification-green'), 'success class isn\\'t green').to.be['true'];\n\n            this.set('message.type', 'error');\n            (0, _chai.expect)($notification.hasClass('gh-notification-red'), 'success class isn\\'t red').to.be['true'];\n\n            this.set('message.type', 'warn');\n            (0, _chai.expect)($notification.hasClass('gh-notification-yellow'), 'success class isn\\'t yellow').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-notifications-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'ember-service', 'ember-array/utils'], function (exports, _chai, _emberMocha, _emberRunloop, _emberService, _emberArrayUtils) {\n\n    var notificationsStub = _emberService['default'].extend({\n        notifications: (0, _emberArrayUtils.A)()\n    });\n\n    (0, _emberMocha.describeComponent)('gh-notifications', 'Integration: Component: gh-notifications', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.register('service:notifications', notificationsStub);\n            this.inject.service('notifications', { as: 'notifications' });\n\n            this.set('notifications.notifications', [{ message: 'First', type: 'error' }, { message: 'Second', type: 'warn' }]);\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 20\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-notifications', ['loc', [null, [1, 0], [1, 20]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-notifications').length).to.equal(1);\n\n            (0, _chai.expect)(this.$('.gh-notifications').children().length).to.equal(2);\n\n            this.set('notifications.notifications', (0, _emberArrayUtils.A)());\n            (0, _chai.expect)(this.$('.gh-notifications').children().length).to.equal(0);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-profile-image-test', ['exports', 'chai', 'ember-mocha', 'ember-service', 'ember-runloop', 'pretender', 'ember-test-helpers/wait'], function (exports, _chai, _emberMocha, _emberService, _emberRunloop, _pretender, _emberTestHelpersWait) {\n\n    var pathsStub = _emberService['default'].extend({\n        url: {\n            api: function api() {\n                return '';\n            },\n            asset: function asset(src) {\n                return src;\n            }\n        }\n    });\n\n    var stubKnownGravatar = function stubKnownGravatar(server) {\n        server.get('http://www.gravatar.com/avatar/:md5', function () {\n            return [200, { 'Content-Type': 'image/png' }, ''];\n        });\n    };\n\n    var stubUnknownGravatar = function stubUnknownGravatar(server) {\n        server.get('http://www.gravatar.com/avatar/:md5', function () {\n            return [404, {}, ''];\n        });\n    };\n\n    (0, _emberMocha.describeComponent)('gh-profile-image', 'Integration: Component: gh-profile-image', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            this.register('service:ghost-paths', pathsStub);\n            this.inject.service('ghost-paths', { as: 'ghost-paths' });\n\n            server = new _pretender['default']();\n            stubKnownGravatar(server);\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.set('email', '');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []]], ['loc', [null, [2, 16], [2, 48]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('renders and tears down ok with fileStorage:false', function () {\n            this.set('fileStorage', false);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['fileStorage', ['subexpr', '@mut', [['get', 'fileStorage', ['loc', [null, [2, 47], [2, 58]]]]], [], []]], ['loc', [null, [2, 16], [2, 60]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$()).to.have.length(1);\n            (0, _chai.expect)(this.$('input')).to.have.length(0);\n        }), (0, _emberMocha.it)('renders default image if no email supplied', function () {\n            this.set('email', null);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []], 'size', 100, 'debounce', 50], ['loc', [null, [2, 16], [2, 69]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.gravatar-img').attr('style'), 'gravatar image style').to.be.blank;\n        });\n\n        (0, _emberMocha.it)('renders the gravatar if valid email supplied', function (done) {\n            var _this = this;\n\n            var email = 'test@example.com';\n            var expectedUrl = '//www.gravatar.com/avatar/' + md5(email) + '?s=100&d=404';\n\n            this.set('email', email);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []], 'size', 100, 'debounce', 50], ['loc', [null, [2, 16], [2, 69]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            // wait for the ajax request to complete\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this.$('.gravatar-img').attr('style'), 'gravatar image style').to.equal('background-image: url(' + expectedUrl + ')');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('doesn\\'t add background url if gravatar image doesn\\'t exist', function (done) {\n            var _this2 = this;\n\n            stubUnknownGravatar(server);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', 'test@example.com', 'size', 100, 'debounce', 50], ['loc', [null, [2, 16], [2, 82]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this2.$('.gravatar-img').attr('style'), 'gravatar image style').to.be.blank;\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('throttles gravatar loading as email is changed', function (done) {\n            var _this3 = this;\n\n            var email = 'test@example.com';\n            var expectedUrl = '//www.gravatar.com/avatar/' + md5(email) + '?s=100&d=404';\n\n            this.set('email', 'test');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-profile-image', [], ['email', ['subexpr', '@mut', [['get', 'email', ['loc', [null, [2, 41], [2, 46]]]]], [], []], 'size', 100, 'debounce', 300], ['loc', [null, [2, 16], [2, 70]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this3.set('email', email);\n            });\n\n            (0, _chai.expect)(this.$('.gravatar-img').attr('style'), '.gravatar-img background not immediately changed on email change').to.be.blank;\n\n            _emberRunloop['default'].later(this, function () {\n                (0, _chai.expect)(this.$('.gravatar-img').attr('style'), '.gravatar-img background still not changed before debounce timeout').to.be.blank;\n            }, 250);\n\n            _emberRunloop['default'].later(this, function () {\n                (0, _chai.expect)(this.$('.gravatar-img').attr('style'), '.gravatar-img background changed after debounce timeout').to.equal('background-image: url(' + expectedUrl + ')');\n                done();\n            }, 400);\n        });\n    });\n});\n/* jshint expr:true */\n/* global md5 */","define('ghost-admin/tests/integration/components/gh-search-input-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'pretender', 'ember-test-helpers/wait', 'sinon'], function (exports, _chai, _emberMocha, _emberRunloop, _pretender, _emberTestHelpersWait, _sinon) {\n\n    var versionMismatchResponse = function versionMismatchResponse() {\n        return [400, { 'Content-Type': 'application/json' }, JSON.stringify({\n            errors: [{\n                errorType: 'VersionMismatchError',\n                statusCode: 400\n            }]\n        })];\n    };\n\n    (0, _emberMocha.describeComponent)('gh-search-input', 'Integration: Component: gh-search-input', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            // renders the component on the page\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 19\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-search-input', ['loc', [null, [1, 0], [1, 19]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.ember-power-select-search input')).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('opens the dropdown on text entry', function (done) {\n            var _this = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 19\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'gh-search-input', ['loc', [null, [1, 0], [1, 19]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            // enter text to trigger search\n            (0, _emberRunloop['default'])(function () {\n                _this.$('input[type=\"search\"]').val('test').trigger('input');\n            });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(_this.$('.ember-basic-dropdown-content').length).to.equal(1);\n                done();\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-subscribers-table-test', ['exports', 'chai', 'ember-mocha', 'ember-light-table'], function (exports, _chai, _emberMocha, _emberLightTable) {\n\n    (0, _emberMocha.describeComponent)('gh-subscribers-table', 'Integration: Component: gh-subscribers-table', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('table', new _emberLightTable['default']([], []));\n            this.set('sortByColumn', function () {});\n            this.set('delete', function () {});\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 94\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-subscribers-table', [], ['table', ['subexpr', '@mut', [['get', 'table', ['loc', [null, [1, 29], [1, 34]]]]], [], []], 'sortByColumn', ['subexpr', 'action', [['get', 'sortByColumn', ['loc', [null, [1, 56], [1, 68]]]]], [], ['loc', [null, [1, 48], [1, 69]]]], 'delete', ['subexpr', 'action', [['get', 'delete', ['loc', [null, [1, 85], [1, 91]]]]], [], ['loc', [null, [1, 77], [1, 92]]]]], ['loc', [null, [1, 0], [1, 94]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-tag-settings-form-test', ['exports', 'chai', 'ember-mocha', 'ember-service', 'ember-object', 'ember-runloop', 'ember-data'], function (exports, _chai, _emberMocha, _emberService, _emberObject, _emberRunloop, _emberData) {\n    var Errors = _emberData['default'].Errors;\n\n    var configStub = _emberService['default'].extend({\n        blogUrl: 'http://localhost:2368'\n    });\n\n    var mediaQueriesStub = _emberService['default'].extend({\n        maxWidth600: false\n    });\n\n    (0, _emberMocha.describeComponent)('gh-tag-settings-form', 'Integration: Component: gh-tag-settings-form', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n            var tag = _emberObject['default'].create({\n                id: 1,\n                name: 'Test',\n                slug: 'test',\n                description: 'Description.',\n                metaTitle: 'Meta Title',\n                metaDescription: 'Meta description',\n                errors: Errors.create(),\n                hasValidated: []\n            });\n            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */\n\n            this.set('tag', tag);\n            this.set('actions.setProperty', function (property, value) {\n                // this should be overridden if a call is expected\n                console.error('setProperty called \\'' + property + ': ' + value + '\\'');\n            });\n\n            this.register('service:config', configStub);\n            this.inject.service('config', { as: 'config' });\n\n            this.register('service:media-queries', mediaQueriesStub);\n            this.inject.service('media-queries', { as: 'mediaQueries' });\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n\n        (0, _emberMocha.it)('has the correct title', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.tag-settings-pane h4').text(), 'existing tag title').to.equal('Tag Settings');\n\n            this.set('tag.isNew', true);\n            (0, _chai.expect)(this.$('.tag-settings-pane h4').text(), 'new tag title').to.equal('New Tag');\n        });\n\n        (0, _emberMocha.it)('renders main settings', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.gh-image-uploader').length, 'displays image uploader').to.equal(1);\n            (0, _chai.expect)(this.$('input[name=\"name\"]').val(), 'name field value').to.equal('Test');\n            (0, _chai.expect)(this.$('input[name=\"slug\"]').val(), 'slug field value').to.equal('test');\n            (0, _chai.expect)(this.$('textarea[name=\"description\"]').val(), 'description field value').to.equal('Description.');\n            (0, _chai.expect)(this.$('input[name=\"metaTitle\"]').val(), 'metaTitle field value').to.equal('Meta Title');\n            (0, _chai.expect)(this.$('textarea[name=\"metaDescription\"]').val(), 'metaDescription field value').to.equal('Meta description');\n        });\n\n        (0, _emberMocha.it)('can switch between main/meta settings', function () {\n            var _this = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'main settings are displayed by default').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-out-right'), 'meta settings are hidden by default').to.be['true'];\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.meta-data-button').click();\n            });\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-out-left'), 'main settings are hidden after clicking Meta Data button').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-in'), 'meta settings are displayed after clicking Meta Data button').to.be['true'];\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.back').click();\n            });\n\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'main settings are displayed after clicking \"back\"').to.be['true'];\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-out-right'), 'meta settings are hidden after clicking \"back\"').to.be['true'];\n        });\n\n        (0, _emberMocha.it)('has one-way binding for properties', function () {\n            var _this2 = this;\n\n            this.set('actions.setProperty', function () {\n                // noop\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this2.$('input[name=\"name\"]').val('New name');\n                _this2.$('input[name=\"slug\"]').val('new-slug');\n                _this2.$('textarea[name=\"description\"]').val('New description');\n                _this2.$('input[name=\"metaTitle\"]').val('New metaTitle');\n                _this2.$('textarea[name=\"metaDescription\"]').val('New metaDescription');\n            });\n\n            (0, _chai.expect)(this.get('tag.name'), 'tag name').to.equal('Test');\n            (0, _chai.expect)(this.get('tag.slug'), 'tag slug').to.equal('test');\n            (0, _chai.expect)(this.get('tag.description'), 'tag description').to.equal('Description.');\n            (0, _chai.expect)(this.get('tag.metaTitle'), 'tag metaTitle').to.equal('Meta Title');\n            (0, _chai.expect)(this.get('tag.metaDescription'), 'tag metaDescription').to.equal('Meta description');\n        });\n\n        (0, _emberMocha.it)('triggers setProperty action on blur of all fields', function () {\n            var _this3 = this;\n\n            var expectedProperty = '';\n            var expectedValue = '';\n\n            this.set('actions.setProperty', function (property, value) {\n                (0, _chai.expect)(property, 'property').to.equal(expectedProperty);\n                (0, _chai.expect)(value, 'value').to.equal(expectedValue);\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            expectedProperty = 'name';\n            expectedValue = 'new-slug';\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('input[name=\"name\"]').val('New name');\n            });\n\n            expectedProperty = 'url';\n            expectedValue = 'new-slug';\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('input[name=\"slug\"]').val('new-slug');\n            });\n\n            expectedProperty = 'description';\n            expectedValue = 'New description';\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('textarea[name=\"description\"]').val('New description');\n            });\n\n            expectedProperty = 'metaTitle';\n            expectedValue = 'New metaTitle';\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('input[name=\"metaTitle\"]').val('New metaTitle');\n            });\n\n            expectedProperty = 'metaDescription';\n            expectedValue = 'New metaDescription';\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('textarea[name=\"metaDescription\"]').val('New metaDescription');\n            });\n        });\n\n        (0, _emberMocha.it)('displays error messages for validated fields', function () {\n            var errors = this.get('tag.errors');\n            var hasValidated = this.get('tag.hasValidated');\n\n            errors.add('name', 'must be present');\n            hasValidated.push('name');\n\n            errors.add('slug', 'must be present');\n            hasValidated.push('slug');\n\n            errors.add('description', 'is too long');\n            hasValidated.push('description');\n\n            errors.add('metaTitle', 'is too long');\n            hasValidated.push('metaTitle');\n\n            errors.add('metaDescription', 'is too long');\n            hasValidated.push('metaDescription');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            var nameFormGroup = this.$('input[name=\"name\"]').closest('.form-group');\n            (0, _chai.expect)(nameFormGroup.hasClass('error'), 'name form group has error state').to.be['true'];\n            (0, _chai.expect)(nameFormGroup.find('.response').length, 'name form group has error message').to.equal(1);\n\n            var slugFormGroup = this.$('input[name=\"slug\"]').closest('.form-group');\n            (0, _chai.expect)(slugFormGroup.hasClass('error'), 'slug form group has error state').to.be['true'];\n            (0, _chai.expect)(slugFormGroup.find('.response').length, 'slug form group has error message').to.equal(1);\n\n            var descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n            (0, _chai.expect)(descriptionFormGroup.hasClass('error'), 'description form group has error state').to.be['true'];\n\n            var metaTitleFormGroup = this.$('input[name=\"metaTitle\"]').closest('.form-group');\n            (0, _chai.expect)(metaTitleFormGroup.hasClass('error'), 'metaTitle form group has error state').to.be['true'];\n            (0, _chai.expect)(metaTitleFormGroup.find('.response').length, 'metaTitle form group has error message').to.equal(1);\n\n            var metaDescriptionFormGroup = this.$('textarea[name=\"metaDescription\"]').closest('.form-group');\n            (0, _chai.expect)(metaDescriptionFormGroup.hasClass('error'), 'metaDescription form group has error state').to.be['true'];\n            (0, _chai.expect)(metaDescriptionFormGroup.find('.response').length, 'metaDescription form group has error message').to.equal(1);\n        });\n\n        (0, _emberMocha.it)('displays char count for text fields', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            var descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n            (0, _chai.expect)(descriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('12');\n\n            var metaDescriptionFormGroup = this.$('textarea[name=\"metaDescription\"]').closest('.form-group');\n            (0, _chai.expect)(metaDescriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('16');\n        });\n\n        (0, _emberMocha.it)('renders SEO title preview', function () {\n            var _this4 = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-title').text(), 'displays meta title if present').to.equal('Meta Title');\n\n            (0, _emberRunloop['default'])(function () {\n                _this4.set('tag.metaTitle', '');\n            });\n            (0, _chai.expect)(this.$('.seo-preview-title').text(), 'falls back to tag name without metaTitle').to.equal('Test');\n\n            (0, _emberRunloop['default'])(function () {\n                _this4.set('tag.name', new Array(151).join('x'));\n            });\n            var expectedLength = 70 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-title').text().length, 'cuts title to max 70 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('renders SEO URL preview', function () {\n            var _this5 = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-link').text(), 'adds url and tag prefix').to.equal('http://localhost:2368/tag/test/');\n\n            (0, _emberRunloop['default'])(function () {\n                _this5.set('tag.slug', new Array(151).join('x'));\n            });\n            var expectedLength = 70 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-link').text().length, 'cuts slug to max 70 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('renders SEO description preview', function () {\n            var _this6 = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.seo-preview-description').text(), 'displays meta description if present').to.equal('Meta description');\n\n            (0, _emberRunloop['default'])(function () {\n                _this6.set('tag.metaDescription', '');\n            });\n            (0, _chai.expect)(this.$('.seo-preview-description').text(), 'falls back to tag description without metaDescription').to.equal('Description.');\n\n            (0, _emberRunloop['default'])(function () {\n                _this6.set('tag.description', new Array(200).join('x'));\n            });\n            var expectedLength = 156 + '…'.length;\n            (0, _chai.expect)(this.$('.seo-preview-description').text().length, 'cuts description to max 156 chars').to.equal(expectedLength);\n        });\n\n        (0, _emberMocha.it)('resets if a new tag is received', function () {\n            var _this7 = this;\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _emberRunloop['default'])(function () {\n                _this7.$('.meta-data-button').click();\n            });\n            (0, _chai.expect)(this.$('.tag-meta-settings-pane').hasClass('settings-menu-pane-in'), 'meta data pane is shown').to.be['true'];\n\n            (0, _emberRunloop['default'])(function () {\n                _this7.set('tag', _emberObject['default'].create({ id: '2' }));\n            });\n            (0, _chai.expect)(this.$('.tag-settings-pane').hasClass('settings-menu-pane-in'), 'resets to main settings').to.be['true'];\n        });\n\n        (0, _emberMocha.it)('triggers delete tag modal on delete click', function (done) {\n            var _this8 = this;\n\n            // TODO: will time out if this isn't hit, there's probably a better\n            // way of testing this\n            this.set('actions.openModal', function () {\n                done();\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]], 'showDeleteTagModal', ['subexpr', 'action', ['openModal'], [], ['loc', [null, [2, 101], [2, 121]]]]], ['loc', [null, [2, 16], [2, 123]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this8.$('.tag-delete-button').click();\n            });\n        });\n\n        (0, _emberMocha.it)('shows settings.tags arrow link on mobile', function () {\n            this.set('mediaQueries.maxWidth600', true);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-tag-settings-form', [], ['tag', ['subexpr', '@mut', [['get', 'tag', ['loc', [null, [2, 43], [2, 46]]]]], [], []], 'setProperty', ['subexpr', 'action', ['setProperty'], [], ['loc', [null, [2, 59], [2, 81]]]]], ['loc', [null, [2, 16], [2, 83]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.tag-settings-pane .settings-menu-header .settings-menu-header-action').length, 'settings.tags link is shown').to.equal(1);\n        });\n    });\n});\n/* jshint expr:true */\n/* jscs:disable requireTemplateStringsForConcatenation */","define('ghost-admin/tests/integration/components/gh-tags-management-container-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-tags-management-container', 'Integration: Component: gh-tags-management-container', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('tags', []);\n            this.set('selectedTag', null);\n            this.on('enteredMobile', function () {\n                // noop\n            });\n            this.on('leftMobile', function () {\n                // noop\n            });\n\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 2,\n                                    'column': 137\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n                ');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('\\n            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-tags-management-container', [], ['tags', ['subexpr', '@mut', [['get', 'tags', ['loc', [null, [2, 53], [2, 57]]]]], [], []], 'selectedTag', ['subexpr', '@mut', [['get', 'selectedTag', ['loc', [null, [2, 70], [2, 81]]]]], [], []], 'enteredMobile', 'enteredMobile', 'leftMobile', 'leftMobile'], 0, null, ['loc', [null, [2, 16], [2, 170]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-task-button-test', ['exports', 'chai', 'ember-mocha', 'ember-concurrency', 'ember-object', 'ember-test-helpers/wait'], function (exports, _chai, _emberMocha, _emberConcurrency, _emberObject, _emberTestHelpersWait) {\n\n    (0, _emberMocha.describeComponent)('gh-task-button', 'Integration: Component: gh-task-button', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': {\n                                'name': 'missing-wrapper',\n                                'problems': ['wrong-type']\n                            },\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 1,\n                                    'column': 0\n                                },\n                                'end': {\n                                    'line': 1,\n                                    'column': 23\n                                }\n                            }\n                        },\n                        isEmpty: false,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            var el1 = dom.createTextNode('Test');\n                            dom.appendChild(el0, el1);\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 42\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-task-button', [], [], 0, null, ['loc', [null, [1, 0], [1, 42]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n            (0, _chai.expect)(this.$().text().trim()).to.equal('Test');\n        });\n\n        // TODO: figure out how to test concurrency behavior\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-theme-table-test', ['exports', 'chai', 'ember-mocha', 'jquery', 'sinon', 'ember-runloop'], function (exports, _chai, _emberMocha, _jquery, _sinon, _emberRunloop) {\n\n    (0, _emberMocha.describeComponent)('gh-theme-table', 'Integration: Component: gh-theme-table', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            this.set('availableThemes', [{ name: 'Daring', 'package': { name: 'Daring', version: '0.1.4' }, active: true }, { name: 'casper', 'package': { name: 'Casper', version: '1.3.1' } }, { name: 'oscar-ghost-1.1.0', 'package': { name: 'Lanyon', version: '1.1.0' } }, { name: 'foo' }]);\n            this.set('actionHandler', _sinon['default'].spy());\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 6,\n                                'column': 14\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-theme-table', [], ['availableThemes', ['subexpr', '@mut', [['get', 'availableThemes', ['loc', [null, [2, 32], [2, 47]]]]], [], []], 'activateTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'downloadTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [4, 38], [4, 51]]]]], [], ['loc', [null, [4, 30], [4, 52]]]], 'deleteTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [5, 36], [5, 49]]]]], [], ['loc', [null, [5, 28], [5, 50]]]]], ['loc', [null, [1, 0], [6, 14]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$('.theme-list').length, '.theme-list is present').to.equal(1);\n            (0, _chai.expect)(this.$('.theme-list-item').length, 'number of rows').to.equal(4);\n\n            var packageNames = this.$('.theme-list-item-body .name').map(function (i, name) {\n                return (0, _jquery['default'])(name).text().trim();\n            }).toArray();\n\n            (0, _chai.expect)(packageNames, 'themes are ordered by label, casper has \"default\", package versions are shown').to.deep.equal(['Casper - 1.3.1 (default)', 'Daring - 0.1.4', 'foo', 'Lanyon - 1.1.0']);\n\n            (0, _chai.expect)(this.$('.theme-list-item:contains(\"Daring\")').hasClass('theme-list-item--active'), 'active theme is highlighted').to.be['true'];\n\n            (0, _chai.expect)(this.$('.theme-list-item:not(:contains(\"Daring\"))').find('a:contains(\"Activate\")').length === 3, 'non-active themes have an activate link').to.be['true'];\n\n            (0, _chai.expect)(this.$('.theme-list-item:contains(\"Daring\")').find('a:contains(\"Activate\")').length === 0, 'active theme doesn\\'t have an activate link').to.be['true'];\n\n            (0, _chai.expect)(this.$('a:contains(\"Download\")').length, 'all themes have a download link').to.equal(4);\n\n            (0, _chai.expect)(this.$('.theme-list-item:contains(\"foo\")').find('a:contains(\"Delete\")').length === 1, 'non-active, non-casper theme has delete link').to.be['true'];\n\n            (0, _chai.expect)(this.$('.theme-list-item:contains(\"Casper\")').find('a:contains(\"Delete\")').length === 0, 'casper doesn\\'t have delete link').to.be['true'];\n\n            (0, _chai.expect)(this.$('.theme-list-item--active').find('a:contains(\"Delete\")').length === 0, 'active theme doesn\\'t have delete link').to.be['true'];\n        });\n\n        (0, _emberMocha.it)('delete link triggers passed in action', function () {\n            var _this = this;\n\n            var deleteAction = _sinon['default'].spy();\n            var actionHandler = _sinon['default'].spy();\n\n            this.set('availableThemes', [{ name: 'Foo', active: true }, { name: 'Bar' }]);\n            this.set('deleteAction', deleteAction);\n            this.set('actionHandler', actionHandler);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 6,\n                                'column': 14\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-theme-table', [], ['availableThemes', ['subexpr', '@mut', [['get', 'availableThemes', ['loc', [null, [2, 32], [2, 47]]]]], [], []], 'activateTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'downloadTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [4, 38], [4, 51]]]]], [], ['loc', [null, [4, 30], [4, 52]]]], 'deleteTheme', ['subexpr', 'action', [['get', 'deleteAction', ['loc', [null, [5, 36], [5, 48]]]]], [], ['loc', [null, [5, 28], [5, 49]]]]], ['loc', [null, [1, 0], [6, 14]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.theme-list-item:contains(\"Bar\") a:contains(\"Delete\")').click();\n            });\n\n            (0, _chai.expect)(deleteAction.calledOnce).to.be['true'];\n            (0, _chai.expect)(deleteAction.firstCall.args[0].name).to.equal('Bar');\n        });\n\n        (0, _emberMocha.it)('download link triggers passed in action', function () {\n            var _this2 = this;\n\n            var downloadAction = _sinon['default'].spy();\n            var actionHandler = _sinon['default'].spy();\n\n            this.set('availableThemes', [{ name: 'Foo', active: true }, { name: 'Bar' }]);\n            this.set('downloadAction', downloadAction);\n            this.set('actionHandler', actionHandler);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 6,\n                                'column': 14\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-theme-table', [], ['availableThemes', ['subexpr', '@mut', [['get', 'availableThemes', ['loc', [null, [2, 32], [2, 47]]]]], [], []], 'activateTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'downloadTheme', ['subexpr', 'action', [['get', 'downloadAction', ['loc', [null, [4, 38], [4, 52]]]]], [], ['loc', [null, [4, 30], [4, 53]]]], 'deleteTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [5, 36], [5, 49]]]]], [], ['loc', [null, [5, 28], [5, 50]]]]], ['loc', [null, [1, 0], [6, 14]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this2.$('.theme-list-item:contains(\"Foo\") a:contains(\"Download\")').click();\n            });\n\n            (0, _chai.expect)(downloadAction.calledOnce).to.be['true'];\n            (0, _chai.expect)(downloadAction.firstCall.args[0].name).to.equal('Foo');\n        });\n\n        (0, _emberMocha.it)('activate link triggers passed in action', function () {\n            var _this3 = this;\n\n            var activateAction = _sinon['default'].spy();\n            var actionHandler = _sinon['default'].spy();\n\n            this.set('availableThemes', [{ name: 'Foo', active: true }, { name: 'Bar' }]);\n            this.set('activateAction', activateAction);\n            this.set('actionHandler', actionHandler);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 6,\n                                'column': 14\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-theme-table', [], ['availableThemes', ['subexpr', '@mut', [['get', 'availableThemes', ['loc', [null, [2, 32], [2, 47]]]]], [], []], 'activateTheme', ['subexpr', 'action', [['get', 'activateAction', ['loc', [null, [3, 38], [3, 52]]]]], [], ['loc', [null, [3, 30], [3, 53]]]], 'downloadTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [4, 38], [4, 51]]]]], [], ['loc', [null, [4, 30], [4, 52]]]], 'deleteTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [5, 36], [5, 49]]]]], [], ['loc', [null, [5, 28], [5, 50]]]]], ['loc', [null, [1, 0], [6, 14]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this3.$('.theme-list-item:contains(\"Bar\") a:contains(\"Activate\")').click();\n            });\n\n            (0, _chai.expect)(activateAction.calledOnce).to.be['true'];\n            (0, _chai.expect)(activateAction.firstCall.args[0].name).to.equal('Bar');\n        });\n\n        (0, _emberMocha.it)('displays folder names if there are duplicate package names', function () {\n            this.set('availableThemes', [{ name: 'daring', 'package': { name: 'Daring', version: '0.1.4' }, active: true }, { name: 'daring-0.1.5', 'package': { name: 'Daring', version: '0.1.4' } }, { name: 'casper', 'package': { name: 'Casper', version: '1.3.1' } }, { name: 'another', 'package': { name: 'Casper', version: '1.3.1' } }, { name: 'mine', 'package': { name: 'Casper', version: '1.3.1' } }, { name: 'foo' }]);\n            this.set('actionHandler', _sinon['default'].spy());\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 6,\n                                'column': 14\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-theme-table', [], ['availableThemes', ['subexpr', '@mut', [['get', 'availableThemes', ['loc', [null, [2, 32], [2, 47]]]]], [], []], 'activateTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [3, 38], [3, 51]]]]], [], ['loc', [null, [3, 30], [3, 52]]]], 'downloadTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [4, 38], [4, 51]]]]], [], ['loc', [null, [4, 30], [4, 52]]]], 'deleteTheme', ['subexpr', 'action', [['get', 'actionHandler', ['loc', [null, [5, 36], [5, 49]]]]], [], ['loc', [null, [5, 28], [5, 50]]]]], ['loc', [null, [1, 0], [6, 14]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            var packageNames = this.$('.theme-list-item-body .name').map(function (i, name) {\n                return (0, _jquery['default'])(name).text().trim();\n            }).toArray();\n\n            console.log(packageNames);\n\n            (0, _chai.expect)(packageNames, 'themes are ordered by label, folder names shown for duplicates').to.deep.equal(['Casper - 1.3.1 (another)', 'Casper - 1.3.1 (default)', 'Casper - 1.3.1 (mine)', 'Daring - 0.1.4 (daring)', 'Daring - 0.1.4 (daring-0.1.5)', 'foo']);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-timezone-select-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'ember-test-helpers/wait', 'sinon'], function (exports, _chai, _emberMocha, _emberRunloop, _emberTestHelpersWait, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-timezone-select', 'Integration: Component: gh-timezone-select', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            this.set('availableTimezones', [{ name: 'Pacific/Pago_Pago', label: '(GMT -11:00) Midway Island, Samoa' }, { name: 'Etc/UTC', label: '(GMT) UTC' }, { name: 'Pacific/Kwajalein', label: '(GMT +12:00) International Date Line West' }]);\n            this.set('activeTimezone', 'Etc/UTC');\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 47\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-timezone-select', [], ['availableTimezones', ['subexpr', '@mut', [['get', 'availableTimezones', ['loc', [null, [2, 35], [2, 53]]]]], [], []], 'activeTimezone', ['subexpr', '@mut', [['get', 'activeTimezone', ['loc', [null, [3, 31], [3, 45]]]]], [], []]], ['loc', [null, [1, 0], [3, 47]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _chai.expect)(this.$(), 'top-level elements').to.have.length(1);\n            (0, _chai.expect)(this.$('option'), 'number of options').to.have.length(3);\n            (0, _chai.expect)(this.$('select').val(), 'selected option value').to.equal('Etc/UTC');\n        });\n\n        (0, _emberMocha.it)('handles an unknown timezone', function () {\n            this.set('activeTimezone', 'Europe/London');\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 3,\n                                'column': 47\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-timezone-select', [], ['availableTimezones', ['subexpr', '@mut', [['get', 'availableTimezones', ['loc', [null, [2, 35], [2, 53]]]]], [], []], 'activeTimezone', ['subexpr', '@mut', [['get', 'activeTimezone', ['loc', [null, [3, 31], [3, 45]]]]], [], []]], ['loc', [null, [1, 0], [3, 47]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            // we have an additional blank option at the top\n            (0, _chai.expect)(this.$('option'), 'number of options').to.have.length(4);\n            // blank option is selected\n            (0, _chai.expect)(this.$('select').val(), 'selected option value').to.equal('');\n            // we indicate the manual override\n            (0, _chai.expect)(this.$('p').text()).to.match(/Your timezone has been automatically set to Europe\\/London/);\n        });\n\n        (0, _emberMocha.it)('triggers update action on change', function (done) {\n            var _this = this;\n\n            var update = _sinon['default'].spy();\n            this.set('update', update);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 40\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-timezone-select', [], ['availableTimezones', ['subexpr', '@mut', [['get', 'availableTimezones', ['loc', [null, [2, 35], [2, 53]]]]], [], []], 'activeTimezone', ['subexpr', '@mut', [['get', 'activeTimezone', ['loc', [null, [3, 31], [3, 45]]]]], [], []], 'update', ['subexpr', 'action', [['get', 'update', ['loc', [null, [4, 31], [4, 37]]]]], [], ['loc', [null, [4, 23], [4, 38]]]]], ['loc', [null, [1, 0], [4, 40]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('select').val('Pacific/Pago_Pago').change();\n            });\n\n            (0, _emberTestHelpersWait['default'])().then(function () {\n                (0, _chai.expect)(update.calledOnce, 'update was called once').to.be['true'];\n                (0, _chai.expect)(update.firstCall.args[0].name, 'update was passed new timezone').to.equal('Pacific/Pago_Pago');\n                done();\n            });\n        });\n\n        // TODO: mock clock service, fake the time, test we have the correct\n        // local time and it changes alongside selection changes\n        (0, _emberMocha.it)('renders local time');\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/gh-trim-focus-input-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop'], function (exports, _chai, _emberMocha, _emberRunloop) {\n\n    (0, _emberMocha.describeComponent)('gh-trim-focus-input', 'Integration: Component: gh-trim-focus-input', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('trims value on focusOut', function () {\n            var _this = this;\n\n            this.set('text', 'some random stuff    ');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 55\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-trim-focus-input', [['get', 'text', ['loc', [null, [1, 22], [1, 26]]]]], ['update', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'text', ['loc', [null, [1, 47], [1, 51]]]]], [], ['loc', [null, [1, 42], [1, 52]]]]], [], ['loc', [null, [1, 34], [1, 53]]]]], ['loc', [null, [1, 0], [1, 55]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.gh-input').trigger('focusout');\n            });\n\n            (0, _chai.expect)(this.get('text')).to.equal('some random stuff');\n        });\n\n        (0, _emberMocha.it)('does not have the autofocus attribute if not set to focus', function () {\n            this.set('text', 'some text');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 46\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-trim-focus-input', [['get', 'text', ['loc', [null, [1, 22], [1, 26]]]]], ['shouldFocus', false], ['loc', [null, [1, 0], [1, 46]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-input').attr('autofocus')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('has the autofocus attribute if set to focus', function () {\n            this.set('text', 'some text');\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 45\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-trim-focus-input', [['get', 'text', ['loc', [null, [1, 22], [1, 26]]]]], ['shouldFocus', true], ['loc', [null, [1, 0], [1, 45]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-input').attr('autofocus')).to.be.ok;\n        });\n\n        (0, _emberMocha.it)('handles undefined values', function () {\n            this.set('text', undefined);\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 45\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-trim-focus-input', [['get', 'text', ['loc', [null, [1, 22], [1, 26]]]]], ['shouldFocus', true], ['loc', [null, [1, 0], [1, 45]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-input').attr('autofocus')).to.be.ok;\n        });\n\n        (0, _emberMocha.it)('handles non-string values', function () {\n            this.set('text', 10);\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 45\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'gh-trim-focus-input', [['get', 'text', ['loc', [null, [1, 22], [1, 26]]]]], ['shouldFocus', true], ['loc', [null, [1, 0], [1, 45]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-input').val()).to.equal('10');\n        });\n    });\n});","define('ghost-admin/tests/integration/components/gh-validation-status-container-test', ['exports', 'chai', 'ember-mocha', 'ember-object', 'ember-data'], function (exports, _chai, _emberMocha, _emberObject, _emberData) {\n    var Errors = _emberData['default'].Errors;\n\n    (0, _emberMocha.describeComponent)('gh-validation-status-container', 'Integration: Component: gh-validation-status-container', {\n        integration: true\n    }, function () {\n        beforeEach(function () {\n            var testObject = _emberObject['default'].create();\n            testObject.set('name', 'Test');\n            testObject.set('hasValidated', []);\n            testObject.set('errors', Errors.create());\n\n            this.set('testObject', testObject);\n        });\n\n        (0, _emberMocha.it)('has no success/error class by default', function () {\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['false'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('has success class when valid', function () {\n            this.get('testObject.hasValidated').push('name');\n\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['true'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('has error class when invalid', function () {\n            this.get('testObject.hasValidated').push('name');\n            this.get('testObject.errors').add('name', 'has error');\n\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n            (0, _chai.expect)(this.$('.gh-test').hasClass('success')).to.be['false'];\n            (0, _chai.expect)(this.$('.gh-test').hasClass('error')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('still renders if hasValidated is undefined', function () {\n            this.set('testObject.hasValidated', undefined);\n\n            this.render(Ember.HTMLBars.template((function () {\n                var child0 = (function () {\n                    return {\n                        meta: {\n                            'fragmentReason': false,\n                            'revision': 'Ember@2.6.1',\n                            'loc': {\n                                'source': null,\n                                'start': {\n                                    'line': 2,\n                                    'column': 16\n                                },\n                                'end': {\n                                    'line': 3,\n                                    'column': 16\n                                }\n                            }\n                        },\n                        isEmpty: true,\n                        arity: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        buildFragment: function buildFragment(dom) {\n                            var el0 = dom.createDocumentFragment();\n                            return el0;\n                        },\n                        buildRenderNodes: function buildRenderNodes() {\n                            return [];\n                        },\n                        statements: [],\n                        locals: [],\n                        templates: []\n                    };\n                })();\n\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 12\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('\\n');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode('            ');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                        return morphs;\n                    },\n                    statements: [['block', 'gh-validation-status-container', [], ['class', 'gh-test', 'property', 'name', 'errors', ['subexpr', '@mut', [['get', 'testObject.errors', ['loc', [null, [2, 89], [2, 106]]]]], [], []], 'hasValidated', ['subexpr', '@mut', [['get', 'testObject.hasValidated', ['loc', [null, [2, 120], [2, 143]]]]], [], []]], 0, null, ['loc', [null, [2, 16], [3, 51]]]]],\n                    locals: [],\n                    templates: [child0]\n                };\n            })()));\n            (0, _chai.expect)(this.$('.gh-test')).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/modals/delete-subscriber-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('modals/delete-subscriber', 'Integration: Component: modals/delete-subscriber', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // Set any properties with this.set('myProperty', 'value');\n            // Handle any actions with this.on('myAction', function(val) { ... });\n            // Template block usage:\n            // this.render(hbs`\n            //   {{#modals/delete-subscriber}}\n            //     template content\n            //   {{/modals/delete-subscriber}}\n            // `);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 28\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'modals/delete-subscriber', ['loc', [null, [1, 0], [1, 28]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/modals/import-subscribers-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('modals/import-subscribers', 'Integration: Component: modals/import-subscribers', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // Set any properties with this.set('myProperty', 'value');\n            // Handle any actions with this.on('myAction', function(val) { ... });\n            // Template block usage:\n            // this.render(hbs`\n            //   {{#modals/import-subscribers}}\n            //     template content\n            //   {{/modals/import-subscribers}}\n            // `);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 29\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'modals/import-subscribers', ['loc', [null, [1, 0], [1, 29]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/modals/new-subscriber-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('modals/new-subscriber', 'Integration: Component: modals/new-subscriber', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // Set any properties with this.set('myProperty', 'value');\n            // Handle any actions with this.on('myAction', function(val) { ... });\n            // Template block usage:\n            // this.render(hbs`\n            //   {{#modals/new-subscriber}}\n            //     template content\n            //   {{/modals/new-subscriber}}\n            // `);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 25\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'modals/new-subscriber', ['loc', [null, [1, 0], [1, 25]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/modals/upload-theme-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('modals/upload-theme', 'Integration: Component: modals/upload-theme', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // Set any properties with this.set('myProperty', 'value');\n            // Handle any actions with this.on('myAction', function(val) { ... });\n            // Template block usage:\n            // this.render(hbs`\n            //   {{#modals/upload-theme}}\n            //     template content\n            //   {{/modals/upload-theme}}\n            // `);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 23\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['content', 'modals/upload-theme', ['loc', [null, [1, 0], [1, 23]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n            (0, _chai.expect)(this.$()).to.have.length(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/components/transfer-owner-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'rsvp', 'sinon'], function (exports, _chai, _emberMocha, _emberRunloop, _rsvp, _sinon) {\n\n    (0, _emberMocha.describeComponent)('transfer-owner', 'Integration: Component: modals/transfer-owner', {\n        integration: true\n    }, function () {\n        (0, _emberMocha.it)('triggers confirm action', function () {\n            var _this = this;\n\n            var confirm = _sinon['default'].stub();\n            var closeModal = _sinon['default'].spy();\n\n            confirm.returns(_rsvp['default'].resolve({}));\n\n            this.on('confirm', confirm);\n            this.on('closeModal', closeModal);\n\n            this.render(Ember.HTMLBars.template((function () {\n                return {\n                    meta: {\n                        'fragmentReason': {\n                            'name': 'missing-wrapper',\n                            'problems': ['wrong-type']\n                        },\n                        'revision': 'Ember@2.6.1',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 1,\n                                'column': 0\n                            },\n                            'end': {\n                                'line': 1,\n                                'column': 85\n                            }\n                        }\n                    },\n                    isEmpty: false,\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createComment('');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                        var morphs = new Array(1);\n                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                        dom.insertBoundary(fragment, 0);\n                        dom.insertBoundary(fragment, null);\n                        return morphs;\n                    },\n                    statements: [['inline', 'modals/transfer-owner', [], ['confirm', ['subexpr', 'action', ['confirm'], [], ['loc', [null, [1, 32], [1, 50]]]], 'closeModal', ['subexpr', 'action', ['closeModal'], [], ['loc', [null, [1, 62], [1, 83]]]]], ['loc', [null, [1, 0], [1, 85]]]]],\n                    locals: [],\n                    templates: []\n                };\n            })()));\n\n            (0, _emberRunloop['default'])(function () {\n                _this.$('.btn.btn-red').click();\n            });\n\n            (0, _chai.expect)(confirm.calledOnce, 'confirm called').to.be['true'];\n            (0, _chai.expect)(closeModal.calledOnce, 'closeModal called').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/services/ajax-test', ['exports', 'chai', 'ember-mocha', 'pretender', 'ember-ajax/errors', 'ghost-admin/services/ajax', 'ghost-admin/config/environment'], function (exports, _chai, _emberMocha, _pretender, _emberAjaxErrors, _ghostAdminServicesAjax, _ghostAdminConfigEnvironment) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    function stubAjaxEndpoint(server) {\n        var response = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n        var code = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n        server.get('/test/', function () {\n            return [code, { 'Content-Type': 'application/json' }, JSON.stringify(response)];\n        });\n    }\n\n    (0, _emberMocha.describeModule)('service:ajax', 'Integration: Service: ajax', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('adds Ghost version header to requests', function (done) {\n            var version = _ghostAdminConfigEnvironment['default'].APP.version;\n\n            var ajax = this.subject();\n\n            stubAjaxEndpoint(server, {});\n\n            ajax.request('/test/').then(function () {\n                var _server$handledRequests = _slicedToArray(server.handledRequests, 1);\n\n                var request = _server$handledRequests[0];\n\n                (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('correctly parses single message response text', function (done) {\n            var error = { message: 'Test Error' };\n            stubAjaxEndpoint(server, error, 500);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true']();\n            })['catch'](function (error) {\n                (0, _chai.expect)(error.errors).to.equal('Test Error');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('correctly parses single error response text', function (done) {\n            var error = { error: 'Test Error' };\n            stubAjaxEndpoint(server, error, 500);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true']();\n            })['catch'](function (error) {\n                (0, _chai.expect)(error.errors).to.equal('Test Error');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('correctly parses multiple error messages', function (done) {\n            var error = { errors: ['First Error', 'Second Error'] };\n            stubAjaxEndpoint(server, error, 500);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true']();\n            })['catch'](function (error) {\n                (0, _chai.expect)(error.errors).to.deep.equal([{ message: 'First Error' }, { message: 'Second Error' }]);\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('returns default error object for non built-in error', function (done) {\n            stubAjaxEndpoint(server, {}, 500);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true'];\n            })['catch'](function (error) {\n                (0, _chai.expect)((0, _emberAjaxErrors.isAjaxError)(error)).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles error checking for built-in errors', function (done) {\n            stubAjaxEndpoint(server, '', 401);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true'];\n            })['catch'](function (error) {\n                (0, _chai.expect)((0, _emberAjaxErrors.isUnauthorizedError)(error)).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles error checking for VersionMismatchError', function (done) {\n            server.get('/test/', function () {\n                return [400, { 'Content-Type': 'application/json' }, JSON.stringify({\n                    errors: [{\n                        errorType: 'VersionMismatchError',\n                        statusCode: 400\n                    }]\n                })];\n            });\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true'];\n            })['catch'](function (error) {\n                (0, _chai.expect)((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles error checking for RequestEntityTooLargeError on 413 errors', function (done) {\n            stubAjaxEndpoint(server, {}, 413);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true'];\n            })['catch'](function (error) {\n                (0, _chai.expect)((0, _ghostAdminServicesAjax.isRequestEntityTooLargeError)(error)).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('handles error checking for UnsupportedMediaTypeError on 415 errors', function (done) {\n            stubAjaxEndpoint(server, {}, 415);\n\n            var ajax = this.subject();\n\n            ajax.request('/test/').then(function () {\n                (0, _chai.expect)(false).to.be['true'];\n            })['catch'](function (error) {\n                (0, _chai.expect)((0, _ghostAdminServicesAjax.isUnsupportedMediaTypeError)(error)).to.be['true'];\n                done();\n            });\n        });\n    });\n});","define('ghost-admin/tests/integration/services/config-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    function stubAvailableTimezonesEndpoint(server) {\n        server.get('/ghost/api/v0.1/configuration/timezones', function (request) {\n            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({\n                configuration: [{\n                    timezones: [{\n                        label: '(GMT -11:00) Midway Island, Samoa',\n                        name: 'Pacific/Pago_Pago',\n                        offset: -660\n                    }, {\n                        label: '(GMT) Greenwich Mean Time : Dublin, Edinburgh, London',\n                        name: 'Europe/Dublin',\n                        offset: 0\n                    }]\n                }]\n            })];\n        });\n    }\n\n    (0, _emberMocha.describeModule)('service:config', 'Integration: Service: config', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('returns a list of timezones in the expected format', function (done) {\n            var service = this.subject();\n            stubAvailableTimezonesEndpoint(server);\n\n            service.get('availableTimezones').then(function (timezones) {\n                (0, _chai.expect)(timezones.length).to.equal(2);\n                (0, _chai.expect)(timezones[0].name).to.equal('Pacific/Pago_Pago');\n                (0, _chai.expect)(timezones[0].label).to.equal('(GMT -11:00) Midway Island, Samoa');\n                (0, _chai.expect)(timezones[1].name).to.equal('Europe/Dublin');\n                (0, _chai.expect)(timezones[1].label).to.equal('(GMT) Greenwich Mean Time : Dublin, Edinburgh, London');\n                done();\n            });\n        });\n    });\n});","define('ghost-admin/tests/integration/services/feature-test', ['exports', 'ember-mocha', 'pretender', 'ember-test-helpers/wait', 'ghost-admin/services/feature', 'ember', 'ember-runloop', 'ember-platform', 'rsvp', 'ghost-admin/tests/helpers/adapter-error'], function (exports, _emberMocha, _pretender, _emberTestHelpersWait, _ghostAdminServicesFeature, _ember, _emberRunloop, _emberPlatform, _rsvp, _ghostAdminTestsHelpersAdapterError) {\n    var EmberError = _ember['default'].Error;\n\n    function stubSettings(server, labs) {\n        var validSave = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n        var validSettings = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n        var settings = [{\n            id: '1',\n            type: 'blog',\n            key: 'labs',\n            value: JSON.stringify(labs)\n        }];\n\n        if (validSettings) {\n            settings.push({\n                id: '2',\n                type: 'blog',\n                key: 'postsPerPage',\n                value: 1\n            });\n        }\n\n        server.get('/ghost/api/v0.1/settings/', function () {\n            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ settings: settings })];\n        });\n\n        server.put('/ghost/api/v0.1/settings/', function (request) {\n            var statusCode = validSave ? 200 : 400;\n            var response = validSave ? request.requestBody : JSON.stringify({\n                errors: [{\n                    message: 'Test Error'\n                }]\n            });\n\n            return [statusCode, { 'Content-Type': 'application/json' }, response];\n        });\n    }\n\n    function addTestFlag() {\n        _ghostAdminServicesFeature['default'].reopen({\n            testFlag: (0, _ghostAdminServicesFeature.feature)('testFlag')\n        });\n    }\n\n    (0, _emberMocha.describeModule)('service:feature', 'Integration: Service: feature', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads labs settings correctly', function (done) {\n            stubSettings(server, { testFlag: true });\n            addTestFlag();\n\n            var service = this.subject();\n\n            service.fetch().then(function () {\n                expect(service.get('testFlag')).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('returns false for set flag with config false and labs false', function (done) {\n            stubSettings(server, { testFlag: false });\n            addTestFlag();\n\n            var service = this.subject();\n            service.get('config').set('testFlag', false);\n\n            service.fetch().then(function () {\n                expect(service.get('labs.testFlag')).to.be['false'];\n                expect(service.get('testFlag')).to.be['false'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('returns true for set flag with config true and labs false', function (done) {\n            stubSettings(server, { testFlag: false });\n            addTestFlag();\n\n            var service = this.subject();\n            service.get('config').set('testFlag', true);\n\n            service.fetch().then(function () {\n                expect(service.get('labs.testFlag')).to.be['false'];\n                expect(service.get('testFlag')).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('returns true for set flag with config false and labs true', function (done) {\n            stubSettings(server, { testFlag: true });\n            addTestFlag();\n\n            var service = this.subject();\n            service.get('config').set('testFlag', false);\n\n            service.fetch().then(function () {\n                expect(service.get('labs.testFlag')).to.be['true'];\n                expect(service.get('testFlag')).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('returns true for set flag with config true and labs true', function (done) {\n            stubSettings(server, { testFlag: true });\n            addTestFlag();\n\n            var service = this.subject();\n            service.get('config').set('testFlag', true);\n\n            service.fetch().then(function () {\n                expect(service.get('labs.testFlag')).to.be['true'];\n                expect(service.get('testFlag')).to.be['true'];\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('saves correctly', function (done) {\n            stubSettings(server, { testFlag: false });\n            addTestFlag();\n\n            var service = this.subject();\n\n            service.fetch().then(function () {\n                expect(service.get('testFlag')).to.be['false'];\n\n                (0, _emberRunloop['default'])(function () {\n                    service.set('testFlag', true);\n                });\n\n                return (0, _emberTestHelpersWait['default'])().then(function () {\n                    expect(server.handlers[1].numberOfCalls).to.equal(1);\n                    expect(service.get('testFlag')).to.be['true'];\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('notifies for server errors', function (done) {\n            stubSettings(server, { testFlag: false }, false);\n            addTestFlag();\n\n            var service = this.subject();\n\n            service.fetch().then(function () {\n                expect(service.get('testFlag')).to.be['false'];\n\n                (0, _emberRunloop['default'])(function () {\n                    service.set('testFlag', true);\n                });\n\n                return (0, _emberTestHelpersWait['default'])().then(function () {\n                    expect(server.handlers[1].numberOfCalls, 'PUT call is made').to.equal(1);\n\n                    expect(service.get('notifications.alerts').length, 'number of alerts shown').to.equal(1);\n\n                    expect(service.get('testFlag')).to.be['false'];\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('notifies for validation errors', function (done) {\n            stubSettings(server, { testFlag: false }, true, false);\n            addTestFlag();\n\n            var service = this.subject();\n\n            service.fetch().then(function () {\n                expect(service.get('testFlag')).to.be['false'];\n\n                (0, _emberRunloop['default'])(function () {\n                    expect(function () {\n                        service.set('testFlag', true);\n                    }, EmberError, 'threw validation error');\n                });\n\n                return (0, _emberTestHelpersWait['default'])().then(function () {\n                    // ensure validation is happening before the API is hit\n                    expect(server.handlers[1].numberOfCalls).to.equal(0);\n                    expect(service.get('testFlag')).to.be['false'];\n                    done();\n                });\n            });\n        });\n    });\n});","define('ghost-admin/tests/integration/services/lazy-loader-test', ['exports', 'chai', 'ember-mocha', 'pretender', 'rsvp', 'jquery'], function (exports, _chai, _emberMocha, _pretender, _rsvp, _jquery) {\n\n    (0, _emberMocha.describeModule)('service:lazy-loader', 'Integration: Service: lazy-loader', { integration: true }, function () {\n        var server = undefined;\n        var ghostPaths = {\n            adminRoot: '/assets/'\n        };\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('loads a script correctly and only once', function (done) {\n            var subject = this.subject({\n                ghostPaths: ghostPaths,\n                scriptPromises: {},\n                testing: false\n            });\n\n            server.get('/assets/test.js', function (_ref) {\n                var requestHeaders = _ref.requestHeaders;\n\n                (0, _chai.expect)(requestHeaders.Accept).to.match(/text\\/javascript/);\n\n                return [200, { 'Content-Type': 'text/javascript' }, 'window.testLoadScript = \\'testvalue\\''];\n            });\n\n            subject.loadScript('test-script', 'test.js').then(function () {\n                (0, _chai.expect)(subject.get('scriptPromises.test-script')).to.exist;\n                (0, _chai.expect)(window.testLoadScript).to.equal('testvalue');\n                (0, _chai.expect)(server.handlers[0].numberOfCalls).to.equal(1);\n\n                return subject.loadScript('test-script', 'test.js');\n            }).then(function () {\n                (0, _chai.expect)(server.handlers[0].numberOfCalls).to.equal(1);\n\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('loads styles correctly', function () {\n            var subject = this.subject({\n                ghostPaths: ghostPaths,\n                testing: false\n            });\n\n            subject.loadStyle('testing', 'style.css');\n\n            (0, _chai.expect)((0, _jquery['default'])('#testing-styles').length).to.equal(1);\n            (0, _chai.expect)((0, _jquery['default'])('#testing-styles').attr('href')).to.equal('/assets/style.css');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/integration/services/slug-generator-test', ['exports', 'chai', 'ember-mocha', 'pretender', 'ember-string'], function (exports, _chai, _emberMocha, _pretender, _emberString) {\n\n    function stubSlugEndpoint(server, type, slug) {\n        server.get('/ghost/api/v0.1/slugs/:type/:slug/', function (request) {\n            (0, _chai.expect)(request.params.type).to.equal(type);\n            (0, _chai.expect)(request.params.slug).to.equal(slug);\n\n            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ slugs: [{ slug: (0, _emberString.dasherize)(slug) }] })];\n        });\n    }\n\n    (0, _emberMocha.describeModule)('service:slug-generator', 'Integration: Service: slug-generator', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('returns empty if no slug is provided', function (done) {\n            var service = this.subject();\n\n            service.generateSlug('post', '').then(function (slug) {\n                (0, _chai.expect)(slug).to.equal('');\n                done();\n            });\n        });\n\n        (0, _emberMocha.it)('calls correct endpoint and returns correct data', function (done) {\n            var rawSlug = 'a test post';\n            stubSlugEndpoint(server, 'post', rawSlug);\n\n            var service = this.subject();\n\n            service.generateSlug('post', rawSlug).then(function (slug) {\n                (0, _chai.expect)(slug).to.equal((0, _emberString.dasherize)(rawSlug));\n                done();\n            });\n        });\n    });\n});","define('ghost-admin/tests/integration/services/store-test', ['exports', 'chai', 'ember-mocha', 'pretender', 'ghost-admin/config/environment'], function (exports, _chai, _emberMocha, _pretender, _ghostAdminConfigEnvironment) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _emberMocha.describeModule)('service:store', 'Integration: Service: store', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('adds Ghost version header to requests', function (done) {\n            var version = _ghostAdminConfigEnvironment['default'].APP.version;\n\n            var store = this.subject();\n\n            server.get('/ghost/api/v0.1/posts/1/', function () {\n                return [404, { 'Content-Type': 'application/json' }, JSON.stringify({})];\n            });\n\n            store.find('post', 1)['catch'](function () {\n                var _server$handledRequests = _slicedToArray(server.handledRequests, 1);\n\n                var request = _server$handledRequests[0];\n\n                (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n                done();\n            });\n        });\n    });\n});","define('ghost-admin/tests/integration/services/time-zone-test', ['exports', 'chai', 'ember-mocha', 'pretender'], function (exports, _chai, _emberMocha, _pretender) {\n\n    function settingsStub(server) {\n        var settings = [{\n            id: '1',\n            type: 'blog',\n            key: 'activeTimezone',\n            value: 'Africa/Cairo'\n        }];\n\n        server.get('/ghost/api/v0.1/settings/', function () {\n            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ settings: settings })];\n        });\n    }\n\n    (0, _emberMocha.describeModule)('service:time-zone', 'Integration: Service: time-zone', {\n        integration: true\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('should return the blogs timezone', function (done) {\n            var service = this.subject();\n\n            settingsStub(server);\n\n            service.get('blogTimezone').then(function (blogTimezone) {\n                (0, _chai.expect)(blogTimezone).to.equal('Africa/Cairo');\n                done();\n            });\n        });\n    });\n});","define('ghost-admin/tests/test-helper', ['exports', 'ghost-admin/tests/helpers/resolver', 'ember-mocha'], function (exports, _ghostAdminTestsHelpersResolver, _emberMocha) {\n\n    (0, _emberMocha.setResolver)(_ghostAdminTestsHelpersResolver['default']);\n\n    /* jshint ignore:start */\n    mocha.setup({\n        timeout: 15000,\n        slow: 500\n    });\n    /* jshint ignore:end */\n});","define('ghost-admin/tests/unit/components/gh-alert-test', ['exports', 'chai', 'ember-mocha', 'sinon'], function (exports, _chai, _emberMocha, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-alert', 'Unit: Component: gh-alert', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('closes notification through notifications service', function () {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            this.$().find('button').click();\n\n            (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-app-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-app', 'Unit: Component: gh-app', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-content-preview-content-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-content-preview-content', 'Unit: Component: gh-content-preview-content', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-editor-save-button-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-editor-save-button', 'Unit: Component: gh-editor-save-button', {\n        unit: true,\n        needs: ['component:gh-dropdown-button', 'component:gh-dropdown', 'component:gh-spin-button', 'service:dropdown']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-editor-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-editor', 'Unit: Component: gh-editor', {\n        unit: true,\n        // specify the other units that are required for this test\n        needs: ['component:gh-ed-editor', 'component:gh-ed-preview', 'helper:gh-count-words', 'helper:route-action', 'service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-infinite-scroll-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-infinite-scroll', 'Unit: Component: gh-infinite-scroll', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-navitem-url-input-test', ['exports', 'ember-runloop', 'chai', 'ember-mocha'], function (exports, _emberRunloop, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-navitem-url-input', 'Unit: Component: gh-navitem-url-input', {\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('identifies a URL as the base URL', function () {\n            var component = this.subject({\n                url: '',\n                baseUrl: 'http://example.com/'\n            });\n\n            this.render();\n\n            (0, _emberRunloop['default'])(function () {\n                component.set('value', 'http://example.com/');\n            });\n\n            (0, _chai.expect)(component.get('isBaseUrl')).to.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                component.set('value', 'http://example.com/go/');\n            });\n\n            (0, _chai.expect)(component.get('isBaseUrl')).to.not.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-notification-test', ['exports', 'chai', 'ember-mocha', 'sinon'], function (exports, _chai, _emberMocha, _sinon) {\n\n    (0, _emberMocha.describeComponent)('gh-notification', 'Unit: Component: gh-notification', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('closes notification through notifications service', function () {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            this.$().find('button').click();\n\n            (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('closes notification when animationend event is triggered', function (done) {\n            var component = this.subject();\n            var notifications = {};\n            var notification = { message: 'Test close', type: 'success' };\n\n            notifications.closeNotification = _sinon['default'].spy();\n            component.set('notifications', notifications);\n            component.set('message', notification);\n\n            // shorten the animation delay to speed up test\n            this.$().css('animation-delay', '0.1s');\n            setTimeout(function () {\n                (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be['true'];\n                done();\n            }, 150);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-posts-list-item-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-posts-list-item', 'Unit: Component: gh-posts-list-item', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-select-native-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-select-native', 'Unit: Component: gh-select-native', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-selectize-test', ['exports', 'chai', 'ember-mocha', 'ember-array/utils', 'ember-runloop'], function (exports, _chai, _emberMocha, _emberArrayUtils, _emberRunloop) {\n\n    (0, _emberMocha.describeComponent)('gh-selectize', 'Unit: Component: gh-selectize', {\n        // Specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar'],\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('re-orders selection when selectize order is changed', function () {\n            var component = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                component.set('content', (0, _emberArrayUtils.A)(['item 1', 'item 2', 'item 3']));\n                component.set('selection', (0, _emberArrayUtils.A)(['item 2', 'item 3']));\n                component.set('multiple', true);\n            });\n\n            this.render();\n\n            (0, _emberRunloop['default'])(function () {\n                component._selectize.setValue(['item 3', 'item 2']);\n            });\n\n            (0, _chai.expect)(component.get('value').toArray(), 'component value').to.deep.equal(['item 3', 'item 2']);\n            (0, _chai.expect)(component.get('selection').toArray(), 'component selection').to.deep.equal(['item 3', 'item 2']);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-spin-button-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-spin-button', 'Unit: Component: gh-spin-button', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-upgrade-notification-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-upgrade-notification', 'GhUpgradeNotificationComponent', {\n        needs: ['helper:gh-format-html']\n    }, function () {\n        beforeEach(function () {\n            var upgradeMessage = { 'content': 'Ghost 10.02.91 is available! Hot Damn. <a href=\"http://support.ghost.org/how-to-upgrade/\" target=\"_blank\">Click here</a> to upgrade.' };\n            this.subject().set('upgradeNotification', upgradeMessage);\n        });\n\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n\n            (0, _chai.expect)(this.$().prop('tagName')).to.equal('SECTION');\n            (0, _chai.expect)(this.$().hasClass('gh-upgrade-notification')).to.be['true'];\n            // caja tools sanitize target='_blank' attribute\n            (0, _chai.expect)(this.$().html()).to.contain('Hot Damn. <a href=\"http://support.ghost.org/how-to-upgrade/\">Click here</a>');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-url-preview_test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-url-preview', 'Unit: Component: gh-url-preview', {\n        unit: true\n    }, function () {\n        (0, _emberMocha.it)('generates the correct preview URL with a prefix', function () {\n            var component = this.subject({\n                prefix: 'tag',\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\n        });\n\n        (0, _emberMocha.it)('generates the correct preview URL without a prefix', function () {\n            var component = this.subject({\n                slug: 'test-slug',\n                tagName: 'p',\n                classNames: 'test-class',\n\n                config: { blogUrl: 'http://my-ghost-blog.com' }\n            });\n\n            this.render();\n\n            expect(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\n        });\n    });\n});","define('ghost-admin/tests/unit/components/gh-user-active-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-user-active', 'Unit: Component: gh-user-active', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/components/gh-user-invited-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeComponent)('gh-user-invited', 'Unit: Component: gh-user-invited', {\n        unit: true\n        // specify the other units that are required for this test\n        // needs: ['component:foo', 'helper:bar']\n    }, function () {\n        (0, _emberMocha.it)('renders', function () {\n            // creates the component instance\n            var component = this.subject();\n\n            (0, _chai.expect)(component._state).to.equal('preRender');\n\n            // renders the component on the page\n            this.render();\n            (0, _chai.expect)(component._state).to.equal('inDOM');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/controllers/post-settings-menu-test', ['exports', 'ember-runloop', 'rsvp', 'ember-object', 'ember-mocha', 'sinon'], function (exports, _emberRunloop, _rsvp, _emberObject, _emberMocha, _sinon) {\n\n    function K() {\n        return this;\n    }\n\n    (0, _emberMocha.describeModule)('controller:post-settings-menu', 'Unit: Controller: post-settings-menu', {\n        needs: ['controller:application', 'service:notifications', 'service:slug-generator', 'service:timeZone']\n    }, function () {\n        (0, _emberMocha.it)('slugValue is one-way bound to model.slug', function () {\n            var controller = this.subject({\n                model: _emberObject['default'].create({\n                    slug: 'a-slug'\n                })\n            });\n\n            expect(controller.get('model.slug')).to.equal('a-slug');\n            expect(controller.get('slugValue')).to.equal('a-slug');\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('model.slug', 'changed-slug');\n\n                expect(controller.get('slugValue')).to.equal('changed-slug');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('slugValue', 'changed-directly');\n\n                expect(controller.get('model.slug')).to.equal('changed-slug');\n                expect(controller.get('slugValue')).to.equal('changed-directly');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.slug', 'should-update');\n\n                expect(controller.get('slugValue')).to.equal('should-update');\n            });\n        });\n\n        (0, _emberMocha.it)('metaTitleScratch is one-way bound to model.metaTitle', function () {\n            var controller = this.subject({\n                model: _emberObject['default'].create({\n                    metaTitle: 'a title'\n                })\n            });\n\n            expect(controller.get('model.metaTitle')).to.equal('a title');\n            expect(controller.get('metaTitleScratch')).to.equal('a title');\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('model.metaTitle', 'a different title');\n\n                expect(controller.get('metaTitleScratch')).to.equal('a different title');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('metaTitleScratch', 'changed directly');\n\n                expect(controller.get('model.metaTitle')).to.equal('a different title');\n                expect(controller.get('metaTitleScratch')).to.equal('changed directly');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.metaTitle', 'should update');\n\n                expect(controller.get('metaTitleScratch')).to.equal('should update');\n            });\n        });\n\n        (0, _emberMocha.it)('metaDescriptionScratch is one-way bound to model.metaDescription', function () {\n            var controller = this.subject({\n                model: _emberObject['default'].create({\n                    metaDescription: 'a description'\n                })\n            });\n\n            expect(controller.get('model.metaDescription')).to.equal('a description');\n            expect(controller.get('metaDescriptionScratch')).to.equal('a description');\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('model.metaDescription', 'a different description');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('a different description');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                controller.set('metaDescriptionScratch', 'changed directly');\n\n                expect(controller.get('model.metaDescription')).to.equal('a different description');\n                expect(controller.get('metaDescriptionScratch')).to.equal('changed directly');\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                // test that the one-way binding is still in place\n                controller.set('model.metaDescription', 'should update');\n\n                expect(controller.get('metaDescriptionScratch')).to.equal('should update');\n            });\n        });\n\n        describe('seoTitle', function () {\n            (0, _emberMocha.it)('should be the metaTitle if one exists', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        metaTitle: 'a meta-title',\n                        titleScratch: 'should not be used'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            (0, _emberMocha.it)('should default to the title if an explicit meta-title does not exist', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        titleScratch: 'should be the meta-title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('should be the meta-title');\n            });\n\n            (0, _emberMocha.it)('should be the metaTitle if both title and metaTitle exist', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        metaTitle: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n            });\n\n            (0, _emberMocha.it)('should revert to the title if explicit metaTitle is removed', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        metaTitle: 'a meta-title',\n                        titleScratch: 'a title'\n                    })\n                });\n\n                expect(controller.get('seoTitle')).to.equal('a meta-title');\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('model.metaTitle', '');\n\n                    expect(controller.get('seoTitle')).to.equal('a title');\n                });\n            });\n\n            (0, _emberMocha.it)('should truncate to 70 characters with an appended ellipsis', function () {\n                var longTitle = new Array(100).join('a');\n                var controller = this.subject({\n                    model: _emberObject['default'].create()\n                });\n\n                expect(longTitle.length).to.equal(99);\n\n                (0, _emberRunloop['default'])(function () {\n                    var expected = longTitle.substr(0, 70) + '&hellip;';\n\n                    controller.set('metaTitleScratch', longTitle);\n\n                    expect(controller.get('seoTitle').toString().length).to.equal(78);\n                    expect(controller.get('seoTitle').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoDescription', function () {\n            (0, _emberMocha.it)('should be the metaDescription if one exists', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        metaDescription: 'a description'\n                    })\n                });\n\n                expect(controller.get('seoDescription')).to.equal('a description');\n            });\n\n            _emberMocha.it.skip('should be generated from the rendered markdown if not explicitly set', function () {\n                // can't test right now because the rendered markdown is being pulled\n                // from the DOM via jquery\n            });\n\n            (0, _emberMocha.it)('should truncate to 156 characters with an appended ellipsis', function () {\n                var longDescription = new Array(200).join('a');\n                var controller = this.subject({\n                    model: _emberObject['default'].create()\n                });\n\n                expect(longDescription.length).to.equal(199);\n\n                (0, _emberRunloop['default'])(function () {\n                    var expected = longDescription.substr(0, 156) + '&hellip;';\n\n                    controller.set('metaDescriptionScratch', longDescription);\n\n                    expect(controller.get('seoDescription').toString().length).to.equal(164);\n                    expect(controller.get('seoDescription').toString()).to.equal(expected);\n                });\n            });\n        });\n\n        describe('seoURL', function () {\n            (0, _emberMocha.it)('should be the URL of the blog if no post slug exists', function () {\n                var controller = this.subject({\n                    config: _emberObject['default'].create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _emberObject['default'].create()\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/');\n            });\n\n            (0, _emberMocha.it)('should be the URL of the blog plus the post slug', function () {\n                var controller = this.subject({\n                    config: _emberObject['default'].create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _emberObject['default'].create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n            });\n\n            (0, _emberMocha.it)('should update when the post slug changes', function () {\n                var controller = this.subject({\n                    config: _emberObject['default'].create({ blogUrl: 'http://my-ghost-blog.com' }),\n                    model: _emberObject['default'].create({ slug: 'post-slug' })\n                });\n\n                expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('model.slug', 'changed-slug');\n\n                    expect(controller.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\n                });\n            });\n\n            (0, _emberMocha.it)('should truncate a long URL to 70 characters with an appended ellipsis', function () {\n                var blogURL = 'http://my-ghost-blog.com';\n                var longSlug = new Array(75).join('a');\n                var controller = this.subject({\n                    config: _emberObject['default'].create({ blogUrl: blogURL }),\n                    model: _emberObject['default'].create({ slug: longSlug })\n                });\n                var expected = undefined;\n\n                expect(longSlug.length).to.equal(74);\n\n                expected = blogURL + '/' + longSlug + '/';\n                expected = expected.substr(0, 70) + '&hellip;';\n\n                expect(controller.get('seoURL').toString().length).to.equal(78);\n                expect(controller.get('seoURL').toString()).to.equal(expected);\n            });\n        });\n\n        describe('togglePage', function () {\n            (0, _emberMocha.it)('should toggle the page property', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        page: false,\n                        isNew: true\n                    })\n                });\n\n                expect(controller.get('model.page')).to.not.be.ok;\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        page: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _rsvp['default'].resolve();\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        page: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _rsvp['default'].resolve();\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('togglePage');\n\n                    expect(controller.get('model.page')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('toggleFeatured', function () {\n            (0, _emberMocha.it)('should toggle the featured property', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        featured: false,\n                        isNew: true\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post if it is still new', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        featured: false,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _rsvp['default'].resolve();\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.not.be.ok;\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post if it is not new', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        featured: false,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                            return _rsvp['default'].resolve();\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.send('toggleFeatured');\n\n                    expect(controller.get('model.featured')).to.be.ok;\n                    expect(controller.get('model.saved')).to.equal(1);\n                });\n            });\n        });\n\n        describe('updateSlug', function () {\n            (0, _emberMocha.it)('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\n                var controller = this.subject({\n                    model: _emberObject['default'].create({\n                        slug: 'slug'\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    // unchanged\n                    controller.set('slugValue', 'slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    // unchanged after trim\n                    controller.set('slugValue', 'slug  ');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    // blank\n                    controller.set('slugValue', '');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    expect(controller.get('model.slug')).to.equal('slug');\n                    expect(controller.get('slugValue')).to.equal('slug');\n                });\n            });\n\n            (0, _emberMocha.it)('should not set a new slug if the server-generated slug matches existing slug', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            var promise = _rsvp['default'].resolve(str.split('#')[0]);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever'\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('slugValue', 'whatever#slug');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should not set a new slug if the only change is to the appended increment value', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            var sanitizedStr = str.replace(/[^a-zA-Z]/g, '');\n                            var promise = _rsvp['default'].resolve(sanitizedStr + '-2');\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever'\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('slugValue', 'whatever!');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should set the slug if the new slug is different', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            var promise = _rsvp['default'].resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever',\n                        save: K\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should save the post when the slug changes and the post is not new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            var promise = _rsvp['default'].resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: false,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(1);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _emberMocha.it)('should not save the post when the slug changes and the post is new', function (done) {\n                var controller = this.subject({\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            var promise = _rsvp['default'].resolve(str);\n                            this.set('lastPromise', promise);\n                            return promise;\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever',\n                        saved: 0,\n                        isNew: true,\n                        save: function save() {\n                            this.incrementProperty('saved');\n                        }\n                    })\n                });\n\n                (0, _emberRunloop['default'])(function () {\n                    controller.set('slugValue', 'changed');\n                    controller.send('updateSlug', controller.get('slugValue'));\n\n                    _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {\n                        expect(controller.get('model.slug')).to.equal('changed');\n                        expect(controller.get('model.saved')).to.equal(0);\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n    });\n});\n/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */","define('ghost-admin/tests/unit/controllers/settings/general-test', ['exports', 'ember', 'ember-mocha'], function (exports, _ember, _emberMocha) {\n    var run = _ember['default'].run;\n    var EmberObject = _ember['default'].Object;\n\n    (0, _emberMocha.describeModule)('controller:settings/general', 'Unit: Controller: settings/general', {\n        needs: ['service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('isDatedPermalinks should be correct', function () {\n            var controller = this.subject({\n                model: EmberObject.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            expect(controller.get('isDatedPermalinks')).to.be.ok;\n\n            run(function () {\n                controller.set('model.permalinks', '/:slug/');\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('setting isDatedPermalinks should switch between dated and slug', function () {\n            var controller = this.subject({\n                model: EmberObject.create({\n                    permalinks: '/:year/:month/:day/:slug/'\n                })\n            });\n\n            run(function () {\n                controller.set('isDatedPermalinks', false);\n\n                expect(controller.get('isDatedPermalinks')).to.not.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:slug/');\n            });\n\n            run(function () {\n                controller.set('isDatedPermalinks', true);\n\n                expect(controller.get('isDatedPermalinks')).to.be.ok;\n                expect(controller.get('model.permalinks')).to.equal('/:year/:month/:day/:slug/');\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/controllers/settings/navigation-test', ['exports', 'chai', 'ember-mocha', 'ember', 'ghost-admin/models/navigation-item'], function (exports, _chai, _emberMocha, _ember, _ghostAdminModelsNavigationItem) {\n    var run = _ember['default'].run;\n    var EmberObject = _ember['default'].Object;\n\n    var navSettingJSON = '[\\n    {\"label\":\"Home\",\"url\":\"/\"},\\n    {\"label\":\"JS Test\",\"url\":\"javascript:alert(\\'hello\\');\"},\\n    {\"label\":\"About\",\"url\":\"/about\"},\\n    {\"label\":\"Sub Folder\",\"url\":\"/blah/blah\"},\\n    {\"label\":\"Telephone\",\"url\":\"tel:01234-567890\"},\\n    {\"label\":\"Mailto\",\"url\":\"mailto:test@example.com\"},\\n    {\"label\":\"External\",\"url\":\"https://example.com/testing?query=test#anchor\"},\\n    {\"label\":\"No Protocol\",\"url\":\"//example.com\"}\\n]';\n\n    (0, _emberMocha.describeModule)('controller:settings/navigation', 'Unit: Controller: settings/navigation', {\n        // Specify the other units that are required for this test.\n        needs: ['service:config', 'service:notifications', 'model:navigation-item', 'service:ajax', 'service:ghostPaths', 'service:upgrade-status']\n    }, function () {\n        (0, _emberMocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n            var ctrl = this.subject();\n            ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n            (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n        });\n\n        (0, _emberMocha.it)('init: creates a new navigation item', function () {\n            var ctrl = this.subject();\n\n            run(function () {\n                (0, _chai.expect)(ctrl.get('newNavItem')).to.exist;\n                (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be['true'];\n            });\n        });\n\n        (0, _emberMocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n            var ctrl = this.subject();\n            ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n            (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n        });\n\n        (0, _emberMocha.it)('save: validates nav items', function (done) {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/' }), _ghostAdminModelsNavigationItem['default'].create({ label: '', url: '/second' }), _ghostAdminModelsNavigationItem['default'].create({ label: 'Third', url: '' })] }));\n                // blank item won't get added because the last item is incomplete\n                (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(3);\n\n                ctrl.save().then(function passedValidation() {\n                    (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n                    done();\n                })['catch'](function failedValidation() {\n                    var navItems = ctrl.get('model.navigation');\n                    (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n                    (0, _chai.expect)(navItems[1].get('errors.firstObject.attribute')).to.equal('label');\n                    (0, _chai.expect)(navItems[2].get('errors.firstObject.attribute')).to.equal('url');\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('save: ignores blank last item when saving', function (done) {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/' }), _ghostAdminModelsNavigationItem['default'].create({ label: '', url: '' })] }));\n\n                (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(2);\n\n                ctrl.save().then(function passedValidation() {\n                    (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n                    done();\n                })['catch'](function failedValidation() {\n                    var navItems = ctrl.get('model.navigation');\n                    (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n                    done();\n                });\n            });\n        });\n\n        (0, _emberMocha.it)('action - addItem: adds item to navigationItems', function () {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/first', last: true })] }));\n            });\n\n            (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(1);\n\n            ctrl.set('newNavItem.label', 'New');\n            ctrl.set('newNavItem.url', '/new');\n\n            run(function () {\n                ctrl.send('addItem');\n            });\n\n            (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(2);\n            (0, _chai.expect)(ctrl.get('model.navigation.lastObject.label')).to.equal('New');\n            (0, _chai.expect)(ctrl.get('model.navigation.lastObject.url')).to.equal('/new');\n            (0, _chai.expect)(ctrl.get('model.navigation.lastObject.isNew')).to.be['false'];\n            (0, _chai.expect)(ctrl.get('newNavItem.label')).to.be.blank;\n            (0, _chai.expect)(ctrl.get('newNavItem.url')).to.be.blank;\n            (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('action - addItem: doesn\\'t insert new item if last object is incomplete', function () {\n            var ctrl = this.subject();\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: [_ghostAdminModelsNavigationItem['default'].create({ label: '', url: '', last: true })] }));\n                (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(1);\n                ctrl.send('addItem');\n                (0, _chai.expect)(ctrl.get('model.navigation.length')).to.equal(1);\n            });\n        });\n\n        (0, _emberMocha.it)('action - deleteItem: removes item from navigationItems', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/first' }), _ghostAdminModelsNavigationItem['default'].create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: navItems }));\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('label')).to.deep.equal(['First', 'Second']);\n                ctrl.send('deleteItem', ctrl.get('model.navigation.firstObject'));\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('label')).to.deep.equal(['Second']);\n            });\n        });\n\n        (0, _emberMocha.it)('action - reorderItems: updates navigationItems list', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/first' }), _ghostAdminModelsNavigationItem['default'].create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: navItems }));\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('label')).to.deep.equal(['First', 'Second']);\n                ctrl.send('reorderItems', navItems.reverseObjects());\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('label')).to.deep.equal(['Second', 'First']);\n            });\n        });\n\n        (0, _emberMocha.it)('action - updateUrl: updates URL on navigationItem', function () {\n            var ctrl = this.subject();\n            var navItems = [_ghostAdminModelsNavigationItem['default'].create({ label: 'First', url: '/first' }), _ghostAdminModelsNavigationItem['default'].create({ label: 'Second', url: '/second', last: true })];\n\n            run(function () {\n                ctrl.set('model', EmberObject.create({ navigation: navItems }));\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('url')).to.deep.equal(['/first', '/second']);\n                ctrl.send('updateUrl', '/new', ctrl.get('model.navigation.firstObject'));\n                (0, _chai.expect)(ctrl.get('model.navigation').mapBy('url')).to.deep.equal(['/new', '/second']);\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/controllers/subscribers-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('controller:subscribers', 'Unit: Controller: subscribers', {\n        needs: ['service:notifications']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('exists', function () {\n            var controller = this.subject();\n            (0, _chai.expect)(controller).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/helpers/gh-format-time-scheduled-test', ['exports', 'ember-object', 'chai', 'mocha', 'ghost-admin/helpers/gh-format-time-scheduled', 'sinon'], function (exports, _emberObject, _chai, _mocha, _ghostAdminHelpersGhFormatTimeScheduled, _sinon) {\n\n    (0, _mocha.describe)('Unit: Helper: gh-format-time-scheduled', function () {\n        var mockDate = undefined;\n        var mockTimezone = undefined;\n\n        (0, _mocha.it)('renders the date with the bog timezone', function () {\n            mockDate = '2016-05-30T10:00:00.000Z';\n            mockTimezone = _emberObject['default'].create({\n                content: 'Africa/Cairo',\n                isFulfilled: true\n            });\n\n            var result = (0, _ghostAdminHelpersGhFormatTimeScheduled.timeToSchedule)([mockDate, mockTimezone]);\n            (0, _chai.expect)(result).to.be.equal('30 May 2016, 12:00');\n        });\n        (0, _mocha.it)('returns only when the timezone promise is fulfilled', function () {\n            mockDate = '2016-05-30T10:00:00.000Z';\n            mockTimezone = _emberObject['default'].create({\n                content: undefined,\n                isFulfilled: false\n            });\n\n            var result = (0, _ghostAdminHelpersGhFormatTimeScheduled.timeToSchedule)([mockDate, mockTimezone]);\n            (0, _chai.expect)(result).to.be.equal(undefined);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/helpers/gh-format-timeago-test', ['exports', 'chai', 'mocha', 'ghost-admin/helpers/gh-format-timeago', 'sinon'], function (exports, _chai, _mocha, _ghostAdminHelpersGhFormatTimeago, _sinon) {\n\n    (0, _mocha.describe)('Unit: Helper: gh-format-timeago', function () {\n        var mockDate = undefined;\n        var utcStub = undefined;\n\n        (0, _mocha.it)('calculates the correct time difference', function () {\n            mockDate = '2016-05-30T10:00:00.000Z';\n            utcStub = _sinon['default'].stub(moment, 'utc').returns('2016-05-30T11:00:00.000Z');\n\n            var result = (0, _ghostAdminHelpersGhFormatTimeago.timeAgo)([mockDate]);\n            (0, _chai.expect)(result).to.be.equal('an hour ago');\n\n            moment.utc.restore();\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/helpers/gh-user-can-admin-test', ['exports', 'ember-mocha', 'ghost-admin/helpers/gh-user-can-admin'], function (exports, _emberMocha, _ghostAdminHelpersGhUserCanAdmin) {\n\n    describe('Unit: Helper: gh-user-can-admin', function () {\n        // Mock up roles and test for truthy\n        describe('Owner role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return true;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - can be Admin', function () {\n                var result = (0, _ghostAdminHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Administrator role', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return true;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - can be Admin', function () {\n                var result = (0, _ghostAdminHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(true);\n            });\n        });\n\n        describe('Editor and Author roles', function () {\n            var user = {\n                get: function get(role) {\n                    if (role === 'isOwner') {\n                        return false;\n                    } else if (role === 'isAdmin') {\n                        return false;\n                    }\n                }\n            };\n\n            (0, _emberMocha.it)(' - cannot be Admin', function () {\n                var result = (0, _ghostAdminHelpersGhUserCanAdmin.ghUserCanAdmin)([user]);\n                expect(result).to.equal(false);\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/helpers/highlighted-text-test', ['exports', 'chai', 'mocha', 'ghost-admin/helpers/highlighted-text'], function (exports, _chai, _mocha, _ghostAdminHelpersHighlightedText) {\n\n    (0, _mocha.describe)('Unit: Helper: highlighted-text', function () {\n\n        (0, _mocha.it)('works', function () {\n            var result = (0, _ghostAdminHelpersHighlightedText.highlightedText)(['Test', 'e']);\n            (0, _chai.expect)(result).to.be.an('object');\n            (0, _chai.expect)(result.string).to.equal('T<span class=\"highlight\">e</span>st');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/helpers/is-equal-test', ['exports', 'chai', 'mocha', 'ghost-admin/helpers/is-equal'], function (exports, _chai, _mocha, _ghostAdminHelpersIsEqual) {\n\n    (0, _mocha.describe)('Unit: Helper: is-equal', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var result = (0, _ghostAdminHelpersIsEqual.isEqual)([42, 42]);\n\n            (0, _chai.expect)(result).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/helpers/is-not-test', ['exports', 'chai', 'mocha', 'ghost-admin/helpers/is-not'], function (exports, _chai, _mocha, _ghostAdminHelpersIsNot) {\n\n    (0, _mocha.describe)('Unit: Helper: is-not', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var result = (0, _ghostAdminHelpersIsNot.isNot)(false);\n\n            (0, _chai.expect)(result).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/mixins/editor-base-controller-test', ['exports', 'chai', 'mocha', 'ember-object', 'rsvp', 'ember-runloop', 'ember-concurrency', 'ghost-admin/mixins/editor-base-controller'], function (exports, _chai, _mocha, _emberObject, _rsvp, _emberRunloop, _emberConcurrency, _ghostAdminMixinsEditorBaseController) {\n    var resolve = _rsvp['default'].resolve;\n\n    (0, _mocha.describe)('Unit: Mixin: editor-base-controller', function () {\n        (0, _mocha.describe)('generateSlug', function () {\n            (0, _mocha.it)('should generate a slug and set it on the model', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            return _rsvp['default'].resolve(str + '-slug');\n                        }\n                    }),\n                    model: _emberObject['default'].create({ slug: '' })\n                }).create();\n\n                object.set('model.titleScratch', 'title');\n\n                (0, _emberRunloop['default'])(function () {\n                    var promise = object.get('generateSlug').perform();\n\n                    (0, _chai.expect)(object.get('model.slug')).to.equal('');\n\n                    promise.then(function () {\n                        (0, _chai.expect)(object.get('model.slug')).to.equal('title-slug');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n\n            (0, _mocha.it)('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    slugGenerator: _emberObject['default'].create({\n                        generateSlug: function generateSlug(slugType, str) {\n                            return _rsvp['default'].resolve(str + '-slug');\n                        }\n                    }),\n                    model: _emberObject['default'].create({\n                        slug: 'whatever'\n                    })\n                }).create();\n\n                (0, _chai.expect)(object.get('model.slug')).to.equal('whatever');\n\n                object.set('model.titleScratch', '(Untitled)');\n\n                (0, _emberRunloop['default'])(function () {\n                    object.get('generateSlug').perform().then(function () {\n                        (0, _chai.expect)(object.get('model.slug')).to.equal('whatever');\n\n                        done();\n                    })['catch'](done);\n                });\n            });\n        });\n\n        (0, _mocha.describe)('updateTitle', function () {\n            (0, _mocha.it)('should invoke generateSlug if the post is new and a title has not been set', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    model: _emberObject['default'].create({ isNew: true }),\n                    generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$3$0() {\n                        return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {\n                            while (1) switch (context$4$0.prev = context$4$0.next) {\n                                case 0:\n                                    this.set('model.slug', 'test-slug');\n                                    context$4$0.next = 3;\n                                    return resolve();\n\n                                case 3:\n                                case 'end':\n                                    return context$4$0.stop();\n                            }\n                        }, callee$3$0, this);\n                    }))\n                }).create();\n\n                (0, _chai.expect)(object.get('model.isNew')).to.be['true'];\n                (0, _chai.expect)(object.get('model.titleScratch')).to.not.be.ok;\n\n                (0, _emberRunloop['default'])(function () {\n                    object.get('updateTitle').perform('test');\n\n                    (0, _emberRunloop.later)(function () {\n                        (0, _chai.expect)(object.get('model.titleScratch')).to.equal('test');\n                        (0, _chai.expect)(object.get('model.slug')).to.equal('test-slug');\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            (0, _mocha.it)('should invoke generateSlug if the post is not new and a title is \"(Untitled)\"', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    model: _emberObject['default'].create({ isNew: false }),\n                    generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$3$0() {\n                        return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {\n                            while (1) switch (context$4$0.prev = context$4$0.next) {\n                                case 0:\n                                    this.set('model.slug', 'test-slug');\n                                    context$4$0.next = 3;\n                                    return resolve();\n\n                                case 3:\n                                case 'end':\n                                    return context$4$0.stop();\n                            }\n                        }, callee$3$0, this);\n                    }))\n                }).create();\n\n                (0, _chai.expect)(object.get('model.isNew')).to.be['false'];\n                (0, _chai.expect)(object.get('model.titleScratch')).to.not.be.ok;\n\n                (0, _emberRunloop['default'])(function () {\n                    object.get('updateTitle').perform('(Untitled)');\n\n                    (0, _emberRunloop.later)(function () {\n                        (0, _chai.expect)(object.get('model.titleScratch')).to.equal('(Untitled)');\n                        (0, _chai.expect)(object.get('model.slug')).to.equal('test-slug');\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            (0, _mocha.it)('should not invoke generateSlug if the post is new but has a title', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    model: _emberObject['default'].create({\n                        isNew: true,\n                        title: 'a title'\n                    }),\n                    generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$3$0() {\n                        return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {\n                            while (1) switch (context$4$0.prev = context$4$0.next) {\n                                case 0:\n                                    (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n\n                                    context$4$0.next = 3;\n                                    return resolve();\n\n                                case 3:\n                                case 'end':\n                                    return context$4$0.stop();\n                            }\n                        }, callee$3$0, this);\n                    }))\n                }).create();\n\n                (0, _chai.expect)(object.get('model.isNew')).to.be['true'];\n                (0, _chai.expect)(object.get('model.title')).to.equal('a title');\n                (0, _chai.expect)(object.get('model.titleScratch')).to.not.be.ok;\n\n                (0, _emberRunloop['default'])(function () {\n                    object.get('updateTitle').perform('test');\n\n                    (0, _emberRunloop.later)(function () {\n                        (0, _chai.expect)(object.get('model.titleScratch')).to.equal('test');\n                        (0, _chai.expect)(object.get('model.slug')).to.not.be.ok;\n\n                        done();\n                    }, 800);\n                });\n            });\n\n            (0, _mocha.it)('should not invoke generateSlug if the post is not new and the title is not \"(Untitled)\"', function (done) {\n                var object = _emberObject['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {\n                    model: _emberObject['default'].create({ isNew: false }),\n                    generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$3$0() {\n                        return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {\n                            while (1) switch (context$4$0.prev = context$4$0.next) {\n                                case 0:\n                                    (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n\n                                    context$4$0.next = 3;\n                                    return resolve();\n\n                                case 3:\n                                case 'end':\n                                    return context$4$0.stop();\n                            }\n                        }, callee$3$0, this);\n                    }))\n                }).create();\n\n                (0, _chai.expect)(object.get('model.isNew')).to.be['false'];\n                (0, _chai.expect)(object.get('model.title')).to.not.be.ok;\n\n                (0, _emberRunloop['default'])(function () {\n                    object.get('updateTitle').perform('title');\n\n                    (0, _emberRunloop.later)(function () {\n                        (0, _chai.expect)(object.get('model.titleScratch')).to.equal('title');\n                        (0, _chai.expect)(object.get('model.slug')).to.not.be.ok;\n\n                        done();\n                    }, 800);\n                });\n            });\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/mixins/infinite-scroll-test', ['exports', 'chai', 'mocha', 'ember-object', 'ghost-admin/mixins/infinite-scroll'], function (exports, _chai, _mocha, _emberObject, _ghostAdminMixinsInfiniteScroll) {\n\n    (0, _mocha.describe)('Unit: Mixin: infinite-scroll', function () {\n        // Replace this with your real tests.\n        (0, _mocha.it)('works', function () {\n            var InfiniteScrollObject = _emberObject['default'].extend(_ghostAdminMixinsInfiniteScroll['default']);\n            var subject = InfiniteScrollObject.create();\n\n            (0, _chai.expect)(subject).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/mixins/validation-engine-test', ['exports', 'chai', 'mocha', 'ghost-admin/mixins/validation-engine'], function (exports, _chai, _mocha, _ghostAdminMixinsValidationEngine) {\n\n    (0, _mocha.describe)('ValidationEngineMixin', function () {\n        // Replace this with your real tests.\n        // it('works', function () {\n        //     var ValidationEngineObject = EmberObject.extend(ValidationEngineMixin);\n        //     var subject = ValidationEngineObject.create();\n        //     expect(subject).to.be.ok;\n        // });\n\n        (0, _mocha.describe)('#validate', function () {\n            (0, _mocha.it)('loads the correct validator');\n            (0, _mocha.it)('rejects if the validator doesn\\'t exist');\n            (0, _mocha.it)('resolves with valid object');\n            (0, _mocha.it)('rejects with invalid object');\n            (0, _mocha.it)('clears all existing errors');\n\n            (0, _mocha.describe)('with a specified property', function () {\n                (0, _mocha.it)('resolves with valid property');\n                (0, _mocha.it)('rejects with invalid property');\n                (0, _mocha.it)('adds property to hasValidated array');\n                (0, _mocha.it)('clears existing error on specified property');\n            });\n\n            (0, _mocha.it)('handles a passed in model');\n            (0, _mocha.it)('uses this.model if available');\n        });\n\n        (0, _mocha.describe)('#save', function () {\n            (0, _mocha.it)('calls validate');\n            (0, _mocha.it)('rejects with validation errors');\n            (0, _mocha.it)('calls object\\'s #save if validation passes');\n            (0, _mocha.it)('skips validation if it\\'s a deletion');\n        });\n    });\n});\n/* jshint expr:true */\n\n// import EmberObject from 'ember-object';","define('ghost-admin/tests/unit/models/navigation-item-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('model:navigation-item', 'Unit: Model: navigation-item', {\n        // Specify the other units that are required for this test.\n        needs: []\n    }, function () {\n        (0, _emberMocha.it)('isComplete is true when label and url are filled', function () {\n            var model = this.subject();\n\n            model.set('label', 'test');\n            model.set('url', 'test');\n\n            (0, _chai.expect)(model.get('isComplete')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('isComplete is false when label is blank', function () {\n            var model = this.subject();\n\n            model.set('label', '');\n            model.set('url', 'test');\n\n            (0, _chai.expect)(model.get('isComplete')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('isComplete is false when url is blank', function () {\n            var model = this.subject();\n\n            model.set('label', 'test');\n            model.set('url', '');\n\n            (0, _chai.expect)(model.get('isComplete')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('isBlank is true when label and url are blank', function () {\n            var model = this.subject();\n\n            model.set('label', '');\n            model.set('url', '');\n\n            (0, _chai.expect)(model.get('isBlank')).to.be['true'];\n        });\n\n        (0, _emberMocha.it)('isBlank is false when label is present', function () {\n            var model = this.subject();\n\n            model.set('label', 'test');\n            model.set('url', '');\n\n            (0, _chai.expect)(model.get('isBlank')).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('isBlank is false when url is present', function () {\n            var model = this.subject();\n\n            model.set('label', '');\n            model.set('url', 'test');\n\n            (0, _chai.expect)(model.get('isBlank')).to.be['false'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/models/post-test', ['exports', 'ember-runloop', 'ember-object', 'ember-mocha'], function (exports, _emberRunloop, _emberObject, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('post', 'Unit: Model: post', {\n        needs: ['model:user', 'model:tag', 'model:role']\n    }, function () {\n        (0, _emberMocha.it)('has a validation type of \"post\"', function () {\n            var model = this.subject();\n\n            expect(model.validationType).to.equal('post');\n        });\n\n        (0, _emberMocha.it)('isPublished, isDraft and isScheduled are correct', function () {\n            var model = this.subject({\n                status: 'published'\n            });\n\n            expect(model.get('isPublished')).to.be.ok;\n            expect(model.get('isDraft')).to.not.be.ok;\n            expect(model.get('isScheduled')).to.not.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'draft');\n\n                expect(model.get('isPublished')).to.not.be.ok;\n                expect(model.get('isDraft')).to.be.ok;\n                expect(model.get('isScheduled')).to.not.be.ok;\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'scheduled');\n\n                expect(model.get('isScheduled')).to.be.ok;\n                expect(model.get('isPublished')).to.not.be.ok;\n                expect(model.get('isDraft')).to.not.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('isAuthoredByUser is correct', function () {\n            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n            var model = this.subject({\n                authorId: 15\n            });\n            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */\n            var user = _emberObject['default'].create({ id: '15' });\n\n            expect(model.isAuthoredByUser(user)).to.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('authorId', 1);\n\n                expect(model.isAuthoredByUser(user)).to.not.be.ok;\n            });\n        });\n\n        (0, _emberMocha.it)('updateTags removes and deletes old tags', function () {\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(this, function () {\n                var modelTags = model.get('tags');\n                var tag1 = this.store().createRecord('tag', { id: '1' });\n                var tag2 = this.store().createRecord('tag', { id: '2' });\n                var tag3 = this.store().createRecord('tag');\n\n                // During testing a record created without an explicit id will get\n                // an id of 'fixture-n' instead of null\n                tag3.set('id', null);\n\n                modelTags.pushObject(tag1);\n                modelTags.pushObject(tag2);\n                modelTags.pushObject(tag3);\n\n                expect(model.get('tags.length')).to.equal(3);\n\n                model.updateTags();\n\n                expect(model.get('tags.length')).to.equal(2);\n                expect(model.get('tags.firstObject.id')).to.equal('1');\n                expect(model.get('tags').objectAt(1).get('id')).to.equal('2');\n                expect(tag1.get('isDeleted')).to.not.be.ok;\n                expect(tag2.get('isDeleted')).to.not.be.ok;\n                expect(tag3.get('isDeleted')).to.be.ok;\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/models/role-test', ['exports', 'ember-runloop', 'ember-mocha'], function (exports, _emberRunloop, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('role', 'Unit: Model: role', function () {\n        (0, _emberMocha.it)('provides a lowercase version of the name', function () {\n            var model = this.subject({\n                name: 'Author'\n            });\n\n            expect(model.get('name')).to.equal('Author');\n            expect(model.get('lowerCaseName')).to.equal('author');\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('name', 'Editor');\n\n                expect(model.get('name')).to.equal('Editor');\n                expect(model.get('lowerCaseName')).to.equal('editor');\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/models/setting-test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('setting', 'Unit: Model: setting', function () {\n        (0, _emberMocha.it)('has a validation type of \"setting\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('setting');\n        });\n    });\n});","define('ghost-admin/tests/unit/models/subscriber-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('subscriber', 'Unit: Model: subscriber', {\n        // Specify the other units that are required for this test.\n        needs: ['model:post']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('exists', function () {\n            var model = this.subject();\n            // var store = this.store();\n            (0, _chai.expect)(model).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/models/tag-test', ['exports', 'ember-mocha'], function (exports, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('tag', 'Unit: Model: tag', function () {\n        (0, _emberMocha.it)('has a validation type of \"tag\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('tag');\n        });\n    });\n});","define('ghost-admin/tests/unit/models/user-test', ['exports', 'ember-runloop', 'ember-mocha'], function (exports, _emberRunloop, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('user', 'Unit: Model: user', {\n        needs: ['model:role', 'serializer:application', 'serializer:user']\n    }, function () {\n        (0, _emberMocha.it)('has a validation type of \"user\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('user');\n        });\n\n        (0, _emberMocha.it)('active property is correct', function () {\n            var model = this.subject({\n                status: 'active'\n            });\n\n            expect(model.get('active')).to.be.ok;\n\n            ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n                (0, _emberRunloop['default'])(function () {\n                    model.set('status', status);\n                });\n                expect(model.get('status')).to.be.ok;\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('active')).to.not.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'invited');\n            });\n            expect(model.get('active')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('invited property is correct', function () {\n            var model = this.subject({\n                status: 'invited'\n            });\n\n            expect(model.get('invited')).to.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'invited-pending');\n            });\n            expect(model.get('invited')).to.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'active');\n            });\n            expect(model.get('invited')).to.not.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('invited')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('pending property is correct', function () {\n            var model = this.subject({\n                status: 'invited-pending'\n            });\n\n            expect(model.get('pending')).to.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'invited');\n            });\n            expect(model.get('pending')).to.not.be.ok;\n\n            (0, _emberRunloop['default'])(function () {\n                model.set('status', 'inactive');\n            });\n            expect(model.get('pending')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('role property is correct', function () {\n            var _this = this;\n\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Author' } } });\n                model.get('roles').pushObject(role);\n            });\n            expect(model.get('role.name')).to.equal('Author');\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Editor' } } });\n                model.set('role', role);\n            });\n            expect(model.get('role.name')).to.equal('Editor');\n        });\n\n        (0, _emberMocha.it)('isAuthor property is correct', function () {\n            var _this2 = this;\n\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this2.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Author' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isAuthor')).to.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isEditor property is correct', function () {\n            var _this3 = this;\n\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this3.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Editor' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isEditor')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isAdmin property is correct', function () {\n            var _this4 = this;\n\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this4.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Administrator' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isAdmin')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n            expect(model.get('isOwner')).to.not.be.ok;\n        });\n\n        (0, _emberMocha.it)('isOwner property is correct', function () {\n            var _this5 = this;\n\n            var model = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                var role = _this5.store().push({ data: { id: 1, type: 'role', attributes: { name: 'Owner' } } });\n                model.set('role', role);\n            });\n            expect(model.get('isOwner')).to.be.ok;\n            expect(model.get('isAuthor')).to.not.be.ok;\n            expect(model.get('isAdmin')).to.not.be.ok;\n            expect(model.get('isEditor')).to.not.be.ok;\n        });\n    });\n});","define('ghost-admin/tests/unit/routes/subscribers-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('route:subscribers', 'Unit: Route: subscribers', {\n        needs: ['service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('exists', function () {\n            var route = this.subject();\n            (0, _chai.expect)(route).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/routes/subscribers/import-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('route:subscribers/import', 'Unit: Route: subscribers/import', {\n        // Specify the other units that are required for this test.\n        needs: ['service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('exists', function () {\n            var route = this.subject();\n            (0, _chai.expect)(route).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/routes/subscribers/new-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('route:subscribers/new', 'Unit: Route: subscribers/new', {\n        needs: ['service:notifications']\n    }, function () {\n        (0, _emberMocha.it)('exists', function () {\n            var route = this.subject();\n            (0, _chai.expect)(route).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/notification-test', ['exports', 'chai', 'ember-mocha', 'ember-runloop', 'pretender'], function (exports, _chai, _emberMocha, _emberRunloop, _pretender) {\n\n    (0, _emberMocha.describeModel)('notification', 'Unit: Serializer: notification', {\n        // Specify the other units that are required for this test.\n        needs: ['serializer:notification']\n    }, function () {\n        var server = undefined;\n\n        beforeEach(function () {\n            server = new _pretender['default']();\n        });\n\n        afterEach(function () {\n            server.shutdown();\n        });\n\n        (0, _emberMocha.it)('converts location->key when deserializing', function () {\n            server.get('/notifications', function () {\n                var response = {\n                    notifications: [{\n                        id: 1,\n                        dismissible: false,\n                        status: 'alert',\n                        type: 'info',\n                        location: 'test.foo',\n                        message: 'This is a test'\n                    }]\n                };\n\n                return [200, { 'Content-Type': 'application/json' }, JSON.stringify(response)];\n            });\n\n            return this.store().findAll('notification').then(function (notifications) {\n                (0, _chai.expect)(notifications.get('length')).to.equal(1);\n                (0, _chai.expect)(notifications.get('firstObject.key')).to.equal('test.foo');\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/serializers/post-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('post', 'Unit:Serializer: post', {\n        // Specify the other units that are required for this test.\n        needs: ['transform:moment-utc', 'model:user', 'model:tag']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/role-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('role', 'Unit:Serializer: role', {\n        // Specify the other units that are required for this test.\n        needs: ['transform:moment-utc']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/setting-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('setting', 'Unit:Serializer: setting', {\n        // Specify the other units that are required for this test.\n        needs: ['transform:moment-utc', 'transform:facebook-url-user', 'transform:twitter-url-user', 'transform:navigation-settings', 'transform:slack-settings']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/subscriber-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('subscriber', 'Unit:Serializer: subscriber', {\n        // Specify the other units that are required for this test.\n        needs: ['model:post', 'transform:moment-utc']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/tag-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('tag', 'Unit:Serializer: tag', {\n        // Specify the other units that are required for this test.\n        needs: ['transform:moment-utc', 'transform:raw']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/serializers/user-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModel)('user', 'Unit:Serializer: user', {\n        // Specify the other units that are required for this test.\n        needs: ['transform:moment-utc', 'transform:raw', 'transform:facebook-url-user', 'transform:twitter-url-user', 'model:role']\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('serializes records', function () {\n            var record = this.subject();\n\n            var serializedRecord = record.serialize();\n\n            (0, _chai.expect)(record).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/services/config-test', ['exports', 'chai', 'ember-mocha', 'jquery'], function (exports, _chai, _emberMocha, _jquery) {\n\n    (0, _emberMocha.describeModule)('service:config', 'Unit: Service: config', {}, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('exists', function () {\n            var service = this.subject();\n            (0, _chai.expect)(service).to.be.ok;\n        });\n\n        (0, _emberMocha.it)('correctly parses a client secret', function () {\n            (0, _jquery['default'])('<meta>').attr('name', 'env-clientSecret').attr('content', '23e435234423').appendTo('head');\n\n            var service = this.subject();\n\n            (0, _chai.expect)(service.get('clientSecret')).to.equal('23e435234423');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/services/event-bus-test', ['exports', 'chai', 'ember-mocha', 'sinon'], function (exports, _chai, _emberMocha, _sinon) {\n\n    (0, _emberMocha.describeModule)('service:event-bus', 'Unit: Service: event-bus', {}, function () {\n        (0, _emberMocha.it)('works', function () {\n            var service = this.subject();\n            var eventHandler = _sinon['default'].spy();\n\n            service.subscribe('test-event', eventHandler);\n\n            service.publish('test-event', 'test');\n\n            service.unsubscribe('test-event', eventHandler);\n\n            service.publish('test-event', 'test two');\n\n            (0, _chai.expect)(eventHandler.calledOnce, 'event handler only triggered once').to.be['true'];\n\n            (0, _chai.expect)(eventHandler.calledWith('test'), 'event handler was passed correct arguments').to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/services/notifications-test', ['exports', 'ember-runloop', 'ember-metal/get', 'ember-array/utils', 'ember-object', 'sinon', 'chai', 'ember-mocha', 'ember-ajax/errors', 'ghost-admin/services/ajax'], function (exports, _emberRunloop, _emberMetalGet, _emberArrayUtils, _emberObject, _sinon, _chai, _emberMocha, _emberAjaxErrors, _ghostAdminServicesAjax) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    (0, _emberMocha.describeModule)('service:notifications', 'Unit: Service: notifications', {}, function () {\n        beforeEach(function () {\n            this.subject().set('content', (0, _emberArrayUtils.A)());\n            this.subject().set('delayedNotifications', (0, _emberArrayUtils.A)());\n        });\n\n        (0, _emberMocha.it)('filters alerts/notifications', function () {\n            var notifications = this.subject();\n\n            // wrapped in run-loop to enure alerts/notifications CPs are updated\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('Alert');\n                notifications.showNotification('Notification');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Alert');\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.firstObject.message')).to.equal('Notification');\n        });\n\n        (0, _emberMocha.it)('#handleNotification deals with DS.Notification notifications', function () {\n            var notifications = this.subject();\n            var notification = _emberObject['default'].create({ message: '<h1>Test</h1>', status: 'alert' });\n\n            notification.toJSON = function () {};\n\n            notifications.handleNotification(notification);\n\n            notification = notifications.get('alerts')[0];\n\n            // alerts received from the server should be marked html safe\n            (0, _chai.expect)(notification.get('message')).to.have.property('toHTML');\n        });\n\n        (0, _emberMocha.it)('#handleNotification defaults to notification if no status supplied', function () {\n            var notifications = this.subject();\n\n            notifications.handleNotification({ message: 'Test' }, false);\n\n            (0, _chai.expect)(notifications.get('content')).to.deep.include({ message: 'Test', status: 'notification' });\n        });\n\n        (0, _emberMocha.it)('#showAlert adds POJO alerts', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('Test Alert', { type: 'error' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts')).to.deep.include({ message: 'Test Alert', status: 'alert', type: 'error', key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showAlert adds delayed notifications', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('Test Alert', { type: 'error', delayed: true });\n            });\n\n            (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({ message: 'Test Alert', status: 'notification', type: 'error', key: undefined });\n        });\n\n        // in order to cater for complex keys that are suitable for i18n\n        // we split on the second period and treat the resulting base as\n        // the key for duplicate checking\n        (0, _emberMocha.it)('#showAlert clears duplicates', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('Kept');\n                notifications.showAlert('Duplicate', { key: 'duplicate.key.fail' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('Duplicate with new message', { key: 'duplicate.key.success' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n            (0, _chai.expect)(notifications.get('alerts.lastObject.message')).to.equal('Duplicate with new message');\n        });\n\n        (0, _emberMocha.it)('#showNotification adds POJO notifications', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('Test Notification', { type: 'success' });\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.include({ message: 'Test Notification', status: 'notification', type: 'success', key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showNotification adds delayed notifications', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('Test Notification', { delayed: true });\n            });\n\n            (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({ message: 'Test Notification', status: 'notification', type: undefined, key: undefined });\n        });\n\n        (0, _emberMocha.it)('#showNotification clears existing notifications', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('First');\n                notifications.showNotification('Second');\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'Second', status: 'notification', type: undefined, key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#showNotification keeps existing notifications if doNotCloseNotifications option passed', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('First');\n                notifications.showNotification('Second', { doNotCloseNotifications: true });\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(2);\n        });\n\n        (0, _emberMocha.it)('#showAPIError handles single json response error', function () {\n            var notifications = this.subject();\n            var error = new _emberAjaxErrors.AjaxError([{ message: 'Single error' }]);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(error);\n            });\n\n            var alert = notifications.get('alerts.firstObject');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(alert, 'message')).to.equal('Single error');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(alert, 'status')).to.equal('alert');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(alert, 'type')).to.equal('error');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(alert, 'key')).to.equal('api-error');\n        });\n\n        (0, _emberMocha.it)('#showAPIError handles multiple json response errors', function () {\n            var notifications = this.subject();\n            var error = new _emberAjaxErrors.AjaxError([{ title: 'First error', message: 'First error message' }, { title: 'Second error', message: 'Second error message' }]);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(error);\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n\n            var _notifications$get = notifications.get('alerts');\n\n            var _notifications$get2 = _slicedToArray(_notifications$get, 2);\n\n            var alert1 = _notifications$get2[0];\n            var alert2 = _notifications$get2[1];\n\n            (0, _chai.expect)(alert1).to.deep.equal({ message: 'First error message', status: 'alert', type: 'error', key: 'api-error.first-error' });\n            (0, _chai.expect)(alert2).to.deep.equal({ message: 'Second error message', status: 'alert', type: 'error', key: 'api-error.second-error' });\n        });\n\n        (0, _emberMocha.it)('#showAPIError displays default error text if response has no error/message', function () {\n            var notifications = this.subject();\n            var resp = false;\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(resp);\n            });\n\n            (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{ message: 'There was a problem on the server, please try again.', status: 'alert', type: 'error', key: 'api-error' }]);\n\n            notifications.set('content', (0, _emberArrayUtils.A)());\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(resp, { defaultErrorText: 'Overridden default' });\n            });\n            (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{ message: 'Overridden default', status: 'alert', type: 'error', key: 'api-error' }]);\n        });\n\n        (0, _emberMocha.it)('#showAPIError sets correct key when passed a base key', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError('Test', { key: 'test.alert' });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error.test.alert');\n        });\n\n        (0, _emberMocha.it)('#showAPIError sets correct key when not passed a key', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError('Test');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error');\n        });\n\n        (0, _emberMocha.it)('#showAPIError parses default ember-ajax errors correctly', function () {\n            var notifications = this.subject();\n            var error = new _emberAjaxErrors.InvalidError();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(error);\n            });\n\n            var notification = notifications.get('alerts.firstObject');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'message')).to.equal('Request was rejected because it was invalid');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'status')).to.equal('alert');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'type')).to.equal('error');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'key')).to.equal('api-error.ajax-error');\n        });\n\n        (0, _emberMocha.it)('#showAPIError parses custom ember-ajax errors correctly', function () {\n            var notifications = this.subject();\n            var error = new _ghostAdminServicesAjax.ServerUnreachableError();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAPIError(error);\n            });\n\n            var notification = notifications.get('alerts.firstObject');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'message')).to.equal('Server was unreachable');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'status')).to.equal('alert');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'type')).to.equal('error');\n            (0, _chai.expect)((0, _emberMetalGet['default'])(notification, 'key')).to.equal('api-error.ajax-error');\n        });\n\n        (0, _emberMocha.it)('#displayDelayed moves delayed notifications into content', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showNotification('First', { delayed: true });\n                notifications.showNotification('Second', { delayed: true });\n                notifications.showNotification('Third', { delayed: false });\n                notifications.displayDelayed();\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{ message: 'Third', status: 'notification', type: undefined, key: undefined }, { message: 'First', status: 'notification', type: undefined, key: undefined }, { message: 'Second', status: 'notification', type: undefined, key: undefined }]);\n        });\n\n        (0, _emberMocha.it)('#closeNotification removes POJO notifications', function () {\n            var notification = { message: 'Close test', status: 'notification' };\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.handleNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.include(notification);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('notifications')).to.not.include(notification);\n        });\n\n        (0, _emberMocha.it)('#closeNotification removes and deletes DS.Notification records', function () {\n            var notification = _emberObject['default'].create({ message: 'Close test', status: 'alert' });\n            var notifications = this.subject();\n\n            notification.toJSON = function () {};\n            notification.deleteRecord = function () {};\n            _sinon['default'].spy(notification, 'deleteRecord');\n            notification.save = function () {\n                return {\n                    'finally': function _finally(callback) {\n                        return callback(notification);\n                    }\n                };\n            };\n            _sinon['default'].spy(notification, 'save');\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.handleNotification(notification);\n            });\n\n            (0, _chai.expect)(notifications.get('alerts')).to.include(notification);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeNotification(notification);\n            });\n\n            (0, _chai.expect)(notification.deleteRecord.calledOnce).to.be['true'];\n            (0, _chai.expect)(notification.save.calledOnce).to.be['true'];\n\n            (0, _chai.expect)(notifications.get('alerts')).to.not.include(notification);\n        });\n\n        (0, _emberMocha.it)('#closeNotifications only removes notifications', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('First alert');\n                notifications.showNotification('First notification');\n                notifications.showNotification('Second notification', { doNotCloseNotifications: true });\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(2);\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeNotifications();\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(0);\n        });\n\n        (0, _emberMocha.it)('#closeNotifications only closes notifications with specified key', function () {\n            var notifications = this.subject();\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.showAlert('First alert');\n                // using handleNotification as showNotification will auto-prune\n                // duplicates and keys will be removed if doNotCloseNotifications\n                // is true\n                notifications.handleNotification({ message: 'First notification', key: 'test.close', status: 'notification' });\n                notifications.handleNotification({ message: 'Second notification', key: 'test.keep', status: 'notification' });\n                notifications.handleNotification({ message: 'Third notification', key: 'test.close', status: 'notification' });\n            });\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeNotifications('test.close');\n            });\n\n            (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(1);\n            (0, _chai.expect)(notifications.get('notifications.firstObject.message'), 'notification message').to.equal('Second notification');\n            (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n        });\n\n        (0, _emberMocha.it)('#clearAll removes everything without deletion', function () {\n            var notifications = this.subject();\n            var notificationModel = _emberObject['default'].create({ message: 'model' });\n\n            notificationModel.toJSON = function () {};\n            notificationModel.deleteRecord = function () {};\n            _sinon['default'].spy(notificationModel, 'deleteRecord');\n            notificationModel.save = function () {\n                return {\n                    'finally': function _finally(callback) {\n                        return callback(notificationModel);\n                    }\n                };\n            };\n            _sinon['default'].spy(notificationModel, 'save');\n\n            notifications.handleNotification(notificationModel);\n            notifications.handleNotification({ message: 'pojo' });\n\n            notifications.clearAll();\n\n            (0, _chai.expect)(notifications.get('content')).to.be.empty;\n            (0, _chai.expect)(notificationModel.deleteRecord.called).to.be['false'];\n            (0, _chai.expect)(notificationModel.save.called).to.be['false'];\n        });\n\n        (0, _emberMocha.it)('#closeAlerts only removes alerts', function () {\n            var notifications = this.subject();\n\n            notifications.showNotification('First notification');\n            notifications.showAlert('First alert');\n            notifications.showAlert('Second alert');\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeAlerts();\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(0);\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n        });\n\n        (0, _emberMocha.it)('#closeAlerts closes only alerts with specified key', function () {\n            var notifications = this.subject();\n\n            notifications.showNotification('First notification');\n            notifications.showAlert('First alert', { key: 'test.close' });\n            notifications.showAlert('Second alert', { key: 'test.keep' });\n            notifications.showAlert('Third alert', { key: 'test.close' });\n\n            (0, _emberRunloop['default'])(function () {\n                notifications.closeAlerts('test.close');\n            });\n\n            (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n            (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Second alert');\n            (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/services/upgrade-status-test', ['exports', 'chai', 'ember-mocha'], function (exports, _chai, _emberMocha) {\n\n    (0, _emberMocha.describeModule)('service:upgrade-status', 'UpgradeStatusService', {\n        // Specify the other units that are required for this test.\n        // needs: ['service:foo']\n        needs: []\n    }, function () {\n        // Replace this with your real tests.\n        (0, _emberMocha.it)('exists', function () {\n            var service = this.subject();\n            (0, _chai.expect)(service).to.be.ok;\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/transforms/facebook-url-user-test', ['exports', 'chai', 'ember-mocha', 'ember-array/utils'], function (exports, _chai, _emberMocha, _emberArrayUtils) {\n\n    (0, _emberMocha.describeModule)('transform:facebook-url-user', 'Unit: Transform: facebook-url-user', {}, function () {\n        (0, _emberMocha.it)('deserializes facebook url', function () {\n            var transform = this.subject();\n            var serialized = 'testuser';\n            var result = transform.deserialize(serialized);\n\n            (0, _chai.expect)(result).to.equal('https://www.facebook.com/testuser');\n        });\n\n        (0, _emberMocha.it)('serializes url to facebook username', function () {\n            var transform = this.subject();\n            var deserialized = 'https://www.facebook.com/testuser';\n            var result = transform.serialize(deserialized);\n\n            (0, _chai.expect)(result).to.equal('testuser');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/transforms/navigation-settings-test', ['exports', 'chai', 'ember-mocha', 'ember-array/utils', 'ghost-admin/models/navigation-item'], function (exports, _chai, _emberMocha, _emberArrayUtils, _ghostAdminModelsNavigationItem) {\n\n    (0, _emberMocha.describeModule)('transform:navigation-settings', 'Unit: Transform: navigation-settings', {}, function () {\n        (0, _emberMocha.it)('deserializes navigation json', function () {\n            var transform = this.subject();\n            var serialized = '[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]';\n            var result = transform.deserialize(serialized);\n\n            (0, _chai.expect)(result.length).to.equal(2);\n            (0, _chai.expect)(result[0]).to.be['instanceof'](_ghostAdminModelsNavigationItem['default']);\n            (0, _chai.expect)(result[0].get('label')).to.equal('One');\n            (0, _chai.expect)(result[0].get('url')).to.equal('/one');\n            (0, _chai.expect)(result[1]).to.be['instanceof'](_ghostAdminModelsNavigationItem['default']);\n            (0, _chai.expect)(result[1].get('label')).to.equal('Two');\n            (0, _chai.expect)(result[1].get('url')).to.equal('/two');\n        });\n\n        (0, _emberMocha.it)('serializes array of NavigationItems', function () {\n            var transform = this.subject();\n            var deserialized = (0, _emberArrayUtils.A)([_ghostAdminModelsNavigationItem['default'].create({ label: 'One', url: '/one' }), _ghostAdminModelsNavigationItem['default'].create({ label: 'Two', url: '/two' })]);\n            var result = transform.serialize(deserialized);\n\n            (0, _chai.expect)(result).to.equal('[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/transforms/slack-settings-test', ['exports', 'chai', 'ember-mocha', 'ember-array/utils', 'ghost-admin/models/slack-integration'], function (exports, _chai, _emberMocha, _emberArrayUtils, _ghostAdminModelsSlackIntegration) {\n\n    (0, _emberMocha.describeModule)('transform:slack-settings', 'Unit: Transform: slack-settings', {}, function () {\n        (0, _emberMocha.it)('deserializes settings json', function () {\n            var transform = this.subject();\n            var serialized = '[{\"url\":\"http://myblog.com/blogpost1\"}]';\n            var result = transform.deserialize(serialized);\n\n            (0, _chai.expect)(result.length).to.equal(1);\n            (0, _chai.expect)(result[0]).to.be['instanceof'](_ghostAdminModelsSlackIntegration['default']);\n            (0, _chai.expect)(result[0].get('url')).to.equal('http://myblog.com/blogpost1');\n        });\n\n        (0, _emberMocha.it)('serializes array of Slack settings', function () {\n            var transform = this.subject();\n            var deserialized = (0, _emberArrayUtils.A)([_ghostAdminModelsSlackIntegration['default'].create({ url: 'http://myblog.com/blogpost1' })]);\n            var result = transform.serialize(deserialized);\n\n            (0, _chai.expect)(result).to.equal('[{\"url\":\"http://myblog.com/blogpost1\"}]');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/transforms/twitter-url-user-test', ['exports', 'chai', 'ember-mocha', 'ember-array/utils'], function (exports, _chai, _emberMocha, _emberArrayUtils) {\n\n    (0, _emberMocha.describeModule)('transform:twitter-url-user', 'Unit: Transform: twitter-url-user', {}, function () {\n        (0, _emberMocha.it)('deserializes twitter url', function () {\n            var transform = this.subject();\n            var serialized = '@testuser';\n            var result = transform.deserialize(serialized);\n\n            (0, _chai.expect)(result).to.equal('https://twitter.com/testuser');\n        });\n\n        (0, _emberMocha.it)('serializes url to twitter username', function () {\n            var transform = this.subject();\n            var deserialized = 'https://twitter.com/testuser';\n            var result = transform.serialize(deserialized);\n\n            (0, _chai.expect)(result).to.equal('@testuser');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/utils/date-formatting-test', ['exports', 'ghost-admin/utils/date-formatting'], function (exports, _ghostAdminUtilsDateFormatting) {\n\n    describe('Unit: Util: date-formatting', function () {\n        it('parses a string into a moment');\n        it('formats a date or moment');\n    });\n});","define('ghost-admin/tests/unit/utils/ghost-paths-test', ['exports', 'ghost-admin/utils/ghost-paths'], function (exports, _ghostAdminUtilsGhostPaths) {\n\n    describe('Unit: Util: ghost-paths', function () {\n        describe('join', function () {\n            var join = (0, _ghostAdminUtilsGhostPaths['default'])().url.join;\n\n            it('should join two or more paths, normalizing slashes', function () {\n                var path = undefined;\n\n                path = join('/one/', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/', '/three/');\n                expect(path).to.equal('/one/two/three/');\n\n                path = join('/one/', 'two', 'three/');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should not change the slash at the beginning', function () {\n                var path = undefined;\n\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one/', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('/one/', 'two');\n                expect(path).to.equal('/one/two/');\n                path = join('one/', 'two', 'three');\n                expect(path).to.equal('one/two/three/');\n                path = join('/one/', 'two', 'three');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should always return a slash at the end', function () {\n                var path = undefined;\n\n                path = join();\n                expect(path).to.equal('/');\n                path = join('');\n                expect(path).to.equal('/');\n                path = join('one');\n                expect(path).to.equal('one/');\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('one', 'two/');\n                expect(path).to.equal('one/two/');\n            });\n        });\n    });\n});","define('ghost-admin/tests/unit/validators/nav-item-test', ['exports', 'chai', 'mocha', 'ghost-admin/validators/nav-item', 'ghost-admin/models/navigation-item'], function (exports, _chai, _mocha, _ghostAdminValidatorsNavItem, _ghostAdminModelsNavigationItem) {\n\n    var testInvalidUrl = function testInvalidUrl(url) {\n        var navItem = _ghostAdminModelsNavigationItem['default'].create({ url: url });\n\n        _ghostAdminValidatorsNavItem['default'].check(navItem, 'url');\n\n        (0, _chai.expect)(_ghostAdminValidatorsNavItem['default'].get('passed'), '\"' + url + '\" passed').to.be['false'];\n        (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n            attribute: 'url',\n            message: 'You must specify a valid URL or relative path'\n        }]);\n        (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    };\n\n    var testValidUrl = function testValidUrl(url) {\n        var navItem = _ghostAdminModelsNavigationItem['default'].create({ url: url });\n\n        _ghostAdminValidatorsNavItem['default'].check(navItem, 'url');\n\n        (0, _chai.expect)(_ghostAdminValidatorsNavItem['default'].get('passed'), '\"' + url + '\" failed').to.be['true'];\n        (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    };\n\n    (0, _mocha.describe)('Unit: Validator: nav-item', function () {\n        (0, _mocha.it)('requires label presence', function () {\n            var navItem = _ghostAdminModelsNavigationItem['default'].create();\n\n            _ghostAdminValidatorsNavItem['default'].check(navItem, 'label');\n\n            (0, _chai.expect)(_ghostAdminValidatorsNavItem['default'].get('passed')).to.be['false'];\n            (0, _chai.expect)(navItem.get('errors').errorsFor('label').toArray()).to.deep.equal([{\n                attribute: 'label',\n                message: 'You must specify a label'\n            }]);\n            (0, _chai.expect)(navItem.get('hasValidated')).to.include('label');\n        });\n\n        (0, _mocha.it)('requires url presence', function () {\n            var navItem = _ghostAdminModelsNavigationItem['default'].create();\n\n            _ghostAdminValidatorsNavItem['default'].check(navItem, 'url');\n\n            (0, _chai.expect)(_ghostAdminValidatorsNavItem['default'].get('passed')).to.be['false'];\n            (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n                attribute: 'url',\n                message: 'You must specify a URL or relative path'\n            }]);\n            (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n        });\n\n        (0, _mocha.it)('fails on invalid url values', function () {\n            var invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n\n            invalidUrls.forEach(function (url) {\n                testInvalidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('passes on valid url values', function () {\n            var validUrls = ['http://localhost:2368', 'http://localhost:2368/some-path', 'https://localhost:2368/some-path', '//localhost:2368/some-path', 'http://localhost:2368/#test', 'http://localhost:2368/?query=test&another=example', 'http://localhost:2368/?query=test&another=example#test', 'tel:01234-567890', 'mailto:test@example.com', 'http://some:user@example.com:1234', '/relative/path'];\n\n            validUrls.forEach(function (url) {\n                testValidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('validates url and label by default', function () {\n            var navItem = _ghostAdminModelsNavigationItem['default'].create();\n\n            _ghostAdminValidatorsNavItem['default'].check(navItem);\n\n            (0, _chai.expect)(navItem.get('errors').errorsFor('label')).to.not.be.empty;\n            (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.not.be.empty;\n            (0, _chai.expect)(_ghostAdminValidatorsNavItem['default'].get('passed')).to.be['false'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/validators/slack-integration-test', ['exports', 'chai', 'mocha', 'ghost-admin/validators/slack-integration', 'ghost-admin/models/slack-integration'], function (exports, _chai, _mocha, _ghostAdminValidatorsSlackIntegration, _ghostAdminModelsSlackIntegration) {\n\n    var testInvalidUrl = function testInvalidUrl(url) {\n        var slackObject = _ghostAdminModelsSlackIntegration['default'].create({ url: url });\n\n        _ghostAdminValidatorsSlackIntegration['default'].check(slackObject, 'url');\n\n        (0, _chai.expect)(_ghostAdminValidatorsSlackIntegration['default'].get('passed'), '\"' + url + '\" passed').to.be['false'];\n        (0, _chai.expect)(slackObject.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n            attribute: 'url',\n            message: 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>'\n        }]);\n        (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n    };\n\n    var testValidUrl = function testValidUrl(url) {\n        var slackObject = _ghostAdminModelsSlackIntegration['default'].create({ url: url });\n\n        _ghostAdminValidatorsSlackIntegration['default'].check(slackObject, 'url');\n\n        (0, _chai.expect)(_ghostAdminValidatorsSlackIntegration['default'].get('passed'), '\"' + url + '\" failed').to.be['true'];\n        (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n    };\n\n    (0, _mocha.describe)('Unit: Validator: slack-integration', function () {\n        (0, _mocha.it)('fails on invalid url values', function () {\n            var invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n\n            invalidUrls.forEach(function (url) {\n                testInvalidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('passes on valid url values', function () {\n            var validUrls = ['https://hooks.slack.com/services/;alskdjf', 'https://hooks.slack.com/services/123445678', 'https://hooks.slack.com/services/some_webhook'];\n\n            validUrls.forEach(function (url) {\n                testValidUrl(url);\n            });\n        });\n\n        (0, _mocha.it)('validates url by default', function () {\n            var slackObject = _ghostAdminModelsSlackIntegration['default'].create();\n\n            _ghostAdminValidatorsSlackIntegration['default'].check(slackObject);\n\n            (0, _chai.expect)(slackObject.get('errors').errorsFor('url')).to.be.empty;\n            (0, _chai.expect)(_ghostAdminValidatorsSlackIntegration['default'].get('passed')).to.be['true'];\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/validators/subscriber-test', ['exports', 'chai', 'mocha', 'ember', 'ghost-admin/mixins/validation-engine'], function (exports, _chai, _mocha, _ember, _ghostAdminMixinsValidationEngine) {\n    var run = _ember['default'].run;\n    var EmberObject = _ember['default'].Object;\n\n    var Subscriber = EmberObject.extend(_ghostAdminMixinsValidationEngine['default'], {\n        validationType: 'subscriber',\n\n        email: null\n    });\n\n    (0, _mocha.describe)('Unit: Validator: subscriber', function () {\n        (0, _mocha.it)('validates email by default', function () {\n            var subscriber = Subscriber.create({});\n            var properties = subscriber.get('validators.subscriber.properties');\n\n            (0, _chai.expect)(properties, 'properties').to.include('email');\n        });\n\n        (0, _mocha.it)('passes with a valid email', function () {\n            var subscriber = Subscriber.create({ email: 'test@example.com' });\n            var passed = false;\n\n            run(function () {\n                subscriber.validate({ property: 'email' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n        });\n\n        (0, _mocha.it)('validates email presence', function () {\n            var subscriber = Subscriber.create({});\n            var passed = false;\n\n            run(function () {\n                subscriber.validate({ property: 'email' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            var emailErrors = subscriber.get('errors').errorsFor('email').get(0);\n            (0, _chai.expect)(emailErrors.attribute, 'errors.email.attribute').to.equal('email');\n            (0, _chai.expect)(emailErrors.message, 'errors.email.message').to.equal('Please enter an email.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n        });\n\n        (0, _mocha.it)('validates email', function () {\n            var subscriber = Subscriber.create({ email: 'foo' });\n            var passed = false;\n\n            run(function () {\n                subscriber.validate({ property: 'email' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            var emailErrors = subscriber.get('errors').errorsFor('email').get(0);\n            (0, _chai.expect)(emailErrors.attribute, 'errors.email.attribute').to.equal('email');\n            (0, _chai.expect)(emailErrors.message, 'errors.email.message').to.equal('Invalid email.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n        });\n    });\n});\n/* jshint expr:true */","define('ghost-admin/tests/unit/validators/tag-settings-test', ['exports', 'chai', 'mocha', 'sinon', 'ember-runloop', 'ember-object', 'ghost-admin/mixins/validation-engine'], function (exports, _chai, _mocha, _sinon, _emberRunloop, _emberObject, _ghostAdminMixinsValidationEngine) {\n\n    var Tag = _emberObject['default'].extend(_ghostAdminMixinsValidationEngine['default'], {\n        validationType: 'tag',\n\n        name: null,\n        description: null,\n        metaTitle: null,\n        metaDescription: null\n    });\n\n    // TODO: These tests have way too much duplication, consider creating test\n    // helpers for validations\n\n    // TODO: Move testing of validation-engine behaviour into validation-engine-test\n    // and replace these tests with specific validator tests\n\n    (0, _mocha.describe)('Unit: Validator: tag-settings', function () {\n        (0, _mocha.it)('validates all fields by default', function () {\n            var tag = Tag.create({});\n            var properties = tag.get('validators.tag.properties');\n\n            // TODO: This is checking implementation details rather than expected\n            // behaviour. Replace once we have consistent behaviour (see below)\n            (0, _chai.expect)(properties, 'properties').to.include('name');\n            (0, _chai.expect)(properties, 'properties').to.include('slug');\n            (0, _chai.expect)(properties, 'properties').to.include('description');\n            (0, _chai.expect)(properties, 'properties').to.include('metaTitle');\n            (0, _chai.expect)(properties, 'properties').to.include('metaDescription');\n\n            // TODO: .validate (and  by extension .save) doesn't currently affect\n            // .hasValidated - it would be good to make this consistent.\n            // The following tests currently fail:\n            //\n            // run(() => {\n            //     tag.validate();\n            // });\n            //\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('name');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('description');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n            // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n\n        (0, _mocha.it)('passes with valid name', function () {\n            // longest valid name\n            var tag = Tag.create({ name: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(150);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates name presence', function () {\n            var tag = Tag.create();\n            var passed = false;\n            var nameErrors = undefined;\n\n            // TODO: validator is currently a singleton meaning state leaks\n            // between all objects that use it. Each object should either\n            // get it's own validator instance or validator objects should not\n            // contain state. The following currently fails:\n            //\n            // let validator = tag.get('validators.tag')\n            // expect(validator.get('passed'), 'passed').to.be.false;\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name').get(0);\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('You must specify a name for the tag.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates names starting with a comma', function () {\n            var tag = Tag.create({ name: ',test' });\n            var passed = false;\n            var nameErrors = undefined;\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name').get(0);\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names can\\'t start with commas.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('validates name length', function () {\n            // shortest invalid name\n            var tag = Tag.create({ name: new Array(152).join('x') });\n            var passed = false;\n            var nameErrors = undefined;\n\n            (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(151);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'name' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            nameErrors = tag.get('errors').errorsFor('name')[0];\n            (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n            (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n        });\n\n        (0, _mocha.it)('passes with valid slug', function () {\n            // longest valid slug\n            var tag = Tag.create({ slug: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(150);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'slug' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n        });\n\n        (0, _mocha.it)('validates slug length', function () {\n            // shortest invalid slug\n            var tag = Tag.create({ slug: new Array(152).join('x') });\n            var passed = false;\n            var slugErrors = undefined;\n\n            (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(151);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'slug' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            slugErrors = tag.get('errors').errorsFor('slug')[0];\n            (0, _chai.expect)(slugErrors.attribute, 'errors.slug.attribute').to.equal('slug');\n            (0, _chai.expect)(slugErrors.message, 'errors.slug.message').to.equal('URL cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n        });\n\n        (0, _mocha.it)('passes with a valid description', function () {\n            // longest valid description\n            var tag = Tag.create({ description: new Array(201).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(200);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'description' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n        });\n\n        (0, _mocha.it)('validates description length', function () {\n            // shortest invalid description\n            var tag = Tag.create({ description: new Array(202).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(201);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'description' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('description')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.description.attribute').to.equal('description');\n            (0, _chai.expect)(errors.message, 'errors.description.message').to.equal('Description cannot be longer than 200 characters.');\n\n            // TODO: tag.errors appears to be a singleton and previous errors are\n            // not cleared despite creating a new tag object\n            //\n            // console.log(JSON.stringify(tag.get('errors')));\n            // expect(tag.get('errors.length')).to.equal(1);\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n        });\n\n        // TODO: we have both metaTitle and metaTitle property names on the\n        // model/validator respectively - this should be standardised\n        (0, _mocha.it)('passes with a valid metaTitle', function () {\n            // longest valid metaTitle\n            var tag = Tag.create({ metaTitle: new Array(151).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(150);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'metaTitle' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n        });\n\n        (0, _mocha.it)('validates metaTitle length', function () {\n            // shortest invalid metaTitle\n            var tag = Tag.create({ metaTitle: new Array(152).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(151);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'metaTitle' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('metaTitle')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.metaTitle.attribute').to.equal('metaTitle');\n            (0, _chai.expect)(errors.message, 'errors.metaTitle.message').to.equal('Meta Title cannot be longer than 150 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n        });\n\n        // TODO: we have both metaDescription and metaDescription property names on\n        // the model/validator respectively - this should be standardised\n        (0, _mocha.it)('passes with a valid metaDescription', function () {\n            // longest valid description\n            var tag = Tag.create({ metaDescription: new Array(201).join('x') });\n            var passed = false;\n\n            (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(200);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'metaDescription' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            (0, _chai.expect)(passed, 'passed').to.be['true'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n\n        (0, _mocha.it)('validates metaDescription length', function () {\n            // shortest invalid metaDescription\n            var tag = Tag.create({ metaDescription: new Array(202).join('x') });\n            var passed = false;\n            var errors = undefined;\n\n            (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(201);\n\n            (0, _emberRunloop['default'])(function () {\n                tag.validate({ property: 'metaDescription' }).then(function () {\n                    passed = true;\n                });\n            });\n\n            errors = tag.get('errors').errorsFor('metaDescription')[0];\n            (0, _chai.expect)(errors.attribute, 'errors.metaDescription.attribute').to.equal('metaDescription');\n            (0, _chai.expect)(errors.message, 'errors.metaDescription.message').to.equal('Meta Description cannot be longer than 200 characters.');\n\n            (0, _chai.expect)(passed, 'passed').to.be['false'];\n            (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n        });\n    });\n});\n/* jshint expr:true */\n\n// import validator from 'ghost-admin/validators/tag-settings';","/* jshint ignore:start */\n\nrequire('ghost-admin/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsntbxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxzntGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChllvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvCA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrnxpvwnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvl4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5ihBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzSA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}